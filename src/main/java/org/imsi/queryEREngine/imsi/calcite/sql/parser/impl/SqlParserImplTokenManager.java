/* SqlParserImplTokenManager.java */
/* Generated by: ParserGeneratorCC: Do not edit this line. SqlParserImplTokenManager.java */
package org.imsi.queryEREngine.imsi.calcite.sql.parser.impl;
import java.util.ArrayList;
import java.util.List;

/** Token Manager. */
@SuppressWarnings ("unused")
public class SqlParserImplTokenManager implements SqlParserImplConstants {
	List<Integer> lexicalStateStack = new ArrayList<Integer>();

	void pushState() {
		lexicalStateStack.add(curLexState);
	}

	void popState() {
		SwitchTo(lexicalStateStack.remove(lexicalStateStack.size() - 1));
	}
	private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5, long active6, long active7, long active8, long active9, long active10, long active11){
		switch (pos)
		{
		case 0:
			if ((active0 & 0xffff8001fffffffeL) != 0x0L || (active1 & 0xffffffffffffffffL) != 0x0L || (active3 & 0x7ffc000000L) != 0x0L || (active4 & 0xffffc00000f00000L) != 0x0L || (active5 & 0x1fffL) != 0x0L || (active7 & 0x8000000000000L) != 0x0L || (active11 & 0x10000L) != 0x0L)
				return 89;
			if ((active11 & 0x2000080L) != 0x0L)
				return 84;
			if ((active10 & 0x200000000000000L) != 0x0L || (active11 & 0x800L) != 0x0L)
				return 90;
			if ((active5 & 0xfffffe000L) != 0x0L)
			{
				jjmatchedKind = 738;
				return 91;
			}
			if ((active11 & 0x1000L) != 0x0L)
				return 55;
			if ((active11 & 0x20L) != 0x0L)
				return 15;
			if ((active10 & 0x10000000000000L) != 0x0L)
				return 92;
			if ((active10 & 0x20000000L) != 0x0L)
			{
				jjmatchedKind = 738;
				return 1;
			}
			if ((active0 & 0x7ffe00000000L) != 0x0L || (active2 & 0xffffffffffffffffL) != 0x0L || (active3 & 0xffffff8003ffffffL) != 0x0L || (active4 & 0x3fffff0fffffL) != 0x0L || (active5 & 0xfffffff000000000L) != 0x0L || (active6 & 0xffffffffffffffffL) != 0x0L || (active7 & 0xfff7ffffffffffffL) != 0x0L || (active8 & 0xffffffffffffffffL) != 0x0L || (active9 & 0x7fffffffffffL) != 0x0L || (active10 & 0x3dfffffc0L) != 0x0L)
			{
				jjmatchedKind = 738;
				return 89;
			}
			if ((active9 & 0xffff800000000000L) != 0x0L || (active10 & 0x3fL) != 0x0L)
			{
				jjmatchedKind = 738;
				return 58;
			}
			if ((active10 & 0x40000000000000L) != 0x0L)
				return 93;
			return -1;
		case 1:
			if ((active0 & 0x40007fe00000L) != 0x0L || (active3 & 0xfffc000300000000L) != 0x0L || (active4 & 0x100000003ffL) != 0x0L || (active5 & 0x3c73000f800000L) != 0x0L || (active9 & 0x3000000L) != 0x0L)
				return 89;
			if ((active11 & 0x2000000L) != 0x0L)
				return 82;
			if ((active0 & 0xffff3fff801ffffcL) != 0x0L || (active1 & 0xffffffffffffffffL) != 0x0L || (active2 & 0xffffffffffffffffL) != 0x0L || (active3 & 0x3fffcfbffffffL) != 0x0L || (active4 & 0xffffbeffffeffc00L) != 0x0L || (active5 & 0xffc38cfff07fffffL) != 0x0L || (active6 & 0xffffffffffffffffL) != 0x0L || (active7 & 0xffffffffffffffffL) != 0x0L || (active8 & 0xffffffffffffffffL) != 0x0L || (active9 & 0xfffffffffcffffffL) != 0x0L || (active10 & 0x3ffffffffL) != 0x0L)
			{
				if (jjmatchedPos != 1)
				{
					jjmatchedKind = 738;
					jjmatchedPos = 1;
				}
				return 89;
			}
			return -1;
		case 2:
			if ((active0 & 0x20100459cdcL) != 0x0L || (active2 & 0xf006000000f60L) != 0x0L || (active3 & 0x800000004003c003L) != 0x0L || (active4 & 0x60800002e0001fL) != 0x0L || (active5 & 0x43802400082000feL) != 0x0L || (active6 & 0x1c000009fc000L) != 0x0L || (active7 & 0xe000000780000L) != 0x0L || (active8 & 0x1fffffffffffffL) != 0x0L || (active9 & 0x40L) != 0x0L || (active10 & 0x20000000L) != 0x0L)
				return 89;
			if ((active0 & 0xffff3dfef79a6320L) != 0x0L || (active1 & 0xffffffffffffffffL) != 0x0L || (active2 & 0xfff0ff9ffffff09fL) != 0x0L || (active3 & 0x7ffbfffebbfc3ffcL) != 0x0L || (active4 & 0xff9f3efffd0fffa0L) != 0x0L || (active5 & 0xbc7bcafff75fff01L) != 0x0L || (active6 & 0xfffe3fffff603fffL) != 0x0L || (active7 & 0xfff1ffffff87ffffL) != 0x0L || (active8 & 0xffe0000000000000L) != 0x0L || (active9 & 0xfffffffffeffffbfL) != 0x0L || (active10 & 0x3dfffffffL) != 0x0L)
			{
				if (jjmatchedPos != 2)
				{
					jjmatchedKind = 738;
					jjmatchedPos = 2;
				}
				return 89;
			}
			return -1;
		case 3:
			if ((active0 & 0xe663140000000000L) != 0x0L || (active1 & 0x83000000023fL) != 0x0L || (active2 & 0x600028801e00005fL) != 0x0L || (active3 & 0xe0200e00000L) != 0x0L || (active4 & 0x63b00ffc10L) != 0x0L || (active5 & 0x3c00c803c1406400L) != 0x0L || (active6 & 0x1e0200401800L) != 0x0L || (active7 & 0x594028000401000L) != 0x0L || (active8 & 0x20000000000000L) != 0x0L || (active9 & 0xe0004e00007f8000L) != 0x0L || (active10 & 0x1c78f000bL) != 0x0L)
				return 89;
			if ((active2 & 0x2000000000000L) != 0x0L)
				return 94;
			if ((active0 & 0x199c29fef79a7b38L) != 0x0L || (active1 & 0xffff7cfffffffdc0L) != 0x0L || (active2 & 0x9ffcd71fe1fffe80L) != 0x0L || (active3 & 0x7ffbf1fcbb1fbffeL) != 0x0L || (active4 & 0xffdf3e9c4dc003afL) != 0x0L || (active5 & 0x837b02fc361f9bddL) != 0x0L || (active6 & 0xffffa1fdff3fa7ffL) != 0x0L || (active7 & 0xfa69fd7fffb7efffL) != 0x0L || (active8 & 0xffdffffffffffffeL) != 0x0L || (active9 & 0x1fffb1fffe807fbfL) != 0x0L || (active10 & 0x21870fff4L) != 0x0L)
			{
				if (jjmatchedPos != 3)
				{
					jjmatchedKind = 738;
					jjmatchedPos = 3;
				}
				return 89;
			}
			return -1;
		case 4:
			if ((active0 & 0x1000001c001a3300L) != 0x0L || (active1 & 0x8000440000001440L) != 0x0L || (active2 & 0x150400000c00000L) != 0x0L || (active3 & 0x700087c00041f60L) != 0x0L || (active4 & 0x21f2e8809000000L) != 0x0L || (active5 & 0x1180002200c5300L) != 0x0L || (active6 & 0x4000090808000000L) != 0x0L || (active7 & 0x10080001e4000800L) != 0x0L || (active8 & 0x41c0000000000000L) != 0x0L || (active9 & 0x1418001000003800L) != 0x0L || (active10 & 0x2901001f4L) != 0x0L)
				return 89;
			if ((active2 & 0x2000000000000L) != 0x0L)
				return 94;
			if ((active0 & 0xcd9e29e2f7804838L) != 0x0L || (active1 & 0x7fff3affffffe9bfL) != 0x0L || (active2 & 0xdeac971ffd3ffe9aL) != 0x0L || (active3 & 0x78fbf180bb1ba09eL) != 0x0L || (active4 & 0xfdc0105564cfe3afL) != 0x0L || (active5 & 0xba6302fd961388ddL) != 0x0L || (active6 & 0xbfffa0f5f73fa7ffL) != 0x0L || (active7 & 0xea61fd7e1bb7e7ffL) != 0x0L || (active8 & 0xbe1ffffffffffffeL) != 0x0L || (active9 & 0xcbe7b5effefc47bfL) != 0x0L || (active10 & 0xb68fe03L) != 0x0L)
			{
				if (jjmatchedPos != 4)
				{
					jjmatchedKind = 738;
					jjmatchedPos = 4;
				}
				return 89;
			}
			return -1;
		case 5:
			if ((active0 & 0x2018210004028L) != 0x0L || (active1 & 0x6000200001980000L) != 0x0L || (active2 & 0x86a00018001f0200L) != 0x0L || (active3 & 0x100220c082008084L) != 0x0L || (active4 & 0x2100000400000080L) != 0x0L || (active5 & 0x24302950000028cL) != 0x0L || (active6 & 0x4000080100L) != 0x0L || (active7 & 0x840611e1a0047fcL) != 0x0L || (active8 & 0x1200000000000000L) != 0x0L || (active9 & 0xb20200000000702L) != 0x0L || (active10 & 0x1400080L) != 0x0L)
				return 89;
			if ((active2 & 0x2000000000000L) != 0x0L)
				return 94;
			if ((active0 & 0xcd9c2878e7900810L) != 0x0L || (active1 & 0x1fff1afffe67e9bfL) != 0x0L || (active2 & 0x580c9707fd20fc9aL) != 0x0L || (active3 & 0x68f9d128391b241aL) != 0x0L || (active4 & 0xdcde1c5164cfe32fL) != 0x0L || (active5 & 0xb830006896138851L) != 0x0L || (active6 & 0xbfffa0b5f737a6ffL) != 0x0L || (active7 & 0xe2219c61c1b7a003L) != 0x0L || (active8 & 0xad1ffffffffffffeL) != 0x0L || (active9 & 0xc0c795effefc70bdL) != 0x0L || (active10 & 0xa28ff03L) != 0x0L)
			{
				if (jjmatchedPos != 5)
				{
					jjmatchedKind = 738;
					jjmatchedPos = 5;
				}
				return 89;
			}
			return -1;
		case 6:
			if ((active0 & 0xd98284000000000L) != 0x0L || (active1 & 0x1ffe008070042000L) != 0x0L || (active2 & 0x4800170001063c00L) != 0x0L || (active3 & 0xc0000808030012L) != 0x0L || (active4 & 0x6101140000121L) != 0x0L || (active5 & 0x1002000800120008L) != 0x0L || (active6 & 0xa82000848137a240L) != 0x0L || (active7 & 0x21803000878201L) != 0x0L || (active8 & 0x40L) != 0x0L || (active9 & 0xc081e000800000L) != 0x0L || (active10 & 0xa00f200L) != 0x0L)
				return 89;
			if ((active2 & 0x2000000000000L) != 0x0L)
				return 94;
			if ((active0 & 0xc0040038e7900810L) != 0x0L || (active1 & 0x40011a7f8f73c9bfL) != 0x0L || (active2 & 0x140c8007fc20c09aL) != 0x0L || (active3 & 0x6839d12031182408L) != 0x0L || (active4 & 0xdcd80c4024cfe20eL) != 0x0L || (active5 & 0xa830006096018851L) != 0x0L || (active6 & 0x17dfa031760004bfL) != 0x0L || (active7 & 0xe2005c41d13021f2L) != 0x0L || (active8 & 0xad1fffffffffffbeL) != 0x0L || (active9 & 0xc007140ffe7c76bdL) != 0x0L || (active10 & 0x280d03L) != 0x0L)
			{
				if (jjmatchedPos != 6)
				{
					jjmatchedKind = 738;
					jjmatchedPos = 6;
				}
				return 89;
			}
			return -1;
		case 7:
			if ((active0 & 0x10000000000810L) != 0x0L || (active1 & 0x6000000800L) != 0x0L || (active2 & 0x80068400a002L) != 0x0L || (active3 & 0x2000102021000008L) != 0x0L || (active4 & 0xc0000004800008L) != 0x0L || (active5 & 0x810000080010850L) != 0x0L || (active6 & 0x780000116000000L) != 0x0L || (active7 & 0xe200084000002002L) != 0x0L || (active8 & 0xd000000e84L) != 0x0L || (active9 & 0x100004000020L) != 0x0L || (active10 & 0x80500L) != 0x0L)
				return 89;
			if ((active2 & 0x2000000000000L) != 0x0L)
				return 94;
			if ((active0 & 0xc1040038e7900000L) != 0x0L || (active1 & 0x5ffd1a1fef73c1bfL) != 0x0L || (active2 & 0x140c060178204098L) != 0x0L || (active3 & 0x48b9c10010182400L) != 0x0L || (active4 & 0xdc180c40204fe206L) != 0x0L || (active5 & 0xa020006016008001L) != 0x0L || (active6 & 0x105fa030600704bfL) != 0x0L || (active7 & 0x15401d13701f0L) != 0x0L || (active8 & 0xad1fff2ffffff13aL) != 0x0L || (active9 & 0xc00705cffa7c769dL) != 0x0L || (active10 & 0x208803L) != 0x0L)
			{
				if (jjmatchedPos != 7)
				{
					jjmatchedKind = 738;
					jjmatchedPos = 7;
				}
				return 89;
			}
			return -1;
		case 8:
			if ((active0 & 0x8000002061000000L) != 0x0L || (active1 & 0x108000f03c03fL) != 0x0L || (active2 & 0x1404000000000000L) != 0x0L || (active3 & 0xb8c10010102000L) != 0x0L || (active4 & 0xc0000000206L) != 0x0L || (active5 & 0x8000000016000000L) != 0x0L || (active6 & 0x62020600000bfL) != 0x0L || (active7 & 0x40001100100L) != 0x0L || (active8 & 0x2100000300004000L) != 0x0L || (active9 & 0x10007801c4098L) != 0x0L || (active10 & 0x800L) != 0x0L)
				return 89;
			if ((active0 & 0x4104001886900000L) != 0x0L || (active1 & 0x5ffc121fe0700180L) != 0x0L || (active2 & 0x8060178204098L) != 0x0L || (active3 & 0x4801000000080400L) != 0x0L || (active4 & 0xdc180040204fe000L) != 0x0L || (active5 & 0x2020006000008001L) != 0x0L || (active6 & 0x1059801004070400L) != 0x0L || (active7 & 0xc0015001d02700f0L) != 0x0L || (active8 & 0x8c1fffacffffb13aL) != 0x0L || (active9 & 0xc00605c87a603605L) != 0x0L || (active10 & 0x208003L) != 0x0L)
			{
				if (jjmatchedPos != 8)
				{
					jjmatchedKind = 738;
					jjmatchedPos = 8;
				}
				return 89;
			}
			return -1;
		case 9:
			if ((active0 & 0x46800000L) != 0x0L || (active1 & 0x100fe00000a0L) != 0x0L || (active2 & 0x110204080L) != 0x0L || (active4 & 0x40204c6000L) != 0x0L || (active5 & 0x2020000004008001L) != 0x0L || (active6 & 0x1048801000000000L) != 0x0L || (active7 & 0x80200000L) != 0x0L || (active8 & 0x400000000002038L) != 0x0L || (active9 & 0x40100001004L) != 0x0L || (active10 & 0x8000L) != 0x0L)
				return 89;
			if ((active0 & 0x4104001880100000L) != 0x0L || (active1 & 0x5ffc02100c73811fL) != 0x0L || (active2 & 0x8060068000018L) != 0x0L || (active3 & 0x4801800000080400L) != 0x0L || (active4 & 0xdc18080000038004L) != 0x0L || (active5 & 0x6000000000L) != 0x0L || (active6 & 0x1100000407043fL) != 0x0L || (active7 & 0xc0015001500700f0L) != 0x0L || (active8 & 0x881fffacffff9102L) != 0x0L || (active9 & 0xc00601cc7a782611L) != 0x0L || (active10 & 0x200003L) != 0x0L)
			{
				if (jjmatchedPos != 9)
				{
					jjmatchedKind = 738;
					jjmatchedPos = 9;
				}
				return 89;
			}
			return -1;
		case 10:
			if ((active0 & 0x4004000800000000L) != 0x0L || (active1 & 0x4080001804100000L) != 0x0L || (active2 & 0x48000000L) != 0x0L || (active3 & 0x800800000080400L) != 0x0L || (active4 & 0xc000000000038000L) != 0x0L || (active6 & 0x1000000000400L) != 0x0L || (active7 & 0x400010000000L) != 0x0L || (active8 & 0x810030400009100L) != 0x0L || (active9 & 0x2000878002601L) != 0x0L)
				return 89;
			if ((active0 & 0x100001080100000L) != 0x0L || (active1 & 0x1f7c02074863811fL) != 0x0L || (active2 & 0x8060020000018L) != 0x0L || (active3 & 0x4001000000000000L) != 0x0L || (active4 & 0x1c18080000004004L) != 0x0L || (active5 & 0x6000000000L) != 0x0L || (active6 & 0x1000000407003fL) != 0x0L || (active7 & 0xc0011001400700f0L) != 0x0L || (active8 & 0x800ffca8ffff0002L) != 0x0L || (active9 & 0xc00401c402780010L) != 0x0L || (active10 & 0x200003L) != 0x0L)
			{
				if (jjmatchedPos != 10)
				{
					jjmatchedKind = 738;
					jjmatchedPos = 10;
				}
				return 89;
			}
			return -1;
		case 11:
			if ((active0 & 0x100000000000000L) != 0x0L || (active1 & 0x1668000000000100L) != 0x0L || (active3 & 0x4000000000000000L) != 0x0L || (active4 & 0x1008000000000004L) != 0x0L || (active5 & 0x4000000000L) != 0x0L || (active6 & 0x40000L) != 0x0L || (active7 & 0x8001100100020000L) != 0x0L || (active8 & 0x6082800000002L) != 0x0L || (active9 & 0x8000080000L) != 0x0L || (active10 & 0x200000L) != 0x0L)
				return 89;
			if ((active0 & 0x1080100000L) != 0x0L || (active1 & 0x91402074863801fL) != 0x0L || (active2 & 0x8060020000018L) != 0x0L || (active3 & 0x1000000000000L) != 0x0L || (active4 & 0xc10080000024000L) != 0x0L || (active5 & 0x2000000000L) != 0x0L || (active6 & 0x1000000403003fL) != 0x0L || (active7 & 0x40000000400500f0L) != 0x0L || (active8 & 0x8009f480ffff0000L) != 0x0L || (active9 & 0xc004014472700010L) != 0x0L || (active10 & 0x3L) != 0x0L)
			{
				if (jjmatchedPos != 11)
				{
					jjmatchedKind = 738;
					jjmatchedPos = 11;
				}
				return 89;
			}
			return -1;
		case 12:
			if ((active0 & 0x80000000L) != 0x0L || (active1 & 0x20000000000L) != 0x0L || (active2 & 0x8000020000000L) != 0x0L || (active4 & 0x4000L) != 0x0L || (active7 & 0x4000000000000000L) != 0x0L || (active8 & 0x8408000000000L) != 0x0L || (active9 & 0x4000000300000L) != 0x0L)
				return 89;
			if ((active0 & 0x1000100000L) != 0x0L || (active1 & 0xd1400074863801fL) != 0x0L || (active2 & 0x60000000018L) != 0x0L || (active3 & 0x1000000000000L) != 0x0L || (active4 & 0xc10080000020000L) != 0x0L || (active5 & 0x2000000000L) != 0x0L || (active6 & 0x1000000403003fL) != 0x0L || (active7 & 0x400500f0L) != 0x0L || (active8 & 0x8001b400ffff0000L) != 0x0L || (active9 & 0xc000014472400010L) != 0x0L || (active10 & 0x3L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 12;
				return 89;
			}
			return -1;
		case 13:
			if ((active1 & 0x100000000010000L) != 0x0L || (active3 & 0x1000000000000L) != 0x0L || (active4 & 0x400080000020000L) != 0x0L || (active6 & 0x10000004000003L) != 0x0L || (active7 & 0x40040000L) != 0x0L || (active8 & 0x1200000000000L) != 0x0L || (active9 & 0x10000000000L) != 0x0L)
				return 89;
			if ((active0 & 0x1000100000L) != 0x0L || (active1 & 0xc1400074862801fL) != 0x0L || (active2 & 0x60000000018L) != 0x0L || (active4 & 0x810000000000000L) != 0x0L || (active5 & 0x2000000000L) != 0x0L || (active6 & 0x3003cL) != 0x0L || (active7 & 0x100f0L) != 0x0L || (active8 & 0x80009400ffff0000L) != 0x0L || (active9 & 0xc000004472400010L) != 0x0L || (active10 & 0x3L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 13;
				return 89;
			}
			return -1;
		case 14:
			if ((active0 & 0x1000000000L) != 0x0L || (active1 & 0x4000240000010L) != 0x0L || (active4 & 0x10000000000000L) != 0x0L || (active6 & 0x30000L) != 0x0L || (active7 & 0x10020L) != 0x0L || (active8 & 0x8000800040000000L) != 0x0L || (active9 & 0x4402400010L) != 0x0L)
				return 89;
			if ((active0 & 0x100000L) != 0x0L || (active1 & 0xc1000050862800fL) != 0x0L || (active2 & 0x60000000018L) != 0x0L || (active4 & 0x800000000000000L) != 0x0L || (active5 & 0x2000000000L) != 0x0L || (active6 & 0x3cL) != 0x0L || (active7 & 0xd0L) != 0x0L || (active8 & 0x1400bfff0000L) != 0x0L || (active9 & 0xc000000070000000L) != 0x0L || (active10 & 0x3L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 14;
				return 89;
			}
			return -1;
		case 15:
			if ((active1 & 0x8620001L) != 0x0L || (active2 & 0x60000000000L) != 0x0L || (active8 & 0x800f0000L) != 0x0L)
				return 89;
			if ((active0 & 0x100000L) != 0x0L || (active1 & 0xc1000050000800eL) != 0x0L || (active2 & 0x18L) != 0x0L || (active4 & 0x800000000000000L) != 0x0L || (active5 & 0x2000000000L) != 0x0L || (active6 & 0x3cL) != 0x0L || (active7 & 0xd0L) != 0x0L || (active8 & 0x14003ff00000L) != 0x0L || (active9 & 0xc000000070000000L) != 0x0L || (active10 & 0x3L) != 0x0L)
			{
				if (jjmatchedPos != 15)
				{
					jjmatchedKind = 738;
					jjmatchedPos = 15;
				}
				return 89;
			}
			return -1;
		case 16:
			if ((active1 & 0x400000400008000L) != 0x0L || (active5 & 0x2000000000L) != 0x0L || (active7 & 0x80L) != 0x0L || (active8 & 0x38700000L) != 0x0L)
				return 89;
			if ((active0 & 0x100000L) != 0x0L || (active1 & 0x81000010040000eL) != 0x0L || (active2 & 0x40000000018L) != 0x0L || (active4 & 0x800000000000000L) != 0x0L || (active6 & 0x3cL) != 0x0L || (active7 & 0x50L) != 0x0L || (active8 & 0x1400078e0000L) != 0x0L || (active9 & 0xc000000070000000L) != 0x0L || (active10 & 0x3L) != 0x0L)
			{
				if (jjmatchedPos != 16)
				{
					jjmatchedKind = 738;
					jjmatchedPos = 16;
				}
				return 89;
			}
			return -1;
		case 17:
			if ((active1 & 0x100000004L) != 0x0L || (active8 & 0x2000000L) != 0x0L)
				return 89;
			if ((active0 & 0x100000L) != 0x0L || (active1 & 0x81000000040000aL) != 0x0L || (active2 & 0x40000000018L) != 0x0L || (active4 & 0x800000000000000L) != 0x0L || (active6 & 0x3cL) != 0x0L || (active7 & 0x50L) != 0x0L || (active8 & 0x140015ee0000L) != 0x0L || (active9 & 0xc000000070000000L) != 0x0L || (active10 & 0x3L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 17;
				return 89;
			}
			return -1;
		case 18:
			if ((active8 & 0x140005800000L) != 0x0L || (active9 & 0x10000000L) != 0x0L)
				return 89;
			if ((active0 & 0x100000L) != 0x0L || (active1 & 0x81000000040000aL) != 0x0L || (active2 & 0x40000000018L) != 0x0L || (active4 & 0x800000000000000L) != 0x0L || (active6 & 0x3cL) != 0x0L || (active7 & 0x50L) != 0x0L || (active8 & 0x106e0000L) != 0x0L || (active9 & 0xc000000060000000L) != 0x0L || (active10 & 0x3L) != 0x0L)
			{
				if (jjmatchedPos != 18)
				{
					jjmatchedKind = 738;
					jjmatchedPos = 18;
				}
				return 89;
			}
			return -1;
		case 19:
			if ((active1 & 0x8L) != 0x0L || (active4 & 0x800000000000000L) != 0x0L || (active7 & 0x10L) != 0x0L)
				return 89;
			if ((active0 & 0x100000L) != 0x0L || (active1 & 0x810000000400002L) != 0x0L || (active2 & 0x40000000018L) != 0x0L || (active6 & 0x3cL) != 0x0L || (active7 & 0x40L) != 0x0L || (active8 & 0x116e0000L) != 0x0L || (active9 & 0xc000000060000000L) != 0x0L || (active10 & 0x3L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 19;
				return 89;
			}
			return -1;
		case 20:
			if ((active0 & 0x100000L) != 0x0L || (active1 & 0x400002L) != 0x0L || (active2 & 0x40000000000L) != 0x0L || (active7 & 0x40L) != 0x0L)
				return 89;
			if ((active1 & 0x810000000000000L) != 0x0L || (active2 & 0x18L) != 0x0L || (active6 & 0x3cL) != 0x0L || (active8 & 0x116e0000L) != 0x0L || (active9 & 0xc000000060000000L) != 0x0L || (active10 & 0x3L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 20;
				return 89;
			}
			return -1;
		case 21:
			if ((active2 & 0x8L) != 0x0L || (active9 & 0x8000000020000000L) != 0x0L || (active10 & 0x1L) != 0x0L)
				return 89;
			if ((active1 & 0x810000000000000L) != 0x0L || (active2 & 0x10L) != 0x0L || (active6 & 0x3cL) != 0x0L || (active8 & 0x116e0000L) != 0x0L || (active9 & 0x4000000040000000L) != 0x0L || (active10 & 0x2L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 21;
				return 89;
			}
			return -1;
		case 22:
			if ((active6 & 0x10L) != 0x0L)
				return 89;
			if ((active1 & 0x810000000000000L) != 0x0L || (active2 & 0x10L) != 0x0L || (active6 & 0x2cL) != 0x0L || (active8 & 0x116e0000L) != 0x0L || (active9 & 0x4000000040000000L) != 0x0L || (active10 & 0x2L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 22;
				return 89;
			}
			return -1;
		case 23:
			if ((active8 & 0x20000L) != 0x0L || (active9 & 0x40000000L) != 0x0L || (active10 & 0x2L) != 0x0L)
				return 89;
			if ((active1 & 0x810000000000000L) != 0x0L || (active2 & 0x10L) != 0x0L || (active6 & 0x2cL) != 0x0L || (active8 & 0x116c0000L) != 0x0L || (active9 & 0x4000000000000000L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 23;
				return 89;
			}
			return -1;
		case 24:
			if ((active6 & 0x20L) != 0x0L || (active9 & 0x4000000000000000L) != 0x0L)
				return 89;
			if ((active1 & 0x810000000000000L) != 0x0L || (active2 & 0x10L) != 0x0L || (active6 & 0xcL) != 0x0L || (active8 & 0x116c0000L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 24;
				return 89;
			}
			return -1;
		case 25:
			if ((active6 & 0xcL) != 0x0L || (active8 & 0x100c0000L) != 0x0L)
				return 89;
			if ((active1 & 0x810000000000000L) != 0x0L || (active2 & 0x10L) != 0x0L || (active8 & 0x1600000L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 25;
				return 89;
			}
			return -1;
		case 26:
			if ((active2 & 0x10L) != 0x0L || (active8 & 0x600000L) != 0x0L)
				return 89;
			if ((active1 & 0x810000000000000L) != 0x0L || (active8 & 0x1000000L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 26;
				return 89;
			}
			return -1;
		case 27:
			if ((active1 & 0x810000000000000L) != 0x0L || (active8 & 0x1000000L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 27;
				return 89;
			}
			return -1;
		case 28:
			if ((active8 & 0x1000000L) != 0x0L)
				return 89;
			if ((active1 & 0x810000000000000L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 28;
				return 89;
			}
			return -1;
		case 29:
			if ((active1 & 0x810000000000000L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 29;
				return 89;
			}
			return -1;
		case 30:
			if ((active1 & 0x10000000000000L) != 0x0L)
				return 89;
			if ((active1 & 0x800000000000000L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 30;
				return 89;
			}
			return -1;
		default :
			return -1;
		}
	}
	private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5, long active6, long active7, long active8, long active9, long active10, long active11){
		return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, active11), pos + 1);
	}
	private int jjStopAtPos(int pos, int kind)
	{
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		return pos + 1;
	}
	private int jjMoveStringLiteralDfa0_0(){
		switch(curChar)
		{
		case '!':
			return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x8L);
		case '"':
			return jjStopAtPos(0, 717);
		case '$':
			return jjStartNfaWithStates_0(0, 720, 89);
		case '%':
			return jjStopAtPos(0, 712);
		case '\'':
			return jjStartNfaWithStates_0(0, 716, 55);
		case '(':
			return jjStopAtPos(0, 686);
		case ')':
			return jjStopAtPos(0, 687);
		case '*':
			jjmatchedKind = 710;
			return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x800000L);
		case '+':
			return jjStopAtPos(0, 708);
		case ',':
			return jjStopAtPos(0, 698);
		case '-':
			return jjStartNfaWithStates_0(0, 709, 15);
		case '.':
			jjmatchedKind = 697;
			return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x800L);
		case '/':
			jjmatchedKind = 711;
			return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x2000000L);
		case ':':
			return jjStopAtPos(0, 703);
		case ';':
			return jjStopAtPos(0, 696);
		case '<':
			jjmatchedKind = 701;
			return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x5L);
		case '=':
			jjmatchedKind = 699;
			return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x400L);
		case '>':
			jjmatchedKind = 700;
			return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x2L);
		case '?':
			return jjStopAtPos(0, 702);
		case 'A':
			jjmatchedKind = 1;
			return jjMoveStringLiteralDfa1_0(0x1fffffffcL, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'B':
			return jjMoveStringLiteralDfa1_0(0x7ffe00000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'C':
			jjmatchedKind = 47;
			return jjMoveStringLiteralDfa1_0(0xffff000000000000L, 0xffffffffffffffffL, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'D':
			return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x7ffffffffffL, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x200000000L, 0x0L);
		case 'E':
			return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xfffff80000000000L, 0x1fL, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'F':
			return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x3ffffe0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'G':
			jjmatchedKind = 218;
			return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x7ff8000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'H':
			return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xf8000000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'I':
			return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xfffff00000000000L, 0x3ffL, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'J':
			return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0xffc00L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'K':
			jjmatchedKind = 276;
			return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0xe00000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'L':
			return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x3fffff000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'M':
			jjmatchedKind = 302;
			return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0xffff800000000000L, 0x1fffL, 0x0L, 0x8000000000000L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'N':
			return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0xfffffe000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'O':
			return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x3ffffff000000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'P':
			return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0xc000000000000000L, 0x7fffffffffL, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'Q':
			return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x8000000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'R':
			return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0xffffff0000000000L, 0xffffffL, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'S':
			return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0xfff7ffffff000000L, 0xffffffffffffffffL, 0x7ffL, 0x0L, 0x0L);
		case 'T':
			return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x7ffffffff800L, 0x0L, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0xffff800000000000L, 0x3fL, 0x0L);
		case 'V':
			return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x1ffc0L, 0x0L);
		case 'W':
			return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x1ffe0000L, 0x0L);
		case 'X':
			return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x20000000L, 0x0L);
		case 'Y':
			return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0xc0000000L, 0x0L);
		case 'Z':
			return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x100000000L, 0x0L);
		case '[':
			return jjStartNfaWithStates_0(0, 694, 93);
		case ']':
			return jjStopAtPos(0, 695);
		case '^':
			return jjStopAtPos(0, 719);
		case '{':
			return jjStartNfaWithStates_0(0, 692, 92);
		case '|':
			jjmatchedKind = 718;
			return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x200L);
		case '}':
			return jjStopAtPos(0, 693);
		default :
			return jjMoveNfa_0(0, 0);
		}
	}
	private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3, long active4, long active5, long active6, long active7, long active8, long active9, long active10, long active11){
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_0(0, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, active11);
			return 1;
		}
		switch(curChar)
		{
		case '*':
			if ((active11 & 0x2000000L) != 0x0L)
				return jjStartNfaWithStates_0(1, 729, 82);
			break;
		case '.':
			if ((active11 & 0x800L) != 0x0L)
				return jjStopAtPos(1, 715);
			break;
		case '/':
			if ((active11 & 0x800000L) != 0x0L)
				return jjStopAtPos(1, 727);
			break;
		case '=':
			if ((active11 & 0x1L) != 0x0L)
				return jjStopAtPos(1, 704);
			else if ((active11 & 0x2L) != 0x0L)
				return jjStopAtPos(1, 705);
			else if ((active11 & 0x8L) != 0x0L)
				return jjStopAtPos(1, 707);
			break;
		case '>':
			if ((active11 & 0x4L) != 0x0L)
				return jjStopAtPos(1, 706);
			else if ((active11 & 0x400L) != 0x0L)
				return jjStopAtPos(1, 714);
			break;
		case 'A':
			return jjMoveStringLiteralDfa2_0(active0, 0x1ff000000000000L, active1, 0x0L, active2, 0x8000000007fL, active3, 0x8000000020L, active4, 0x7f80007f000400L, active5, 0xc00000000003e000L, active6, 0x30000003fffL, active7, 0x1000000L, active8, 0x0L, active9, 0x3800L, active10, 0x3fc0L, active11, 0x0L);
		case 'B':
			return jjMoveStringLiteralDfa2_0(active0, 0x1cL, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x1000000000L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L, active11, 0x0L);
		case 'C':
			return jjMoveStringLiteralDfa2_0(active0, 0x20L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0xe0000c0000L, active6, 0x0L, active7, 0x3fe000000L, active8, 0x0L, active9, 0x0L, active10, 0x0L, active11, 0x0L);
		case 'D':
			return jjMoveStringLiteralDfa2_0(active0, 0x1c0L, active1, 0x0L, active2, 0x0L, active3, 0x100000000000L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L, active11, 0x0L);
		case 'E':
			return jjMoveStringLiteralDfa2_0(active0, 0xe00007e00000000L, active1, 0x0L, active2, 0x3fffff80L, active3, 0x78000040L, active4, 0x3f80000f80e00000L, active5, 0x700000L, active6, 0xfffffc00001fc000L, active7, 0x7fffc000007ffL, active8, 0x0L, active9, 0x800000004000L, active10, 0x2c002c000L, active11, 0x0L);
		case 'F':
			if ((active5 & 0x10000000000L) != 0x0L)
			{
				jjmatchedKind = 360;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_0(active0, 0x200L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x20000000000L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L, active11, 0x0L);
		case 'G':
			return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x200000000000L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L, active11, 0x0L);
		case 'H':
			return jjMoveStringLiteralDfa2_0(active0, 0xf000000000000000L, active1, 0x7fL, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x10000000000000L, active8, 0x0L, active9, 0x8000L, active10, 0x1c0000L, active11, 0x0L);
		case 'I':
			return jjMoveStringLiteralDfa2_0(active0, 0x38000000000L, active1, 0x0L, active2, 0x7c0000000L, active3, 0x10000000780L, active4, 0xc00000f000000000L, active5, 0x1fL, active6, 0x0L, active7, 0xe8000000000800L, active8, 0x0L, active9, 0xff0000L, active10, 0x3e10000L, active11, 0x0L);
		case 'K':
			return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x100000000000000L, active8, 0x0L, active9, 0x0L, active10, 0x0L, active11, 0x0L);
		case 'L':
			return jjMoveStringLiteralDfa2_0(active0, 0x40000007c00L, active1, 0x780L, active2, 0x300000000000L, active3, 0x80001800L, active4, 0x0L, active5, 0x40000000000L, active6, 0xe00000L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L, active11, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x0L, active2, 0x400000000000L, active3, 0x3c00000000000L, active4, 0x0L, active5, 0x80000000000L, active6, 0x0L, active7, 0x200000000000000L, active8, 0x0L, active9, 0x0L, active10, 0x20000000L, active11, 0x0L);
		case 'N':
			if ((active3 & 0x4000000000000L) != 0x0L)
			{
				jjmatchedKind = 242;
				jjmatchedPos = 1;
			}
			else if ((active4 & 0x10000000000L) != 0x0L)
				return jjStartNfaWithStates_0(1, 296, 89);
			else if ((active5 & 0x100000000000L) != 0x0L)
			{
				jjmatchedKind = 364;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_0(active0, 0x18000L, active1, 0x0L, active2, 0xf800000000000L, active3, 0xfff8000000000000L, active4, 0x3fL, active5, 0x600000000000L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x1ff000000000000L, active10, 0x0L, active11, 0x0L);
		case 'O':
			if ((active3 & 0x100000000L) != 0x0L)
			{
				jjmatchedKind = 224;
				jjmatchedPos = 1;
			}
			else if ((active5 & 0x800000L) != 0x0L)
			{
				jjmatchedKind = 343;
				jjmatchedPos = 1;
			}
			else if ((active9 & 0x1000000L) != 0x0L)
			{
				jjmatchedKind = 600;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_0(active0, 0x180000000000L, active1, 0x1ffffffff800L, active2, 0x7800000000L, active3, 0xe020007e000L, active4, 0x3e0000000800L, active5, 0xf0007e0L, active6, 0xf000000L, active7, 0xc000000007ff000L, active8, 0x0L, active9, 0x2000000L, active10, 0x104000000L, active11, 0x0L);
		case 'P':
			return jjMoveStringLiteralDfa2_0(active0, 0x20000L, active1, 0x0L, active2, 0x10000000000000L, active3, 0x0L, active4, 0x0L, active5, 0x3800000000000L, active6, 0x0L, active7, 0xf000000000000000L, active8, 0x0L, active9, 0xe00000000000000L, active10, 0x0L, active11, 0x0L);
		case 'Q':
			return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x0L, active2, 0x20000000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x3fffffffffffffL, active9, 0x0L, active10, 0x0L, active11, 0x0L);
		case 'R':
			if ((active5 & 0x4000000000000L) != 0x0L)
			{
				jjmatchedKind = 370;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_0(active0, 0x2000001c0000L, active1, 0x600000000000L, active2, 0x40008000000000L, active3, 0x7c00780000L, active4, 0x0L, active5, 0x38000000000000L, active6, 0x3ff0000000L, active7, 0x0L, active8, 0x0L, active9, 0x1ffffc000000L, active10, 0x18000000L, active11, 0x0L);
		case 'S':
			if ((active0 & 0x200000L) != 0x0L)
			{
				jjmatchedKind = 21;
				jjmatchedPos = 1;
			}
			else if ((active4 & 0x40L) != 0x0L)
			{
				jjmatchedKind = 262;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_0(active0, 0x7c00000L, active1, 0x0L, active2, 0x80000000000000L, active3, 0x0L, active4, 0xff380L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0xf000000000000000L, active10, 0x7L, active11, 0x0L);
		case 'T':
			if ((active0 & 0x8000000L) != 0x0L)
			{
				jjmatchedKind = 27;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_0(active0, 0x70000000L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x40000030000000L, active6, 0x0L, active7, 0x0L, active8, 0x7fc0000000000000L, active9, 0x0L, active10, 0x38L, active11, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa2_0(active0, 0x80000000L, active1, 0x7fff800000000000L, active2, 0x0L, active3, 0x3800000L, active4, 0x0L, active5, 0x380000fc0001800L, active6, 0xc000000000L, active7, 0x800000L, active8, 0x8000000000000000L, active9, 0x20000000007fL, active10, 0x0L, active11, 0x0L);
		case 'V':
			return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0x0L, active2, 0x100000000000000L, active3, 0x0L, active4, 0x0L, active5, 0x3c00000000000000L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L, active11, 0x0L);
		case 'X':
			return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x0L, active2, 0xfe00000000000000L, active3, 0x1fL, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L, active11, 0x0L);
		case 'Y':
			if ((active0 & 0x400000000000L) != 0x0L)
				return jjStartNfaWithStates_0(1, 46, 89);
			return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x8000000000000000L, active2, 0x70000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x400000000780L, active10, 0x0L, active11, 0x0L);
		case '|':
			if ((active11 & 0x200L) != 0x0L)
				return jjStopAtPos(1, 713);
			break;
		default :
			break;
		}
		return jjStartNfa_0(0, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, active11);
	}
	private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10, long old11, long active11){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10) | (active11 &= old11)) == 0L)
			return jjStartNfa_0(0, old0, old1, old2, old3, old4, old5, old6, old7, old8, old9, old10, old11);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_0(1, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
			return 2;
		}
		switch(curChar)
		{
		case 'A':
			if ((active0 & 0x40L) != 0x0L)
				return jjStartNfaWithStates_0(2, 6, 89);
			return jjMoveStringLiteralDfa3_0(active0, 0xf000000000000000L, active1, 0x9bfL, active2, 0x40000080L, active3, 0xc00180000L, active4, 0x80000180000000L, active5, 0x0L, active6, 0x1c8000600000L, active7, 0x1200000406000000L, active8, 0x3c0000000000000L, active9, 0x1000000ffc000000L, active10, 0xc8000000L);
		case 'B':
			return jjMoveStringLiteralDfa3_0(active0, 0x0L, active1, 0x800000001000L, active2, 0x0L, active3, 0x0L, active4, 0x1001000000L, active5, 0x0L, active6, 0x4000000000L, active7, 0x0L, active8, 0x8000000000000000L, active9, 0x100000000381fL, active10, 0x0L);
		case 'C':
			if ((active0 & 0x400000L) != 0x0L)
				return jjStartNfaWithStates_0(2, 22, 89);
			else if ((active2 & 0x100L) != 0x0L)
			{
				jjmatchedKind = 136;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_0(active0, 0x0L, active1, 0x8000000000000000L, active2, 0x1e80880000000e00L, active3, 0x18000000000000L, active4, 0x40001e0000000000L, active5, 0x2000000000L, active6, 0x200000000000L, active7, 0x7800000000L, active8, 0x0L, active9, 0x6000000000020L, active10, 0x0L);
		case 'D':
			if ((active0 & 0x80L) != 0x0L)
				return jjStartNfaWithStates_0(2, 7, 89);
			else if ((active0 & 0x8000L) != 0x0L)
				return jjStartNfaWithStates_0(2, 15, 89);
			else if ((active2 & 0x1000000000000L) != 0x0L)
			{
				jjmatchedKind = 176;
				jjmatchedPos = 2;
			}
			else if ((active5 & 0x20L) != 0x0L)
			{
				jjmatchedKind = 325;
				jjmatchedPos = 2;
			}
			else if ((active5 & 0x40000000000L) != 0x0L)
				return jjStartNfaWithStates_0(2, 362, 89);
			else if ((active5 & 0x4000000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(2, 382, 89);
			return jjMoveStringLiteralDfa3_0(active0, 0x0L, active1, 0x0L, active2, 0xe000000000000L, active3, 0x20000000000000L, active4, 0x0L, active5, 0x380000000000c0L, active6, 0x0L, active7, 0x0L, active8, 0xc00000000000000L, active9, 0x208000000000000L, active10, 0x200200000L);
		case 'E':
			if ((active0 & 0x40000L) != 0x0L)
				return jjStartNfaWithStates_0(2, 18, 89);
			else if ((active5 & 0x200000000000L) != 0x0L)
				return jjStartNfaWithStates_0(2, 365, 89);
			return jjMoveStringLiteralDfa3_0(active0, 0x200000800000L, active1, 0x200000000040L, active2, 0x6100100000000000L, active3, 0x110000200000L, active4, 0x0L, active5, 0x3c00800000000000L, active6, 0x3f0000000L, active7, 0xe000008000000000L, active8, 0x0L, active9, 0xe000001000018000L, active10, 0x1f0003L);
		case 'F':
			if ((active6 & 0x400000000000L) != 0x0L)
			{
				jjmatchedKind = 430;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_0(active0, 0x200000000L, active1, 0x0L, active2, 0x7f000L, active3, 0x0L, active4, 0x200000000L, active5, 0x20000000000L, active6, 0x1800000000000L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x38L);
		case 'G':
			if ((active0 & 0x100000000L) != 0x0L)
				return jjStartNfaWithStates_0(2, 32, 89);
			else if ((active4 & 0x2000000L) != 0x0L)
				return jjStartNfaWithStates_0(2, 281, 89);
			return jjMoveStringLiteralDfa3_0(active0, 0x9c00000000L, active1, 0x0L, active2, 0x80000L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x3fe000000000000L, active7, 0x800L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'H':
			return jjMoveStringLiteralDfa3_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x40000010040000L, active6, 0x0L, active7, 0x18000000L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'I':
			if ((active6 & 0x800000L) != 0x0L)
				return jjStartNfaWithStates_0(2, 407, 89);
			return jjMoveStringLiteralDfa3_0(active0, 0x600000000000000L, active1, 0x0L, active2, 0x8000000000000000L, active3, 0xc0000000000000L, active4, 0x800L, active5, 0x80020000000L, active6, 0x1c00000000L, active7, 0x100000000000000L, active8, 0x0L, active9, 0x3007e000000000L, active10, 0x10000004L);
		case 'J':
			return jjMoveStringLiteralDfa3_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x1000000000L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'K':
			return jjMoveStringLiteralDfa3_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x6000000000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x40000000000000L, active10, 0x0L);
		case 'L':
			if ((active0 & 0x400L) != 0x0L)
			{
				jjmatchedKind = 10;
				jjmatchedPos = 2;
			}
			else if ((active8 & 0x1L) != 0x0L)
			{
				jjmatchedKind = 512;
				jjmatchedPos = 2;
			}
			else if ((active10 & 0x20000000L) != 0x0L)
				return jjStartNfaWithStates_0(2, 669, 89);
			return jjMoveStringLiteralDfa3_0(active0, 0x3000000001800L, active1, 0x1fe000L, active2, 0x100000L, active3, 0x200008020a0L, active4, 0x8000000000000000L, active5, 0x4003c0080801L, active6, 0xc00000000000000L, active7, 0x30000007000L, active8, 0x1ffffffffffffeL, active9, 0x0L, active10, 0x1c0L);
		case 'M':
			if ((active9 & 0x40L) != 0x0L)
				return jjStartNfaWithStates_0(2, 582, 89);
			return jjMoveStringLiteralDfa3_0(active0, 0x100L, active1, 0x1000001e00000L, active2, 0x800000000L, active3, 0xc00000000000L, active4, 0x100008000000000L, active5, 0xc00007000L, active6, 0x0L, active7, 0x460000000000000L, active8, 0x0L, active9, 0x2000007e4080L, active10, 0x0L);
		case 'N':
			if ((active5 & 0x2L) != 0x0L)
			{
				jjmatchedKind = 321;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_0(active0, 0x800010000000000L, active1, 0xfffe000000L, active2, 0x70000200000L, active3, 0x100200019000100L, active4, 0x404000000L, active5, 0x100831cL, active6, 0x30000000000L, active7, 0x8040000800000L, active8, 0x0L, active9, 0x180000000800000L, active10, 0x100400000L);
		case 'O':
			return jjMoveStringLiteralDfa3_0(active0, 0xc0010000000L, active1, 0x400000000600L, active2, 0x10008000000000L, active3, 0x2000070a0401800L, active4, 0xff380L, active5, 0x0L, active6, 0x2000000000L, active7, 0x100001e0000000L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'P':
			if ((active3 & 0x1L) != 0x0L)
			{
				jjmatchedKind = 192;
				jjmatchedPos = 2;
			}
			else if ((active4 & 0x800000000000L) != 0x0L)
				return jjStartNfaWithStates_0(2, 303, 89);
			return jjMoveStringLiteralDfa3_0(active0, 0x20000L, active1, 0x0L, active2, 0x400000400000L, active3, 0x403000000000002L, active4, 0x0L, active5, 0x0L, active6, 0x3000000000000000L, active7, 0x0L, active8, 0x0L, active9, 0x400400002000000L, active10, 0x0L);
		case 'Q':
			return jjMoveStringLiteralDfa3_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x80000000000L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'R':
			if ((active3 & 0x4000L) != 0x0L)
			{
				jjmatchedKind = 206;
				jjmatchedPos = 2;
			}
			else if ((active6 & 0x4000L) != 0x0L)
			{
				jjmatchedKind = 398;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_0(active0, 0x4002000180000L, active1, 0x7ffe030000000000L, active2, 0x40000001800000L, active3, 0x38600L, active4, 0x200000008000000L, active5, 0x8000000006000400L, active6, 0x11f80ffL, active7, 0x700200000000L, active8, 0x3020000000000000L, active9, 0x0L, active10, 0x400fe00L);
		case 'S':
			if ((active0 & 0x4L) != 0x0L)
			{
				jjmatchedKind = 2;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_0(active0, 0x78000003000018L, active1, 0x0L, active2, 0x20079e000000L, active3, 0x7800000002000000L, active4, 0x1c00000030000000L, active5, 0x100000L, active6, 0xc000000006000f00L, active7, 0x1800000000007L, active8, 0x0L, active9, 0x800800000000700L, active10, 0x0L);
		case 'T':
			if ((active0 & 0x20000000000L) != 0x0L)
				return jjStartNfaWithStates_0(2, 41, 89);
			else if ((active3 & 0x40000000L) != 0x0L)
				return jjStartNfaWithStates_0(2, 222, 89);
			else if ((active3 & 0x8000000000000000L) != 0x0L)
			{
				jjmatchedKind = 255;
				jjmatchedPos = 2;
			}
			else if ((active5 & 0x8000000L) != 0x0L)
				return jjStartNfaWithStates_0(2, 347, 89);
			else if ((active5 & 0x80000000000000L) != 0x0L)
			{
				jjmatchedKind = 375;
				jjmatchedPos = 2;
			}
			else if ((active7 & 0x2000000000000L) != 0x0L)
			{
				jjmatchedKind = 497;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_0(active0, 0x1801040e0002220L, active1, 0x0L, active2, 0x2000001fL, active3, 0x20000005cL, active4, 0x201f00004000001fL, active5, 0x30300c000030000L, active6, 0x3000L, active7, 0x40000000003f8L, active8, 0x0L, active9, 0x0L, active10, 0x3800000L);
		case 'U':
			return jjMoveStringLiteralDfa3_0(active0, 0x0L, active1, 0x40000000000L, active2, 0x20001000000000L, active3, 0xc0000040000L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x800000000078000L, active8, 0x0L, active9, 0x180000000000L, active10, 0x0L);
		case 'V':
			return jjMoveStringLiteralDfa3_0(active0, 0x0L, active1, 0x180000000000L, active2, 0x0L, active3, 0x8000000000L, active4, 0x800000420L, active5, 0x0L, active6, 0x0L, active7, 0x1000400L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'W':
			if ((active2 & 0x2000000000L) != 0x0L)
				return jjStartNfaWithStates_0(2, 165, 89);
			else if ((active5 & 0x200000L) != 0x0L)
				return jjStartNfaWithStates_0(2, 341, 89);
			else if ((active7 & 0x80000L) != 0x0L)
			{
				jjmatchedKind = 467;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_0(active0, 0x4000L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x200000000000L, active5, 0x0L, active6, 0x8000000L, active7, 0x700000L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'X':
			if ((active4 & 0x20000000000000L) != 0x0L)
			{
				jjmatchedKind = 309;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x40000000000000L, active5, 0x400000L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'Y':
			if ((active0 & 0x10000L) != 0x0L)
				return jjStartNfaWithStates_0(2, 16, 89);
			else if ((active2 & 0x20L) != 0x0L)
			{
				jjmatchedKind = 133;
				jjmatchedPos = 2;
			}
			else if ((active2 & 0x4000000000L) != 0x0L)
				return jjStartNfaWithStates_0(2, 166, 89);
			else if ((active4 & 0x200000L) != 0x0L)
			{
				jjmatchedKind = 277;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_0(active0, 0x4000000L, active1, 0x0L, active2, 0x40L, active3, 0x0L, active4, 0xc00000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x4000000000000000L, active9, 0x0L, active10, 0x0L);
		case 'Z':
			return jjMoveStringLiteralDfa3_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x80000000000000L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_0(1, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_0(1, old0, old1, old2, old3, old4, old5, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_0(2, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
			return 3;
		}
		switch(curChar)
		{
		case '-':
			return jjMoveStringLiteralDfa4_0(active0, 0x0L, active1, 0x0L, active2, 0x2000000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case '1':
			return jjMoveStringLiteralDfa4_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x10L);
		case '3':
			return jjMoveStringLiteralDfa4_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x20L);
		case '8':
			if ((active10 & 0x8L) != 0x0L)
				return jjStartNfaWithStates_0(3, 643, 89);
			break;
		case 'A':
			if ((active2 & 0x1L) != 0x0L)
			{
				jjmatchedKind = 128;
				jjmatchedPos = 3;
			}
			else if ((active4 & 0x400L) != 0x0L)
				return jjStartNfaWithStates_0(3, 266, 89);
			return jjMoveStringLiteralDfa4_0(active0, 0x180210000184000L, active1, 0x380000000000L, active2, 0xa0070880003202L, active3, 0x900L, active4, 0x1e0000000000L, active5, 0x8000000000040000L, active6, 0x40000000000003fL, active7, 0x0L, active8, 0x0L, active9, 0x280001000000000L, active10, 0x0L);
		case 'B':
			if ((active0 & 0x40000000000L) != 0x0L)
				return jjStartNfaWithStates_0(3, 42, 89);
			else if ((active1 & 0x200L) != 0x0L)
				return jjStartNfaWithStates_0(3, 73, 89);
			return jjMoveStringLiteralDfa4_0(active0, 0x0L, active1, 0x0L, active2, 0x1000000000L, active3, 0x80000000L, active4, 0x100000000000000L, active5, 0x400000000L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x200000000000L, active10, 0x800L);
		case 'C':
			if ((active2 & 0x2000000L) != 0x0L)
			{
				jjmatchedKind = 153;
				jjmatchedPos = 3;
			}
			else if ((active2 & 0x2000000000000000L) != 0x0L)
			{
				jjmatchedKind = 189;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_0(active0, 0x18000000000000L, active1, 0x40L, active2, 0x401000011c000000L, active3, 0x1080040L, active4, 0x1f000000000000L, active5, 0x0L, active6, 0x2070278100L, active7, 0xf000000000000000L, active8, 0x8000000000000000L, active9, 0x800000000020L, active10, 0x1000L);
		case 'D':
			if ((active3 & 0x20000000000L) != 0x0L)
				return jjStartNfaWithStates_0(3, 233, 89);
			else if ((active4 & 0x80000000L) != 0x0L)
			{
				jjmatchedKind = 287;
				jjmatchedPos = 3;
			}
			else if ((active6 & 0x40000000000L) != 0x0L)
			{
				jjmatchedKind = 426;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L, active1, 0xe000000L, active2, 0x0L, active3, 0x0L, active4, 0x100000080L, active5, 0x0L, active6, 0x80000000000L, active7, 0x0L, active8, 0xc00000000000000L, active9, 0x0L, active10, 0x400000L);
		case 'E':
			if ((active0 & 0x20000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(3, 53, 89);
			else if ((active1 & 0x800000000000L) != 0x0L)
				return jjStartNfaWithStates_0(3, 111, 89);
			else if ((active2 & 0x4L) != 0x0L)
			{
				jjmatchedKind = 130;
				jjmatchedPos = 3;
			}
			else if ((active2 & 0x200000000000L) != 0x0L)
				return jjStartNfaWithStates_0(3, 173, 89);
			else if ((active3 & 0x200000L) != 0x0L)
				return jjStartNfaWithStates_0(3, 213, 89);
			else if ((active4 & 0x2000000000L) != 0x0L)
			{
				jjmatchedKind = 293;
				jjmatchedPos = 3;
			}
			else if ((active5 & 0x400L) != 0x0L)
				return jjStartNfaWithStates_0(3, 330, 89);
			else if ((active5 & 0x2000L) != 0x0L)
			{
				jjmatchedKind = 333;
				jjmatchedPos = 3;
			}
			else if ((active5 & 0x1000000L) != 0x0L)
				return jjStartNfaWithStates_0(3, 344, 89);
			else if ((active7 & 0x1000L) != 0x0L)
				return jjStartNfaWithStates_0(3, 460, 89);
			else if ((active7 & 0x80000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(3, 503, 89);
			else if ((active7 & 0x400000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(3, 506, 89);
			else if ((active9 & 0x20000L) != 0x0L)
			{
				jjmatchedKind = 593;
				jjmatchedPos = 3;
			}
			else if ((active9 & 0x80000000000L) != 0x0L)
				return jjStartNfaWithStates_0(3, 619, 89);
			else if ((active9 & 0x400000000000L) != 0x0L)
				return jjStartNfaWithStates_0(3, 622, 89);
			else if ((active10 & 0x100000000L) != 0x0L)
				return jjStartNfaWithStates_0(3, 672, 89);
			return jjMoveStringLiteralDfa4_0(active0, 0x1002208L, active1, 0x1000000000000L, active2, 0x60000002090c018L, active3, 0x1900c0001801000cL, active4, 0x20484100000fL, active5, 0x15800d800004000L, active6, 0x5801800008000000L, active7, 0x10019000000L, active8, 0x1000000000000002L, active9, 0xd080000007c0000L, active10, 0x0L);
		case 'F':
			if ((active7 & 0x20000000000L) != 0x0L)
				return jjStartNfaWithStates_0(3, 489, 89);
			break;
		case 'G':
			return jjMoveStringLiteralDfa4_0(active0, 0x0L, active1, 0x0L, active2, 0x40000000L, active3, 0x0L, active4, 0x20000040c000000L, active5, 0x0L, active6, 0x10000000000L, active7, 0x0L, active8, 0x0L, active9, 0x100001e000000000L, active10, 0x0L);
		case 'H':
			if ((active0 & 0x100000000000L) != 0x0L)
				return jjStartNfaWithStates_0(3, 44, 89);
			else if ((active2 & 0x80000000000L) != 0x0L)
				return jjStartNfaWithStates_0(3, 171, 89);
			else if ((active6 & 0x1000L) != 0x0L)
				return jjStartNfaWithStates_0(3, 396, 89);
			else if ((active10 & 0x800000L) != 0x0L)
			{
				jjmatchedKind = 663;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_0(active0, 0x80000000L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x2000000000000000L, active5, 0x0L, active6, 0x0L, active7, 0x800L, active8, 0x0L, active9, 0x0L, active10, 0x3000000L);
		case 'I':
			return jjMoveStringLiteralDfa4_0(active0, 0x1000009c02000120L, active1, 0x0L, active2, 0x1070400L, active3, 0x20008002000000L, active4, 0x8000000000L, active5, 0x23000000010040L, active6, 0x6080000L, active7, 0x20100000000000L, active8, 0x0L, active9, 0x4000000L, active10, 0x0L);
		case 'K':
			if ((active6 & 0x20000000000L) != 0x0L)
				return jjStartNfaWithStates_0(3, 425, 89);
			else if ((active7 & 0x8000000000L) != 0x0L)
				return jjStartNfaWithStates_0(3, 487, 89);
			else if ((active10 & 0x20000L) != 0x0L)
				return jjStartNfaWithStates_0(3, 657, 89);
			else if ((active10 & 0x4000000L) != 0x0L)
				return jjStartNfaWithStates_0(3, 666, 89);
			break;
		case 'L':
			if ((active0 & 0x1000000000000L) != 0x0L)
			{
				jjmatchedKind = 48;
				jjmatchedPos = 3;
			}
			else if ((active0 & 0x200000000000000L) != 0x0L)
			{
				jjmatchedKind = 57;
				jjmatchedPos = 3;
			}
			else if ((active3 & 0x800000L) != 0x0L)
				return jjStartNfaWithStates_0(3, 215, 89);
			else if ((active5 & 0x40000000L) != 0x0L)
			{
				jjmatchedKind = 350;
				jjmatchedPos = 3;
			}
			else if ((active6 & 0x100000000000L) != 0x0L)
				return jjStartNfaWithStates_0(3, 428, 89);
			return jjMoveStringLiteralDfa4_0(active0, 0x402080000020000L, active1, 0x800000000007e800L, active2, 0x1800000000000880L, active3, 0x9000000002002L, active4, 0x8000000000000200L, active5, 0x3a0000001L, active6, 0x2000004000000000L, active7, 0x200000006006000L, active8, 0x4000000000000000L, active9, 0x3800L, active10, 0x0L);
		case 'M':
			if ((active3 & 0x400000L) != 0x0L)
				return jjStartNfaWithStates_0(3, 214, 89);
			else if ((active9 & 0x20000000000L) != 0x0L)
			{
				jjmatchedKind = 617;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_0(active0, 0x14000000L, active1, 0x1e00000L, active2, 0x100000000000L, active3, 0x20108000L, active4, 0x0L, active5, 0x6000000L, active6, 0x400100000L, active7, 0x0L, active8, 0x0L, active9, 0x40000000081L, active10, 0x0L);
		case 'N':
			if ((active4 & 0x800L) != 0x0L)
				return jjStartNfaWithStates_0(3, 267, 89);
			else if ((active4 & 0x1000L) != 0x0L)
			{
				jjmatchedKind = 268;
				jjmatchedPos = 3;
			}
			else if ((active5 & 0x800000000000L) != 0x0L)
				return jjStartNfaWithStates_0(3, 367, 89);
			else if ((active6 & 0x400000L) != 0x0L)
				return jjStartNfaWithStates_0(3, 406, 89);
			else if ((active9 & 0x8000L) != 0x0L)
				return jjStartNfaWithStates_0(3, 591, 89);
			else if ((active10 & 0x40000L) != 0x0L)
			{
				jjmatchedKind = 658;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_0(active0, 0x2000800000L, active1, 0x40070000000L, active2, 0x0L, active3, 0x100c00040000L, active4, 0xfe000L, active5, 0x0L, active6, 0x0L, active7, 0x800000L, active8, 0x0L, active9, 0x40100ff8000000L, active10, 0x80004L);
		case 'O':
			if ((active3 & 0x200000000L) != 0x0L)
				return jjStartNfaWithStates_0(3, 225, 89);
			else if ((active4 & 0x10L) != 0x0L)
				return jjStartNfaWithStates_0(3, 260, 89);
			return jjMoveStringLiteralDfa4_0(active0, 0x200001810L, active1, 0x1000L, active2, 0x40800000000000L, active3, 0x2200000001000L, active4, 0x20L, active5, 0x88000L, active6, 0x800000000L, active7, 0x1a00000400L, active8, 0x0L, active9, 0x17000000000000L, active10, 0x0L);
		case 'P':
			if ((active2 & 0x8000000000L) != 0x0L)
				return jjStartNfaWithStates_0(3, 167, 89);
			else if ((active7 & 0x100000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(3, 504, 89);
			return jjMoveStringLiteralDfa4_0(active0, 0x0L, active1, 0x0L, active2, 0x200000000L, active3, 0x0L, active4, 0x0L, active5, 0x200000000001000L, active6, 0x8000000080000000L, active7, 0x400001e0000000L, active8, 0x0L, active9, 0x4000L, active10, 0x8000000L);
		case 'Q':
			return jjMoveStringLiteralDfa4_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x20000000000000L, active10, 0x0L);
		case 'R':
			if ((active0 & 0x2000000000000000L) != 0x0L)
			{
				jjmatchedKind = 61;
				jjmatchedPos = 3;
			}
			else if ((active1 & 0x10000000000L) != 0x0L)
			{
				jjmatchedKind = 104;
				jjmatchedPos = 3;
			}
			else if ((active3 & 0x40000000000L) != 0x0L)
			{
				jjmatchedKind = 234;
				jjmatchedPos = 3;
			}
			else if ((active5 & 0x400000000000000L) != 0x0L)
			{
				jjmatchedKind = 378;
				jjmatchedPos = 3;
			}
			else if ((active9 & 0x2000000000000000L) != 0x0L)
			{
				jjmatchedKind = 637;
				jjmatchedPos = 3;
			}
			else if ((active10 & 0x40000000L) != 0x0L)
			{
				jjmatchedKind = 670;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_0(active0, 0xc000000060000000L, active1, 0x1ffe02000000003fL, active2, 0x100000000080000L, active3, 0x10090000000010L, active4, 0x4000001000000000L, active5, 0x3800000000000000L, active6, 0x3fe008000000000L, active7, 0x800000400000000L, active8, 0x40000000000000L, active9, 0xc000000000000000L, active10, 0x80100003L);
		case 'S':
			if ((active2 & 0x40L) != 0x0L)
				return jjStartNfaWithStates_0(3, 134, 89);
			else if ((active7 & 0x400000L) != 0x0L)
				return jjStartNfaWithStates_0(3, 470, 89);
			else if ((active7 & 0x4000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(3, 498, 89);
			else if ((active9 & 0x10000L) != 0x0L)
				return jjStartNfaWithStates_0(3, 592, 89);
			return jjMoveStringLiteralDfa4_0(active0, 0x0L, active1, 0x6000401f80000580L, active2, 0x8000000000200000L, active3, 0x620L, active4, 0x1c80000000000000L, active5, 0x20000000000L, active6, 0x100000600L, active7, 0x1840000000000L, active8, 0x4L, active9, 0x1eL, active10, 0xc000L);
		case 'T':
			if ((active0 & 0x40000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(3, 54, 89);
			else if ((active4 & 0x10000000L) != 0x0L)
			{
				jjmatchedKind = 284;
				jjmatchedPos = 3;
			}
			else if ((active4 & 0x200000000L) != 0x0L)
				return jjStartNfaWithStates_0(3, 289, 89);
			else if ((active5 & 0x400000L) != 0x0L)
				return jjStartNfaWithStates_0(3, 342, 89);
			else if ((active5 & 0x80000000000L) != 0x0L)
				return jjStartNfaWithStates_0(3, 363, 89);
			else if ((active6 & 0x800L) != 0x0L)
				return jjStartNfaWithStates_0(3, 395, 89);
			else if ((active8 & 0x20000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(3, 565, 89);
			return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L, active1, 0x6000000000L, active2, 0x400400400000L, active3, 0x60c0000000020080L, active4, 0x20000000L, active5, 0x100b00L, active6, 0x10020c0L, active7, 0x2000078003L, active8, 0x380000000000000L, active9, 0x700L, active10, 0x10200000L);
		case 'U':
			return jjMoveStringLiteralDfa4_0(active0, 0x0L, active1, 0x180000L, active2, 0x0L, active3, 0x600007000000000L, active4, 0x0L, active5, 0x200002008cL, active6, 0x200000000000L, active7, 0x80840000003fcL, active8, 0x2000000000000000L, active9, 0x0L, active10, 0x2000001c0L);
		case 'V':
			if ((active6 & 0x200000000L) != 0x0L)
				return jjStartNfaWithStates_0(3, 417, 89);
			return jjMoveStringLiteralDfa4_0(active0, 0x0L, active1, 0x8000000000L, active2, 0x0L, active3, 0x0L, active4, 0x40000000000000L, active5, 0x10L, active6, 0x1000000000L, active7, 0x600000000000L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'W':
			if ((active7 & 0x10000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(3, 500, 89);
			else if ((active10 & 0x10000L) != 0x0L)
				return jjStartNfaWithStates_0(3, 656, 89);
			return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x8L, active9, 0x0L, active10, 0x0L);
		case 'Y':
			if ((active5 & 0x400000000000L) != 0x0L)
				return jjStartNfaWithStates_0(3, 366, 89);
			return jjMoveStringLiteralDfa4_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x100L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x800000L, active10, 0x2000L);
		case '_':
			return jjMoveStringLiteralDfa4_0(active0, 0x0L, active1, 0x0L, active2, 0xc000000000000L, active3, 0x0L, active4, 0xc00000L, active5, 0x10000000L, active6, 0x0L, active7, 0x300000L, active8, 0x1ffffffffffff0L, active9, 0x2000000L, active10, 0x600L);
		default :
			break;
		}
		return jjStartNfa_0(2, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_0(2, old0, old1, old2, old3, old4, old5, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_0(3, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
			return 4;
		}
		switch(curChar)
		{
		case '2':
			if ((active10 & 0x20L) != 0x0L)
				return jjStartNfaWithStates_0(4, 645, 89);
			break;
		case '6':
			if ((active10 & 0x10L) != 0x0L)
				return jjStartNfaWithStates_0(4, 644, 89);
			break;
		case 'A':
			return jjMoveStringLiteralDfa5_0(active0, 0x8018000000000000L, active1, 0x200063e03fL, active2, 0x200000800L, active3, 0x6000010080008012L, active4, 0x1c40001000000200L, active5, 0x86000010L, active6, 0x3800000480000100L, active7, 0x100002000001L, active8, 0x1000000000000008L, active9, 0x800000000000L, active10, 0x0L);
		case 'B':
			if ((active5 & 0x80000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 339, 89);
			return jjMoveStringLiteralDfa5_0(active0, 0x0L, active1, 0x0L, active2, 0x2L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x2000L, active8, 0x1f0L, active9, 0x0L, active10, 0x0L);
		case 'C':
			return jjMoveStringLiteralDfa5_0(active0, 0x800L, active1, 0x0L, active2, 0x0L, active3, 0x20000000000000L, active4, 0x0L, active5, 0x1000000000L, active6, 0x0L, active7, 0x800010400100000L, active8, 0x2000000000000600L, active9, 0x100000000000L, active10, 0x0L);
		case 'D':
			if ((active3 & 0x40000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 210, 89);
			return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L, active1, 0x0L, active2, 0x800000000200L, active3, 0xc00000000000L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x3800L, active9, 0x0L, active10, 0x0L);
		case 'E':
			if ((active1 & 0x400L) != 0x0L)
				return jjStartNfaWithStates_0(4, 74, 89);
			else if ((active1 & 0x8000000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 127, 89);
			else if ((active3 & 0x20L) != 0x0L)
				return jjStartNfaWithStates_0(4, 197, 89);
			else if ((active4 & 0x8000000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 283, 89);
			else if ((active4 & 0x200000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 313, 89);
			else if ((active5 & 0x20000000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 349, 89);
			else if ((active6 & 0x10000000000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 424, 89);
			else if ((active7 & 0x4000000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 474, 89);
			else if ((active7 & 0x20000000L) != 0x0L)
			{
				jjmatchedKind = 477;
				jjmatchedPos = 4;
			}
			else if ((active7 & 0x1000000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 508, 89);
			else if ((active8 & 0x80000000000000L) != 0x0L)
			{
				jjmatchedKind = 567;
				jjmatchedPos = 4;
			}
			else if ((active8 & 0x4000000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 574, 89);
			else if ((active9 & 0x800L) != 0x0L)
			{
				jjmatchedKind = 587;
				jjmatchedPos = 4;
			}
			else if ((active9 & 0x1000000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 636, 89);
			else if ((active10 & 0x40L) != 0x0L)
			{
				jjmatchedKind = 646;
				jjmatchedPos = 4;
			}
			else if ((active10 & 0x100000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 660, 89);
			else if ((active10 & 0x10000000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 668, 89);
			return jjMoveStringLiteralDfa5_0(active0, 0x2084000000000L, active1, 0x1ffe028070040800L, active2, 0x2100000280000L, active3, 0x11000020100080L, active4, 0x100000000000100L, active5, 0x20400000001L, active6, 0x800000213007a000L, active7, 0x6801c0000000L, active8, 0xd00000000000000L, active9, 0x37a2L, active10, 0x80180L);
		case 'F':
			if ((active2 & 0x800000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 151, 89);
			return jjMoveStringLiteralDfa5_0(active0, 0x0L, active1, 0x0L, active2, 0x4000000000000L, active3, 0x0L, active4, 0x0L, active5, 0x40L, active6, 0x0L, active7, 0x0L, active8, 0x4000L, active9, 0x0L, active10, 0x0L);
		case 'G':
			if ((active10 & 0x4L) != 0x0L)
				return jjStartNfaWithStates_0(4, 642, 89);
			return jjMoveStringLiteralDfa5_0(active0, 0x2000000L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x1L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x1e000000000L, active10, 0x0L);
		case 'H':
			if ((active2 & 0x400000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 150, 89);
			else if ((active2 & 0x10000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 180, 89);
			else if ((active3 & 0x40L) != 0x0L)
				return jjStartNfaWithStates_0(4, 198, 89);
			else if ((active4 & 0x1000000000000L) != 0x0L)
			{
				jjmatchedKind = 304;
				jjmatchedPos = 4;
			}
			else if ((active5 & 0x100L) != 0x0L)
			{
				jjmatchedKind = 328;
				jjmatchedPos = 4;
			}
			return jjMoveStringLiteralDfa5_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x1e000000000000L, active5, 0x200L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x201000L);
		case 'I':
			return jjMoveStringLiteralDfa5_0(active0, 0x404000070000000L, active1, 0x400f800000L, active2, 0xc00000000L, active3, 0xc0000000010000L, active4, 0x8000000100000000L, active5, 0x100100800L, active6, 0x50412002c0L, active7, 0xe001842000878000L, active8, 0x20000001fff8000L, active9, 0x800000L, active10, 0x100e800L);
		case 'K':
			if ((active1 & 0x40L) != 0x0L)
				return jjStartNfaWithStates_0(4, 70, 89);
			return jjMoveStringLiteralDfa5_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x20L, active5, 0x0L, active6, 0x0L, active7, 0x400L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'L':
			if ((active1 & 0x1000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 76, 89);
			else if ((active3 & 0x100L) != 0x0L)
				return jjStartNfaWithStates_0(4, 200, 89);
			else if ((active4 & 0x1000000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 280, 89);
			else if ((active4 & 0x800000000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 291, 89);
			else if ((active4 & 0x20000000000L) != 0x0L)
			{
				jjmatchedKind = 297;
				jjmatchedPos = 4;
			}
			return jjMoveStringLiteralDfa5_0(active0, 0x180000000000010L, active1, 0x0L, active2, 0x20001080000080L, active3, 0x0L, active4, 0xc0000000000L, active5, 0x1800000000000080L, active6, 0x0L, active7, 0x260000200000004L, active8, 0x80000000e0000000L, active9, 0x200006000000L, active10, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa5_0(active0, 0x4000000L, active1, 0x180000L, active2, 0x70000000400L, active3, 0x0L, active4, 0x400000L, active5, 0x8000000000000000L, active6, 0x3fL, active7, 0x18000000L, active8, 0x0L, active9, 0x82000000000000L, active10, 0x0L);
		case 'N':
			if ((active0 & 0x100L) != 0x0L)
				return jjStartNfaWithStates_0(4, 8, 89);
			else if ((active0 & 0x400000000L) != 0x0L)
			{
				jjmatchedKind = 34;
				jjmatchedPos = 4;
			}
			else if ((active0 & 0x1000000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 60, 89);
			else if ((active9 & 0x10000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 628, 89);
			return jjMoveStringLiteralDfa5_0(active0, 0x9800000008L, active1, 0x0L, active2, 0x40070000L, active3, 0x800008000000004L, active4, 0x0L, active5, 0x20000000000000L, active6, 0x0L, active7, 0x1800200000L, active8, 0xf00000000L, active9, 0x4000000000000L, active10, 0x0L);
		case 'O':
			return jjMoveStringLiteralDfa5_0(active0, 0x2080000020L, active1, 0x6000000000000000L, active2, 0x100000000L, active3, 0x2002000L, active4, 0x6000000000000080L, active5, 0x3000000010000L, active6, 0x80000L, active7, 0x0L, active8, 0x0L, active9, 0x40000000004000L, active10, 0x2400000L);
		case 'P':
			if ((active3 & 0x1000000000L) != 0x0L)
			{
				jjmatchedKind = 228;
				jjmatchedPos = 4;
			}
			else if ((active10 & 0x200000000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 673, 89);
			return jjMoveStringLiteralDfa5_0(active0, 0x0L, active1, 0x0L, active2, 0x688000000000000L, active3, 0x6000000000L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x1000000L, active8, 0x0L, active9, 0x0L, active10, 0x8000200L);
		case 'R':
			if ((active0 & 0x200L) != 0x0L)
				return jjStartNfaWithStates_0(4, 9, 89);
			else if ((active0 & 0x2000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 13, 89);
			else if ((active2 & 0x40000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 182, 89);
			else if ((active3 & 0x1000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 204, 89);
			else if ((active3 & 0x100000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 248, 89);
			else if ((active4 & 0x200000000000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 301, 89);
			else if ((active5 & 0x40000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 338, 89);
			else if ((active5 & 0x8000000000000L) != 0x0L)
			{
				jjmatchedKind = 371;
				jjmatchedPos = 4;
			}
			else if ((active5 & 0x100000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 376, 89);
			else if ((active6 & 0x8000000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 411, 89);
			else if ((active6 & 0x800000000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 419, 89);
			else if ((active9 & 0x8000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 627, 89);
			else if ((active9 & 0x400000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 634, 89);
			return jjMoveStringLiteralDfa5_0(active0, 0x10201000000L, active1, 0x180000000000L, active2, 0x3c00c000L, active3, 0x1002200018020008L, active4, 0x4000000eL, active5, 0x2050002800020000L, active6, 0x1a00000000000L, active7, 0x40000003faL, active8, 0x1000000000L, active9, 0x800000000000000L, active10, 0x0L);
		case 'S':
			if ((active1 & 0x400000000000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 110, 89);
			else if ((active3 & 0x80000000000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 235, 89);
			else if ((active5 & 0x1000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 332, 89);
			else if ((active5 & 0x4000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 334, 89);
			else if ((active5 & 0x200000000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 353, 89);
			else if ((active6 & 0x80000000000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 427, 89);
			else if ((active7 & 0x8000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 499, 89);
			else if ((active10 & 0x80000000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 671, 89);
			return jjMoveStringLiteralDfa5_0(active0, 0x800000L, active1, 0x180L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x8000L, active6, 0x0L, active7, 0x0L, active8, 0x2000000000L, active9, 0x100000ff81c0000L, active10, 0x400L);
		case 'T':
			if ((active1 & 0x40000000000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 106, 89);
			else if ((active3 & 0x200L) != 0x0L)
			{
				jjmatchedKind = 201;
				jjmatchedPos = 4;
			}
			else if ((active3 & 0x800L) != 0x0L)
				return jjStartNfaWithStates_0(4, 203, 89);
			else if ((active3 & 0x400000000L) != 0x0L)
			{
				jjmatchedKind = 226;
				jjmatchedPos = 4;
			}
			else if ((active3 & 0x200000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 249, 89);
			else if ((active3 & 0x400000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 250, 89);
			else if ((active4 & 0x8000000000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 295, 89);
			else if ((active6 & 0x4000000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 446, 89);
			else if ((active7 & 0x800L) != 0x0L)
				return jjStartNfaWithStates_0(4, 459, 89);
			else if ((active8 & 0x40000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 566, 89);
			else if ((active9 & 0x1000000000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 612, 89);
			return jjMoveStringLiteralDfa5_0(active0, 0x0L, active1, 0x201f80000000L, active2, 0x8000000000100018L, active3, 0x100801000400L, active4, 0x100400800000L, active5, 0xc00000000cL, active6, 0x400008006000400L, active7, 0x0L, active8, 0x7ffc000000004L, active9, 0x20000000000001cL, active10, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0x0L, active2, 0x5800000000003000L, active3, 0x8000000000000L, active4, 0x80000004000000L, active5, 0x200000000000000L, active6, 0x100000L, active7, 0x4000L, active8, 0x0L, active9, 0x21000000000001L, active10, 0x0L);
		case 'V':
			return jjMoveStringLiteralDfa5_0(active0, 0x0L, active1, 0x0L, active2, 0x1000000L, active3, 0x0L, active4, 0x0L, active5, 0x10000000L, active6, 0x0L, active7, 0x0L, active8, 0x18000000000000L, active9, 0x0L, active10, 0x0L);
		case 'W':
			if ((active0 & 0x1000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 12, 89);
			break;
		case 'X':
			return jjMoveStringLiteralDfa5_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x2L, active9, 0x0L, active10, 0x0L);
		case 'Y':
			if ((active0 & 0x20000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 17, 89);
			else if ((active0 & 0x80000L) != 0x0L)
			{
				jjmatchedKind = 19;
				jjmatchedPos = 4;
			}
			else if ((active2 & 0x400000000000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 174, 89);
			else if ((active2 & 0x100000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(4, 184, 89);
			return jjMoveStringLiteralDfa5_0(active0, 0x104000L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'Z':
			return jjMoveStringLiteralDfa5_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x600000L, active10, 0x0L);
		case '_':
			return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L, active1, 0x1000000000000L, active2, 0x0L, active3, 0x80000L, active4, 0x40200fe000L, active5, 0x0L, active6, 0x3fe000000000000L, active7, 0x0L, active8, 0x0L, active9, 0xc000040000000000L, active10, 0x3L);
		default :
			break;
		}
		return jjStartNfa_0(3, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_0(3, old0, old1, old2, old3, old4, old5, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_0(4, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
			return 5;
		}
		switch(curChar)
		{
		case 'A':
			if ((active7 & 0x8000000L) != 0x0L)
			{
				jjmatchedKind = 475;
				jjmatchedPos = 5;
			}
			return jjMoveStringLiteralDfa6_0(active0, 0x80000000800L, active1, 0x0L, active2, 0x8000000000402L, active3, 0xe0000018020000L, active4, 0x44006100L, active5, 0x1820000010020000L, active6, 0x6000000000040L, active7, 0x20000010002000L, active8, 0x8018000000000804L, active9, 0x140078000000L, active10, 0x1400L);
		case 'B':
			return jjMoveStringLiteralDfa6_0(active0, 0x60000000L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x80000000L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'C':
			if ((active0 & 0x10000000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 28, 89);
			else if ((active6 & 0x4000000000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 422, 89);
			else if ((active8 & 0x200000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 569, 89);
			return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000000L, active1, 0x7004003fL, active2, 0x0L, active3, 0x10L, active4, 0x0L, active5, 0x0L, active6, 0xa008000000000000L, active7, 0x0L, active8, 0x300000002L, active9, 0x0L, active10, 0x0L);
		case 'D':
			if ((active0 & 0x2000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 49, 89);
			else if ((active3 & 0x4L) != 0x0L)
				return jjStartNfaWithStates_0(5, 194, 89);
			else if ((active4 & 0x2000000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 317, 89);
			else if ((active6 & 0x80000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 403, 89);
			else if ((active7 & 0x800000000L) != 0x0L)
			{
				jjmatchedKind = 483;
				jjmatchedPos = 5;
			}
			return jjMoveStringLiteralDfa6_0(active0, 0x18000000000000L, active1, 0x1000000000000L, active2, 0x1800000000000000L, active3, 0x8000000000000L, active4, 0x0L, active5, 0x0L, active6, 0x2030000000L, active7, 0x1000000000L, active8, 0x0L, active9, 0xc004000000000000L, active10, 0x3L);
		case 'E':
			if ((active0 & 0x200000000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 33, 89);
			else if ((active1 & 0x200000000000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 109, 89);
			else if ((active2 & 0x200L) != 0x0L)
				return jjStartNfaWithStates_0(5, 137, 89);
			else if ((active2 & 0x10000L) != 0x0L)
			{
				jjmatchedKind = 144;
				jjmatchedPos = 5;
			}
			else if ((active2 & 0x80000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 147, 89);
			else if ((active2 & 0x100000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 148, 89);
			else if ((active2 & 0x1000000000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 164, 89);
			else if ((active2 & 0x80000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 183, 89);
			else if ((active3 & 0x200000000000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 237, 89);
			else if ((active5 & 0x4L) != 0x0L)
			{
				jjmatchedKind = 322;
				jjmatchedPos = 5;
			}
			else if ((active5 & 0x80L) != 0x0L)
				return jjStartNfaWithStates_0(5, 327, 89);
			else if ((active7 & 0x400L) != 0x0L)
				return jjStartNfaWithStates_0(5, 458, 89);
			else if ((active7 & 0x40000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 502, 89);
			else if ((active7 & 0x800000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 507, 89);
			else if ((active9 & 0x200000000000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 621, 89);
			else if ((active9 & 0x20000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 629, 89);
			else if ((active9 & 0x200000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 633, 89);
			return jjMoveStringLiteralDfa6_0(active0, 0x4004000000L, active1, 0x0L, active2, 0x1060000L, active3, 0x800000000L, active4, 0x6000000408021L, active5, 0x8000000000008008L, active6, 0x180800000003fL, active7, 0x0L, active8, 0x1000001000L, active9, 0x8001e002000020L, active10, 0x8000000L);
		case 'F':
			if ((active5 & 0x100000000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 352, 89);
			return jjMoveStringLiteralDfa6_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0xe000000000000000L, active8, 0x0L, active9, 0x180000000L, active10, 0x0L);
		case 'G':
			if ((active3 & 0x8000000000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 231, 89);
			return jjMoveStringLiteralDfa6_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x10000L, active4, 0x1c00000000000000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'H':
			if ((active4 & 0x400000000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 290, 89);
			else if ((active7 & 0x400000000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 482, 89);
			return jjMoveStringLiteralDfa6_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x400L, active7, 0x0L, active8, 0x200L, active9, 0x0L, active10, 0x0L);
		case 'I':
			return jjMoveStringLiteralDfa6_0(active0, 0x800000L, active1, 0x2000000080L, active2, 0x87001c000018L, active3, 0xd02001000002L, active4, 0x0L, active5, 0x2010000800000040L, active6, 0x410000006000000L, active7, 0x200004000000002L, active8, 0x1c000000070L, active9, 0x4000004L, active10, 0x0L);
		case 'L':
			if ((active3 & 0x80000000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 223, 89);
			else if ((active6 & 0x100L) != 0x0L)
				return jjStartNfaWithStates_0(5, 392, 89);
			else if ((active7 & 0x200000000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 481, 89);
			return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L, active1, 0x0L, active2, 0x80003000L, active3, 0x0L, active4, 0x40000000000000L, active5, 0x6000010L, active6, 0x1000000000L, active7, 0x100000000000L, active8, 0x4480L, active9, 0xe00000001L, active10, 0x0L);
		case 'M':
			if ((active8 & 0x1000000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 572, 89);
			else if ((active9 & 0x100L) != 0x0L)
			{
				jjmatchedKind = 584;
				jjmatchedPos = 5;
			}
			return jjMoveStringLiteralDfa6_0(active0, 0x0L, active1, 0x0L, active2, 0x20000000L, active3, 0x11000000000000L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x100002000000000L, active9, 0x2000000000600L, active10, 0x0L);
		case 'N':
			if ((active0 & 0x20L) != 0x0L)
				return jjStartNfaWithStates_0(5, 5, 89);
			else if ((active1 & 0x80000L) != 0x0L)
			{
				jjmatchedKind = 83;
				jjmatchedPos = 5;
			}
			else if ((active2 & 0x800000000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 163, 89);
			else if ((active3 & 0x2000000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 217, 89);
			else if ((active5 & 0x1000000000000L) != 0x0L)
			{
				jjmatchedKind = 368;
				jjmatchedPos = 5;
			}
			else if ((active7 & 0x8L) != 0x0L)
			{
				jjmatchedKind = 451;
				jjmatchedPos = 5;
			}
			else if ((active10 & 0x1000000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 664, 89);
			return jjMoveStringLiteralDfa6_0(active0, 0x404000002000000L, active1, 0x1ffe004000700000L, active2, 0x100500000000L, active3, 0x6000000000000008L, active4, 0x100000000L, active5, 0x2000000110001L, active6, 0x278200L, active7, 0x800008783f0L, active8, 0x1fff8000L, active9, 0x1000000800000L, active10, 0x2800L);
		case 'O':
			return jjMoveStringLiteralDfa6_0(active0, 0x180000000000000L, active1, 0x0L, active2, 0x40000080L, active3, 0x0L, active4, 0x100000030000L, active5, 0x0L, active6, 0x1000000L, active7, 0x1802001100000L, active8, 0xe0002100L, active9, 0x600000L, active10, 0xc200L);
		case 'P':
			if ((active7 & 0x4000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 462, 89);
			return jjMoveStringLiteralDfa6_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x800000000000L, active10, 0x0L);
		case 'Q':
			return jjMoveStringLiteralDfa6_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x40000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'R':
			if ((active1 & 0x2000000000000000L) != 0x0L)
			{
				jjmatchedKind = 125;
				jjmatchedPos = 5;
			}
			else if ((active3 & 0x80L) != 0x0L)
				return jjStartNfaWithStates_0(5, 199, 89);
			else if ((active4 & 0x100000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 312, 89);
			else if ((active5 & 0x400000000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 354, 89);
			else if ((active7 & 0x2000000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 473, 89);
			else if ((active7 & 0x200000000000L) != 0x0L)
			{
				jjmatchedKind = 493;
				jjmatchedPos = 5;
			}
			return jjMoveStringLiteralDfa6_0(active0, 0x800000080000000L, active1, 0x4000009f80000000L, active2, 0x400000000c800L, active3, 0x10000000000L, active4, 0x80005000000000L, active5, 0x2000000000L, active6, 0x20000580002000L, active7, 0x400000000001L, active8, 0x8L, active9, 0x4018L, active10, 0x0L);
		case 'S':
			if ((active0 & 0x4000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 14, 89);
			else if ((active2 & 0x20000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 181, 89);
			else if ((active2 & 0x8000000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 191, 89);
			else if ((active3 & 0x4000000000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 230, 89);
			else if ((active5 & 0x200L) != 0x0L)
				return jjStartNfaWithStates_0(5, 329, 89);
			else if ((active5 & 0x8000000000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 359, 89);
			else if ((active5 & 0x40000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 374, 89);
			else if ((active10 & 0x80L) != 0x0L)
				return jjStartNfaWithStates_0(5, 647, 89);
			return jjMoveStringLiteralDfa6_0(active0, 0x0L, active1, 0x20000000800L, active2, 0x0L, active3, 0x800000000080000L, active4, 0xc000000000000006L, active5, 0x800L, active6, 0xbc0200040000000L, active7, 0x0L, active8, 0x7fe0000000000L, active9, 0x2000L, active10, 0x0L);
		case 'T':
			if ((active0 & 0x8L) != 0x0L)
				return jjStartNfaWithStates_0(5, 3, 89);
			else if ((active0 & 0x8000000000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 39, 89);
			else if ((active1 & 0x800000L) != 0x0L)
			{
				jjmatchedKind = 87;
				jjmatchedPos = 5;
			}
			else if ((active2 & 0x200000000000000L) != 0x0L)
			{
				jjmatchedKind = 185;
				jjmatchedPos = 5;
			}
			else if ((active3 & 0x8000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 207, 89);
			else if ((active3 & 0x2000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 241, 89);
			else if ((active3 & 0x1000000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 252, 89);
			else if ((active5 & 0x1000000000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 356, 89);
			else if ((active5 & 0x20000000000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 361, 89);
			else if ((active5 & 0x200000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 377, 89);
			else if ((active7 & 0x4L) != 0x0L)
				return jjStartNfaWithStates_0(5, 450, 89);
			else if ((active7 & 0x10000000000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 488, 89);
			else if ((active9 & 0x2L) != 0x0L)
				return jjStartNfaWithStates_0(5, 577, 89);
			else if ((active9 & 0x100000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 632, 89);
			else if ((active9 & 0x800000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 635, 89);
			return jjMoveStringLiteralDfa6_0(active0, 0x200001000000L, active1, 0xf03e000L, active2, 0x4400000200000000L, active3, 0x20000000L, active4, 0xc0000000200L, active5, 0x0L, active6, 0x1000000000100080L, active7, 0x40000000000L, active8, 0x2000000000000000L, active9, 0x1c0080L, active10, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa6_0(active0, 0x2000000010L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x200000L, active8, 0x400000000L, active9, 0x0L, active10, 0x2000000L);
		case 'V':
			return jjMoveStringLiteralDfa6_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x20080008L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0xc00000800000000L, active9, 0x0L, active10, 0x80000L);
		case 'W':
			if ((active4 & 0x80L) != 0x0L)
				return jjStartNfaWithStates_0(5, 263, 89);
			else if ((active10 & 0x400000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 662, 89);
			return jjMoveStringLiteralDfa6_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x2000L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x40000000000000L, active10, 0x0L);
		case 'X':
			return jjMoveStringLiteralDfa6_0(active0, 0x0L, active1, 0x0L, active2, 0x2000000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'Y':
			if ((active0 & 0x10000000000L) != 0x0L)
				return jjStartNfaWithStates_0(5, 40, 89);
			return jjMoveStringLiteralDfa6_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x800000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case '_':
			return jjMoveStringLiteralDfa6_0(active0, 0x1800100000L, active1, 0x180000000100L, active2, 0x200000L, active3, 0x100400L, active4, 0x18000000000000L, active5, 0x4000000000L, active6, 0x0L, active7, 0x1c0000000L, active8, 0x0L, active9, 0x1000L, active10, 0x200100L);
		default :
			break;
		}
		return jjStartNfa_0(4, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_0(4, old0, old1, old2, old3, old4, old5, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_0(5, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
			return 6;
		}
		switch(curChar)
		{
		case '2':
			if ((active6 & 0x20000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 437, 89);
			break;
		case 'A':
			return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000L, active1, 0xf80000000L, active2, 0x4000000004000L, active3, 0xc00000000008L, active4, 0x20080008L, active5, 0x10000L, active6, 0x1000000000000000L, active7, 0x0L, active8, 0x3800000200L, active9, 0xe001c6000L, active10, 0x800L);
		case 'B':
			return jjMoveStringLiteralDfa7_0(active0, 0x0L, active1, 0x0L, active2, 0x4000000L, active3, 0x0L, active4, 0x30000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x200000L);
		case 'C':
			if ((active2 & 0x10000000000L) != 0x0L)
			{
				jjmatchedKind = 168;
				jjmatchedPos = 6;
			}
			else if ((active5 & 0x800000000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 355, 89);
			return jjMoveStringLiteralDfa7_0(active0, 0x0L, active1, 0x800L, active2, 0x60600000080L, active3, 0x2000010000000000L, active4, 0x0L, active5, 0x8000L, active6, 0x0L, active7, 0x80040002002L, active8, 0x1000L, active9, 0x78000000L, active10, 0x0L);
		case 'D':
			if ((active2 & 0x20000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 145, 89);
			else if ((active2 & 0x1000000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 152, 89);
			else if ((active3 & 0x800000000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 227, 89);
			else if ((active4 & 0x2000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 305, 89);
			else if ((active9 & 0x80000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 631, 89);
			return jjMoveStringLiteralDfa7_0(active0, 0x0L, active1, 0x600000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x2000000000000000L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x1000000000020L, active10, 0x0L);
		case 'E':
			if ((active0 & 0x8000000000000L) != 0x0L)
			{
				jjmatchedKind = 51;
				jjmatchedPos = 6;
			}
			else if ((active1 & 0x2000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 77, 89);
			else if ((active2 & 0x800L) != 0x0L)
				return jjStartNfaWithStates_0(6, 139, 89);
			else if ((active2 & 0x800000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 187, 89);
			else if ((active2 & 0x4000000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 190, 89);
			else if ((active6 & 0x100000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 404, 89);
			else if ((active6 & 0x80000000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 415, 89);
			else if ((active6 & 0x800000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 443, 89);
			else if ((active6 & 0x2000000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 445, 89);
			else if ((active7 & 0x8000L) != 0x0L)
			{
				jjmatchedKind = 463;
				jjmatchedPos = 6;
			}
			else if ((active9 & 0x800000000000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 623, 89);
			return jjMoveStringLiteralDfa7_0(active0, 0x4010000000000000L, active1, 0x0L, active2, 0x2000000008000L, active3, 0x11000000080000L, active4, 0xdc80004000000006L, active5, 0x2000000840L, active6, 0x1010000000L, active7, 0x700f0L, active8, 0x100000000000002L, active9, 0xc000000000000000L, active10, 0x80003L);
		case 'F':
			return jjMoveStringLiteralDfa7_0(active0, 0x800000000L, active1, 0x80L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'G':
			if ((active0 & 0x80000000000000L) != 0x0L)
			{
				jjmatchedKind = 55;
				jjmatchedPos = 6;
			}
			else if ((active0 & 0x400000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 58, 89);
			else if ((active4 & 0x100000000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 288, 89);
			else if ((active5 & 0x100000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 340, 89);
			else if ((active6 & 0x200L) != 0x0L)
				return jjStartNfaWithStates_0(6, 393, 89);
			else if ((active6 & 0x200000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 405, 89);
			else if ((active7 & 0x800000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 471, 89);
			else if ((active10 & 0x2000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 653, 89);
			return jjMoveStringLiteralDfa7_0(active0, 0x100000000000000L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x4000000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x10L, active9, 0x0L, active10, 0x0L);
		case 'H':
			if ((active0 & 0x200000000000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 45, 89);
			return jjMoveStringLiteralDfa7_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x100000000L, active9, 0x0L, active10, 0x0L);
		case 'I':
			return jjMoveStringLiteralDfa7_0(active0, 0x81000000L, active1, 0x100000e03c000L, active2, 0x1400000020000000L, active3, 0x808000000002000L, active4, 0xc0000000200L, active5, 0x6000000L, active6, 0x200060000080L, active7, 0xe000140001000100L, active8, 0x7fe0000000000L, active9, 0x6000000000018L, active10, 0x0L);
		case 'L':
			if ((active2 & 0x400L) != 0x0L)
				return jjStartNfaWithStates_0(6, 138, 89);
			else if ((active3 & 0x8000000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 219, 89);
			else if ((active3 & 0x40000000000000L) != 0x0L)
			{
				jjmatchedKind = 246;
				jjmatchedPos = 6;
			}
			else if ((active4 & 0x40000000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 286, 89);
			else if ((active5 & 0x20000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 337, 89);
			else if ((active6 & 0x40L) != 0x0L)
				return jjStartNfaWithStates_0(6, 390, 89);
			return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L, active1, 0x0L, active2, 0x0L, active3, 0x80000000000000L, active4, 0x0L, active5, 0x20004090000000L, active6, 0x40000000000000L, active7, 0x0L, active8, 0x200000000L, active9, 0x0L, active10, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa7_0(active0, 0x2100000L, active1, 0x0L, active2, 0x18L, active3, 0x0L, active4, 0x400000L, active5, 0x0L, active6, 0x0L, active7, 0x200000L, active8, 0xc400000000L, active9, 0x0L, active10, 0x400L);
		case 'N':
			if ((active0 & 0x4000000000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 38, 89);
			else if ((active0 & 0x80000000000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 43, 89);
			else if ((active3 & 0x2L) != 0x0L)
				return jjStartNfaWithStates_0(6, 193, 89);
			else if ((active3 & 0x10000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 208, 89);
			else if ((active3 & 0x20000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 209, 89);
			else if ((active6 & 0x2000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 397, 89);
			else if ((active6 & 0x1000000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 408, 89);
			else if ((active7 & 0x2000000000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 485, 89);
			else if ((active7 & 0x800000000000L) != 0x0L)
			{
				jjmatchedKind = 495;
				jjmatchedPos = 6;
			}
			else if ((active9 & 0x40000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 630, 89);
			else if ((active10 & 0x4000L) != 0x0L)
			{
				jjmatchedKind = 654;
				jjmatchedPos = 6;
			}
			return jjMoveStringLiteralDfa7_0(active0, 0x0L, active1, 0x2000000000L, active2, 0x800100000000L, active3, 0x2000000000L, active4, 0x8000000000000L, active5, 0x10000000000001L, active6, 0x11800000000000L, active7, 0x201000080000000L, active8, 0x100e0000028L, active9, 0x4601000L, active10, 0x8000L);
		case 'O':
			return jjMoveStringLiteralDfa7_0(active0, 0x0L, active1, 0x100L, active2, 0x80000000L, active3, 0x1000000L, active4, 0x0L, active5, 0x0L, active6, 0x8000006000000L, active7, 0x0L, active8, 0x4580L, active9, 0x180000000L, active10, 0x100L);
		case 'P':
			if ((active10 & 0x200L) != 0x0L)
				return jjStartNfaWithStates_0(6, 649, 89);
			return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L, active1, 0xa0000000000L, active2, 0x18000000L, active3, 0x0L, active4, 0x800000L, active5, 0x800000000000000L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'R':
			if ((active2 & 0x40000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 146, 89);
			else if ((active4 & 0x1L) != 0x0L)
				return jjStartNfaWithStates_0(6, 256, 89);
			else if ((active4 & 0x20L) != 0x0L)
				return jjStartNfaWithStates_0(6, 261, 89);
			else if ((active4 & 0x100L) != 0x0L)
				return jjStartNfaWithStates_0(6, 264, 89);
			else if ((active4 & 0x100000000000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 300, 89);
			else if ((active6 & 0x8000000000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 423, 89);
			else if ((active7 & 0x20000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 501, 89);
			else if ((active9 & 0x2000000000L) != 0x0L)
			{
				jjmatchedKind = 613;
				jjmatchedPos = 6;
			}
			else if ((active10 & 0x1000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 652, 89);
			else if ((active10 & 0x8000000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 667, 89);
			return jjMoveStringLiteralDfa7_0(active0, 0x0L, active1, 0x0L, active2, 0x8000000200000L, active3, 0x20100000L, active4, 0x10000000006000L, active5, 0x0L, active6, 0x400L, active7, 0x0L, active8, 0x18000000000000L, active9, 0x5c000000080L, active10, 0x0L);
		case 'S':
			if ((active4 & 0x4000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 306, 89);
			else if ((active5 & 0x8L) != 0x0L)
				return jjStartNfaWithStates_0(6, 323, 89);
			else if ((active5 & 0x2000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 369, 89);
			else if ((active7 & 0x200L) != 0x0L)
				return jjStartNfaWithStates_0(6, 457, 89);
			else if ((active7 & 0x1000000000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 484, 89);
			return jjMoveStringLiteralDfa7_0(active0, 0x0L, active1, 0x100000000000L, active2, 0x40000002L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x100000000L, active8, 0x8000000000000000L, active9, 0x0L, active10, 0x0L);
		case 'T':
			if ((active1 & 0x40000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 82, 89);
			else if ((active1 & 0x10000000L) != 0x0L)
			{
				jjmatchedKind = 92;
				jjmatchedPos = 6;
			}
			else if ((active1 & 0x8000000000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 103, 89);
			else if ((active1 & 0x2000000000000L) != 0x0L)
			{
				jjmatchedKind = 113;
				jjmatchedPos = 6;
			}
			else if ((active2 & 0x1000L) != 0x0L)
			{
				jjmatchedKind = 140;
				jjmatchedPos = 6;
			}
			else if ((active2 & 0x100000000000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 172, 89);
			else if ((active3 & 0x10L) != 0x0L)
				return jjStartNfaWithStates_0(6, 196, 89);
			else if ((active6 & 0x8000L) != 0x0L)
			{
				jjmatchedKind = 399;
				jjmatchedPos = 6;
			}
			else if ((active6 & 0x8000000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 447, 89);
			else if ((active7 & 0x1L) != 0x0L)
				return jjStartNfaWithStates_0(6, 448, 89);
			else if ((active8 & 0x40L) != 0x0L)
				return jjStartNfaWithStates_0(6, 518, 89);
			else if ((active9 & 0x800000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 599, 89);
			else if ((active10 & 0x2000000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 665, 89);
			return jjMoveStringLiteralDfa7_0(active0, 0x8000000004800810L, active1, 0x1ffc00006100003fL, active2, 0x2000L, active3, 0x4020100010000000L, active4, 0x0L, active5, 0x8000000000000000L, active6, 0x7003fL, active7, 0x4000000000L, active8, 0x1fff8804L, active9, 0x100000000005L, active10, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa7_0(active0, 0x60000000L, active1, 0x5000000000L, active2, 0x0L, active3, 0x0L, active4, 0x40000000040000L, active5, 0x10L, active6, 0x2000000000L, active7, 0x100000L, active8, 0x2000000000002000L, active9, 0x0L, active10, 0x0L);
		case 'V':
			return jjMoveStringLiteralDfa7_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x400L, active4, 0x0L, active5, 0x0L, active6, 0x406000100000000L, active7, 0x0L, active8, 0x0L, active9, 0x2000000L, active10, 0x0L);
		case 'X':
			return jjMoveStringLiteralDfa7_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x8000L, active5, 0x0L, active6, 0x180000000000000L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'Y':
			if ((active0 & 0x800000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 59, 89);
			else if ((active4 & 0x1000000000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 292, 89);
			else if ((active5 & 0x1000000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 380, 89);
			else if ((active6 & 0x400000000L) != 0x0L)
				return jjStartNfaWithStates_0(6, 418, 89);
			return jjMoveStringLiteralDfa7_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x200000000000000L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case '_':
			return jjMoveStringLiteralDfa7_0(active0, 0x0L, active1, 0x4000000000100000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x400010000000L, active8, 0xc00000000000000L, active9, 0x600L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_0(5, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_0(5, old0, old1, old2, old3, old4, old5, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_0(6, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
			return 7;
		}
		switch(curChar)
		{
		case 'A':
			return jjMoveStringLiteralDfa8_0(active0, 0x1000100000L, active1, 0x100000000000L, active2, 0x200080L, active3, 0x400L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0xc0000000L, active8, 0x100004020L, active9, 0x1000L, active10, 0x0L);
		case 'B':
			if ((active8 & 0x80L) != 0x0L)
				return jjStartNfaWithStates_0(7, 519, 89);
			else if ((active8 & 0x400L) != 0x0L)
				return jjStartNfaWithStates_0(7, 522, 89);
			return jjMoveStringLiteralDfa8_0(active0, 0x0L, active1, 0x0L, active2, 0x4000L, active3, 0x0L, active4, 0x400000L, active5, 0x0L, active6, 0x1000000000000000L, active7, 0x200000L, active8, 0x8000000002000L, active9, 0x0L, active10, 0x0L);
		case 'C':
			if ((active2 & 0x2000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(7, 177, 94);
			else if ((active7 & 0x2000000000000000L) != 0x0L)
			{
				jjmatchedKind = 509;
				jjmatchedPos = 7;
			}
			return jjMoveStringLiteralDfa8_0(active0, 0x0L, active1, 0x1000000000L, active2, 0x0L, active3, 0x80000L, active4, 0xc000000000000006L, active5, 0x0L, active6, 0x1800000000000L, active7, 0xc000000100000000L, active8, 0x10000000000000L, active9, 0x0L, active10, 0x0L);
		case 'D':
			if ((active0 & 0x10000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(7, 52, 89);
			else if ((active2 & 0x8000L) != 0x0L)
				return jjStartNfaWithStates_0(7, 143, 89);
			return jjMoveStringLiteralDfa8_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0xf0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'E':
			if ((active0 & 0x10L) != 0x0L)
				return jjStartNfaWithStates_0(7, 4, 89);
			else if ((active0 & 0x800L) != 0x0L)
				return jjStartNfaWithStates_0(7, 11, 89);
			else if ((active1 & 0x800L) != 0x0L)
				return jjStartNfaWithStates_0(7, 75, 89);
			else if ((active1 & 0x4000000000L) != 0x0L)
				return jjStartNfaWithStates_0(7, 102, 89);
			else if ((active2 & 0x2L) != 0x0L)
				return jjStartNfaWithStates_0(7, 129, 89);
			else if ((active2 & 0x4000000L) != 0x0L)
				return jjStartNfaWithStates_0(7, 154, 89);
			else if ((active3 & 0x2000000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(7, 253, 89);
			else if ((active4 & 0x800000L) != 0x0L)
				return jjStartNfaWithStates_0(7, 279, 89);
			else if ((active4 & 0x4000000L) != 0x0L)
				return jjStartNfaWithStates_0(7, 282, 89);
			else if ((active4 & 0x40000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(7, 310, 89);
			else if ((active5 & 0x10L) != 0x0L)
				return jjStartNfaWithStates_0(7, 324, 89);
			else if ((active5 & 0x80000000L) != 0x0L)
				return jjStartNfaWithStates_0(7, 351, 89);
			else if ((active6 & 0x100000000L) != 0x0L)
				return jjStartNfaWithStates_0(7, 416, 89);
			else if ((active6 & 0x400000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(7, 442, 89);
			else if ((active7 & 0x80000000000L) != 0x0L)
				return jjStartNfaWithStates_0(7, 491, 89);
			else if ((active8 & 0x4L) != 0x0L)
				return jjStartNfaWithStates_0(7, 514, 89);
			else if ((active8 & 0x800L) != 0x0L)
				return jjStartNfaWithStates_0(7, 523, 89);
			else if ((active8 & 0x4000000000L) != 0x0L)
			{
				jjmatchedKind = 550;
				jjmatchedPos = 7;
			}
			else if ((active9 & 0x100000000000L) != 0x0L)
				return jjStartNfaWithStates_0(7, 620, 89);
			return jjMoveStringLiteralDfa8_0(active0, 0x8000000002000000L, active1, 0x100003fL, active2, 0x100000018L, active3, 0x10000000L, active4, 0x10000000040000L, active5, 0x8000004000000000L, active6, 0x3fL, active7, 0x0L, active8, 0x841fff8000L, active9, 0x1000002600000L, active10, 0x0L);
		case 'F':
			if ((active10 & 0x100L) != 0x0L)
				return jjStartNfaWithStates_0(7, 648, 89);
			return jjMoveStringLiteralDfa8_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0xc000000000000000L, active10, 0x3L);
		case 'G':
			if ((active2 & 0x800000000000L) != 0x0L)
				return jjStartNfaWithStates_0(7, 175, 89);
			else if ((active3 & 0x2000000000L) != 0x0L)
				return jjStartNfaWithStates_0(7, 229, 89);
			else if ((active5 & 0x10000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(7, 372, 89);
			else if ((active9 & 0x4000000L) != 0x0L)
				return jjStartNfaWithStates_0(7, 602, 89);
			return jjMoveStringLiteralDfa8_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x4000000000L, active5, 0x0L, active6, 0x6001000000000L, active7, 0x0L, active8, 0xe0000000L, active9, 0x0L, active10, 0x0L);
		case 'H':
			if ((active2 & 0x200000000L) != 0x0L)
				return jjStartNfaWithStates_0(7, 161, 89);
			return jjMoveStringLiteralDfa8_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x10000000000L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'I':
			return jjMoveStringLiteralDfa8_0(active0, 0x800000L, active1, 0xfe0000080L, active2, 0x0L, active3, 0x4000000000000000L, active4, 0x8000L, active5, 0x2020000000000001L, active6, 0x30000L, active7, 0x0L, active8, 0x1018L, active9, 0x81L, active10, 0x8000L);
		case 'J':
			return jjMoveStringLiteralDfa8_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x30000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'K':
			if ((active7 & 0x2000L) != 0x0L)
				return jjStartNfaWithStates_0(7, 461, 89);
			break;
		case 'L':
			if ((active3 & 0x8L) != 0x0L)
				return jjStartNfaWithStates_0(7, 195, 89);
			else if ((active4 & 0x8L) != 0x0L)
				return jjStartNfaWithStates_0(7, 259, 89);
			else if ((active5 & 0x10000L) != 0x0L)
				return jjStartNfaWithStates_0(7, 336, 89);
			else if ((active8 & 0x1000000000L) != 0x0L)
				return jjStartNfaWithStates_0(7, 548, 89);
			return jjMoveStringLiteralDfa8_0(active0, 0x4002000000000L, active1, 0x0L, active2, 0x0L, active3, 0x80000000000000L, active4, 0x20080000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x2000000100L, active9, 0x0L, active10, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa8_0(active0, 0x0L, active1, 0x0L, active2, 0x4000000000000L, active3, 0x0L, active4, 0xc0000000000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x1c2000L, active10, 0x0L);
		case 'N':
			if ((active3 & 0x1000000L) != 0x0L)
				return jjStartNfaWithStates_0(7, 216, 89);
			else if ((active6 & 0x2000000L) != 0x0L)
			{
				jjmatchedKind = 409;
				jjmatchedPos = 7;
			}
			return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000000L, active1, 0x4000000000100000L, active2, 0x1000000020000000L, active3, 0x19000000002000L, active4, 0x0L, active5, 0x2000000000L, active6, 0x24000000L, active7, 0x400011100100L, active8, 0x100000000000000L, active9, 0x18L, active10, 0x0L);
		case 'O':
			return jjMoveStringLiteralDfa8_0(active0, 0x1000000L, active1, 0xa000e03c000L, active2, 0x400000000000000L, active3, 0x20000000100000L, active4, 0x200L, active5, 0x8000L, active6, 0x40000040000480L, active7, 0x0L, active8, 0x200000000L, active9, 0x0L, active10, 0x0L);
		case 'P':
			if ((active10 & 0x400L) != 0x0L)
				return jjStartNfaWithStates_0(7, 650, 89);
			return jjMoveStringLiteralDfa8_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x400000000000002L, active9, 0x0L, active10, 0x0L);
		case 'R':
			if ((active8 & 0x200L) != 0x0L)
				return jjStartNfaWithStates_0(7, 521, 89);
			else if ((active10 & 0x80000L) != 0x0L)
				return jjStartNfaWithStates_0(7, 659, 89);
			return jjMoveStringLiteralDfa8_0(active0, 0x804000000L, active1, 0x100L, active2, 0x0L, active3, 0x0L, active4, 0x6000L, active5, 0x0L, active6, 0x2000000000L, active7, 0x0L, active8, 0x2000000800000000L, active9, 0x40180004000L, active10, 0x800L);
		case 'S':
			if ((active1 & 0x2000000000L) != 0x0L)
				return jjStartNfaWithStates_0(7, 101, 89);
			else if ((active2 & 0x2000L) != 0x0L)
				return jjStartNfaWithStates_0(7, 141, 89);
			else if ((active4 & 0x80000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(7, 311, 89);
			else if ((active5 & 0x40L) != 0x0L)
				return jjStartNfaWithStates_0(7, 326, 89);
			else if ((active5 & 0x800000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(7, 379, 89);
			else if ((active6 & 0x10000000L) != 0x0L)
				return jjStartNfaWithStates_0(7, 412, 89);
			else if ((active9 & 0x20L) != 0x0L)
				return jjStartNfaWithStates_0(7, 581, 89);
			return jjMoveStringLiteralDfa8_0(active0, 0x0L, active1, 0x1000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x8800000000000000L, active9, 0x0L, active10, 0x0L);
		case 'T':
			if ((active2 & 0x400000000L) != 0x0L)
				return jjStartNfaWithStates_0(7, 162, 89);
			else if ((active5 & 0x800L) != 0x0L)
				return jjStartNfaWithStates_0(7, 331, 89);
			else if ((active7 & 0x2L) != 0x0L)
				return jjStartNfaWithStates_0(7, 449, 89);
			else if ((active7 & 0x200000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(7, 505, 89);
			return jjMoveStringLiteralDfa8_0(active0, 0x60000000L, active1, 0x0L, active2, 0x8000058000000L, active3, 0x800c00000000000L, active4, 0x0L, active5, 0x0L, active6, 0x10000000000000L, active7, 0x0L, active8, 0x0L, active9, 0x6000e78000200L, active10, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa8_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x8000000000000L, active5, 0x10000000L, active6, 0x8000000000000L, active7, 0x0L, active8, 0x0L, active9, 0x404L, active10, 0x200000L);
		case 'V':
			return jjMoveStringLiteralDfa8_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x200000000000L, active7, 0x40000000000L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'W':
			if ((active2 & 0x80000000L) != 0x0L)
				return jjStartNfaWithStates_0(7, 159, 89);
			break;
		case 'X':
			if ((active6 & 0x80000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(7, 439, 89);
			break;
		case 'Y':
			if ((active3 & 0x20000000L) != 0x0L)
				return jjStartNfaWithStates_0(7, 221, 89);
			else if ((active3 & 0x100000000000L) != 0x0L)
				return jjStartNfaWithStates_0(7, 236, 89);
			else if ((active6 & 0x100000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(7, 440, 89);
			else if ((active6 & 0x200000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(7, 441, 89);
			else if ((active7 & 0x4000000000L) != 0x0L)
				return jjStartNfaWithStates_0(7, 486, 89);
			return jjMoveStringLiteralDfa8_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x10000000000L, active9, 0x0L, active10, 0x0L);
		case 'Z':
			return jjMoveStringLiteralDfa8_0(active0, 0x80000000L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x6000000L, active6, 0x0L, active7, 0x100000000000L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case '_':
			return jjMoveStringLiteralDfa8_0(active0, 0x100000000000000L, active1, 0x1ffc000000600000L, active2, 0x60000000000L, active3, 0x0L, active4, 0x1c00000000000000L, active5, 0x0L, active6, 0x40000L, active7, 0x1000000070000L, active8, 0x7fe0000000000L, active9, 0x1c000000000L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_0(6, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_0(6, old0, old1, old2, old3, old4, old5, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_0(7, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
			return 8;
		}
		switch(curChar)
		{
		case 'A':
			return jjMoveStringLiteralDfa9_0(active0, 0x880000000L, active1, 0x4000000000100000L, active2, 0x0L, active3, 0x4000000000000000L, active4, 0x6000L, active5, 0x0L, active6, 0x0L, active7, 0x500010000000L, active8, 0x800000000000000L, active9, 0x40000000000L, active10, 0x0L);
		case 'B':
			if ((active8 & 0x200000000L) != 0x0L)
				return jjStartNfaWithStates_0(8, 545, 89);
			break;
		case 'C':
			if ((active9 & 0x80L) != 0x0L)
				return jjStartNfaWithStates_0(8, 583, 89);
			return jjMoveStringLiteralDfa9_0(active0, 0x0L, active1, 0x4000000000000L, active2, 0x100000000L, active3, 0x0L, active4, 0x10000000000000L, active5, 0x2000000000L, active6, 0x0L, active7, 0x10000L, active8, 0x800000000L, active9, 0x4000000000L, active10, 0x200000L);
		case 'D':
			if ((active1 & 0x1000000L) != 0x0L)
				return jjStartNfaWithStates_0(8, 88, 89);
			else if ((active3 & 0x10000000L) != 0x0L)
				return jjStartNfaWithStates_0(8, 220, 89);
			else if ((active9 & 0x1000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(8, 624, 89);
			return jjMoveStringLiteralDfa9_0(active0, 0x0L, active1, 0x18000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x20000000000L, active9, 0x0L, active10, 0x0L);
		case 'E':
			if ((active0 & 0x20000000L) != 0x0L)
			{
				jjmatchedKind = 29;
				jjmatchedPos = 8;
			}
			else if ((active2 & 0x4000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(8, 178, 89);
			else if ((active3 & 0x400000000000L) != 0x0L)
			{
				jjmatchedKind = 238;
				jjmatchedPos = 8;
			}
			else if ((active4 & 0x40000000000L) != 0x0L)
			{
				jjmatchedKind = 298;
				jjmatchedPos = 8;
			}
			else if ((active5 & 0x2000000L) != 0x0L)
			{
				jjmatchedKind = 345;
				jjmatchedPos = 8;
			}
			else if ((active5 & 0x10000000L) != 0x0L)
				return jjStartNfaWithStates_0(8, 348, 89);
			else if ((active6 & 0x2000000000L) != 0x0L)
				return jjStartNfaWithStates_0(8, 421, 89);
			else if ((active6 & 0x200000000000L) != 0x0L)
				return jjStartNfaWithStates_0(8, 429, 89);
			else if ((active7 & 0x40000000000L) != 0x0L)
				return jjStartNfaWithStates_0(8, 490, 89);
			else if ((active8 & 0x2000000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(8, 573, 89);
			else if ((active9 & 0x200000000L) != 0x0L)
			{
				jjmatchedKind = 609;
				jjmatchedPos = 8;
			}
			return jjMoveStringLiteralDfa9_0(active0, 0x40000000L, active1, 0x80L, active2, 0x0L, active3, 0x800000000000L, active4, 0x84000430000L, active5, 0x4000000L, active6, 0x10801000000000L, active7, 0x200000L, active8, 0x100L, active9, 0x400000000L, active10, 0x0L);
		case 'F':
			return jjMoveStringLiteralDfa9_0(active0, 0x0L, active1, 0x600000L, active2, 0x60000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x40000000000L, active9, 0x0L, active10, 0x0L);
		case 'G':
			if ((active2 & 0x1000000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(8, 188, 89);
			else if ((active3 & 0x2000L) != 0x0L)
				return jjStartNfaWithStates_0(8, 205, 89);
			else if ((active3 & 0x8000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(8, 243, 89);
			else if ((active6 & 0x20000000L) != 0x0L)
				return jjStartNfaWithStates_0(8, 413, 89);
			else if ((active7 & 0x100L) != 0x0L)
				return jjStartNfaWithStates_0(8, 456, 89);
			else if ((active9 & 0x8L) != 0x0L)
			{
				jjmatchedKind = 579;
				jjmatchedPos = 8;
			}
			return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000000L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x8000L, active9, 0x10L, active10, 0x0L);
		case 'H':
			return jjMoveStringLiteralDfa9_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x100000000L, active8, 0x10080000000000L, active9, 0x0L, active10, 0x0L);
		case 'I':
			if ((active0 & 0x2000000000L) != 0x0L)
				return jjStartNfaWithStates_0(8, 37, 89);
			return jjMoveStringLiteralDfa9_0(active0, 0x4000004000000L, active1, 0x100L, active2, 0x8000068000000L, active3, 0x800000000000000L, active4, 0x0L, active5, 0x0L, active6, 0x1000000000000L, active7, 0x0L, active8, 0x8010000000000L, active9, 0xc004000878000200L, active10, 0x3L);
		case 'L':
			return jjMoveStringLiteralDfa9_0(active0, 0x0L, active1, 0x0L, active2, 0x4000L, active3, 0x400L, active4, 0x400000000000000L, active5, 0x0L, active6, 0x1000000000030000L, active7, 0x0L, active8, 0x2000002000L, active9, 0x2000000L, active10, 0x0L);
		case 'M':
			if ((active9 & 0x80000000L) != 0x0L)
			{
				jjmatchedKind = 607;
				jjmatchedPos = 8;
			}
			return jjMoveStringLiteralDfa9_0(active0, 0x0L, active1, 0x100000000000L, active2, 0x0L, active3, 0x0L, active4, 0x8000000000000L, active5, 0x0L, active6, 0x0L, active7, 0x80000000L, active8, 0x700000001000L, active9, 0x100001000L, active10, 0x0L);
		case 'N':
			if ((active0 & 0x1000000L) != 0x0L)
				return jjStartNfaWithStates_0(8, 24, 89);
			else if ((active1 & 0x4000L) != 0x0L)
			{
				jjmatchedKind = 78;
				jjmatchedPos = 8;
			}
			else if ((active1 & 0x2000000L) != 0x0L)
			{
				jjmatchedKind = 89;
				jjmatchedPos = 8;
			}
			else if ((active2 & 0x400000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(8, 186, 89);
			else if ((active4 & 0x200L) != 0x0L)
				return jjStartNfaWithStates_0(8, 265, 89);
			else if ((active6 & 0x80L) != 0x0L)
				return jjStartNfaWithStates_0(8, 391, 89);
			else if ((active6 & 0x40000000L) != 0x0L)
				return jjStartNfaWithStates_0(8, 414, 89);
			return jjMoveStringLiteralDfa9_0(active0, 0x100000002000000L, active1, 0x20f8c038000L, active2, 0x200000L, active3, 0x0L, active4, 0x0L, active5, 0x2000004000008000L, active6, 0x8000000000000L, active7, 0x20000L, active8, 0x18L, active9, 0x8000000000L, active10, 0x8000L);
		case 'O':
			return jjMoveStringLiteralDfa9_0(active0, 0x0L, active1, 0x60000000L, active2, 0x10000000L, active3, 0x80000L, active4, 0xc800000000000000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x400000000000000L, active9, 0x0L, active10, 0x0L);
		case 'P':
			if ((active1 & 0x80000000000L) != 0x0L)
				return jjStartNfaWithStates_0(8, 107, 89);
			else if ((active9 & 0x40000L) != 0x0L)
			{
				jjmatchedKind = 594;
				jjmatchedPos = 8;
			}
			return jjMoveStringLiteralDfa9_0(active0, 0x0L, active1, 0x20000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x40000000000000L, active7, 0x0L, active8, 0x0L, active9, 0x182000L, active10, 0x0L);
		case 'Q':
			return jjMoveStringLiteralDfa9_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x800000000000L, active9, 0x0L, active10, 0x0L);
		case 'R':
			if ((active0 & 0x8000000000000000L) != 0x0L)
			{
				jjmatchedKind = 63;
				jjmatchedPos = 8;
			}
			else if ((active3 & 0x20000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(8, 245, 89);
			else if ((active5 & 0x8000000000000000L) != 0x0L)
			{
				jjmatchedKind = 383;
				jjmatchedPos = 8;
			}
			else if ((active8 & 0x100000000L) != 0x0L)
				return jjStartNfaWithStates_0(8, 544, 89);
			return jjMoveStringLiteralDfa9_0(active0, 0x1000000000L, active1, 0xc000000000003fL, active2, 0x0L, active3, 0x0L, active4, 0x40000L, active5, 0x0L, active6, 0x4003fL, active7, 0x0L, active8, 0x41fff0020L, active9, 0x0L, active10, 0x0L);
		case 'S':
			return jjMoveStringLiteralDfa9_0(active0, 0x0L, active1, 0x100000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x8000L, active5, 0x0L, active6, 0x0L, active7, 0x40000L, active8, 0x1008000000000L, active9, 0x10000000401L, active10, 0x0L);
		case 'T':
			if ((active1 & 0x1000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(8, 112, 89);
			else if ((active3 & 0x10000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(8, 244, 89);
			else if ((active4 & 0x2L) != 0x0L)
			{
				jjmatchedKind = 257;
				jjmatchedPos = 8;
			}
			else if ((active7 & 0x100000L) != 0x0L)
				return jjStartNfaWithStates_0(8, 468, 89);
			else if ((active7 & 0x1000000L) != 0x0L)
				return jjStartNfaWithStates_0(8, 472, 89);
			else if ((active8 & 0x4000L) != 0x0L)
				return jjStartNfaWithStates_0(8, 526, 89);
			else if ((active8 & 0x100000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(8, 568, 89);
			return jjMoveStringLiteralDfa9_0(active0, 0x0L, active1, 0xe00001000000000L, active2, 0x80L, active3, 0x1000000000000L, active4, 0x1000000000000004L, active5, 0x20000000000000L, active6, 0x0L, active7, 0x8000000040000000L, active8, 0x2L, active9, 0x2000000000004L, active10, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa9_0(active0, 0x0L, active1, 0x1000000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x20080000L, active5, 0x1L, active6, 0x400L, active7, 0x1000000000000L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'V':
			return jjMoveStringLiteralDfa9_0(active0, 0x800000L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0xe0000000L, active9, 0x0L, active10, 0x0L);
		case 'W':
			if ((active3 & 0x100000L) != 0x0L)
				return jjStartNfaWithStates_0(8, 212, 89);
			return jjMoveStringLiteralDfa9_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x2000000000000L, active9, 0x0L, active10, 0x0L);
		case 'X':
			if ((active6 & 0x2000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(8, 433, 89);
			return jjMoveStringLiteralDfa9_0(active0, 0x100000L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'Y':
			if ((active3 & 0x10000000000L) != 0x0L)
				return jjStartNfaWithStates_0(8, 232, 89);
			else if ((active3 & 0x80000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(8, 247, 89);
			else if ((active6 & 0x4000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(8, 434, 89);
			else if ((active9 & 0x4000L) != 0x0L)
				return jjStartNfaWithStates_0(8, 590, 89);
			else if ((active10 & 0x800L) != 0x0L)
				return jjStartNfaWithStates_0(8, 651, 89);
			return jjMoveStringLiteralDfa9_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x4000000000000L, active9, 0x0L, active10, 0x0L);
		case '_':
			return jjMoveStringLiteralDfa9_0(active0, 0x0L, active1, 0x0L, active2, 0x18L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x4000000L, active7, 0x40000000000000f0L, active8, 0x8000000000000000L, active9, 0x600000L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_0(7, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_0(7, old0, old1, old2, old3, old4, old5, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_0(8, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
			return 9;
		}
		switch(curChar)
		{
		case 'A':
			return jjMoveStringLiteralDfa10_0(active0, 0x100000000000000L, active1, 0x2c000004000000L, active2, 0x0L, active3, 0x1000000000000L, active4, 0x0L, active5, 0x0L, active6, 0x40000L, active7, 0x40030000L, active8, 0x100200e0001100L, active9, 0xc000080000L, active10, 0x0L);
		case 'B':
			return jjMoveStringLiteralDfa10_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x4000000000000000L, active4, 0x8000000000000L, active5, 0x0L, active6, 0x0L, active7, 0x100000000000L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'C':
			if ((active0 & 0x4000000L) != 0x0L)
				return jjStartNfaWithStates_0(9, 26, 89);
			return jjMoveStringLiteralDfa10_0(active0, 0x0L, active1, 0x100000000000000L, active2, 0x40000000L, active3, 0x0L, active4, 0x800000000030000L, active5, 0x0L, active6, 0x0L, active7, 0x40010L, active8, 0x0L, active9, 0x10000000000L, active10, 0x0L);
		case 'D':
			if ((active5 & 0x8000L) != 0x0L)
				return jjStartNfaWithStates_0(9, 335, 89);
			else if ((active5 & 0x4000000L) != 0x0L)
				return jjStartNfaWithStates_0(9, 346, 89);
			return jjMoveStringLiteralDfa10_0(active0, 0x0L, active1, 0x20000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x100000L, active10, 0x0L);
		case 'E':
			if ((active0 & 0x800000L) != 0x0L)
				return jjStartNfaWithStates_0(9, 23, 89);
			else if ((active2 & 0x80L) != 0x0L)
				return jjStartNfaWithStates_0(9, 135, 89);
			else if ((active2 & 0x4000L) != 0x0L)
				return jjStartNfaWithStates_0(9, 142, 89);
			else if ((active4 & 0x80000L) != 0x0L)
				return jjStartNfaWithStates_0(9, 275, 89);
			else if ((active4 & 0x20000000L) != 0x0L)
				return jjStartNfaWithStates_0(9, 285, 89);
			else if ((active6 & 0x40000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(9, 438, 89);
			else if ((active6 & 0x1000000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(9, 444, 89);
			else if ((active7 & 0x80000000L) != 0x0L)
				return jjStartNfaWithStates_0(9, 479, 89);
			else if ((active8 & 0x2000L) != 0x0L)
				return jjStartNfaWithStates_0(9, 525, 89);
			else if ((active9 & 0x4L) != 0x0L)
				return jjStartNfaWithStates_0(9, 578, 89);
			else if ((active9 & 0x1000L) != 0x0L)
				return jjStartNfaWithStates_0(9, 588, 89);
			return jjMoveStringLiteralDfa10_0(active0, 0x0L, active1, 0x10000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x1400000000000000L, active5, 0x2000000000L, active6, 0x30000L, active7, 0x100000000L, active8, 0x7000000008000L, active9, 0x2000000000401L, active10, 0x0L);
		case 'G':
			if ((active5 & 0x2000000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(9, 381, 89);
			else if ((active8 & 0x8L) != 0x0L)
				return jjStartNfaWithStates_0(9, 515, 89);
			else if ((active10 & 0x8000L) != 0x0L)
				return jjStartNfaWithStates_0(9, 655, 89);
			return jjMoveStringLiteralDfa10_0(active0, 0x0L, active1, 0x100L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x4000000000L, active6, 0x400L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'H':
			return jjMoveStringLiteralDfa10_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x800000000L, active9, 0x200000L, active10, 0x0L);
		case 'I':
			return jjMoveStringLiteralDfa10_0(active0, 0x0L, active1, 0x600000000000010L, active2, 0x18L, active3, 0x0L, active4, 0x4L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x302400000002L, active9, 0x0L, active10, 0x0L);
		case 'K':
			if ((active2 & 0x200000L) != 0x0L)
				return jjStartNfaWithStates_0(9, 149, 89);
			return jjMoveStringLiteralDfa10_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x200000L);
		case 'L':
			return jjMoveStringLiteralDfa10_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x800000000000L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x20L, active8, 0x0L, active9, 0x2000L, active10, 0x0L);
		case 'M':
			if ((active5 & 0x1L) != 0x0L)
				return jjStartNfaWithStates_0(9, 320, 89);
			return jjMoveStringLiteralDfa10_0(active0, 0x800000000L, active1, 0x4000000000100000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x400010000000L, active8, 0x800000000000000L, active9, 0x400200L, active10, 0x0L);
		case 'N':
			if ((active1 & 0x20000000L) != 0x0L)
			{
				jjmatchedKind = 93;
				jjmatchedPos = 9;
			}
			return jjMoveStringLiteralDfa10_0(active0, 0x0L, active1, 0x40000000L, active2, 0x0L, active3, 0x80000L, active4, 0xc000000000000000L, active5, 0x0L, active6, 0x1000000000000L, active7, 0x4000000000000000L, active8, 0x8010000000000L, active9, 0xc000000000000000L, active10, 0x3L);
		case 'O':
			return jjMoveStringLiteralDfa10_0(active0, 0x0L, active1, 0xc0001000000000L, active2, 0x8000000L, active3, 0x0L, active4, 0x10000000000000L, active5, 0x0L, active6, 0x0L, active7, 0x40L, active8, 0x8000480000000000L, active9, 0x4000878000000L, active10, 0x0L);
		case 'P':
			if ((active1 & 0x100000000000L) != 0x0L)
				return jjStartNfaWithStates_0(9, 108, 89);
			else if ((active8 & 0x400000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(9, 570, 89);
			break;
		case 'R':
			if ((active1 & 0x80L) != 0x0L)
				return jjStartNfaWithStates_0(9, 71, 89);
			else if ((active2 & 0x10000000L) != 0x0L)
				return jjStartNfaWithStates_0(9, 156, 89);
			else if ((active4 & 0x400000L) != 0x0L)
				return jjStartNfaWithStates_0(9, 278, 89);
			else if ((active7 & 0x200000L) != 0x0L)
				return jjStartNfaWithStates_0(9, 469, 89);
			return jjMoveStringLiteralDfa10_0(active0, 0x0L, active1, 0x800000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x10000004000000L, active7, 0x0L, active8, 0x40000000000L, active9, 0x0L, active10, 0x0L);
		case 'S':
			if ((active0 & 0x40000000L) != 0x0L)
				return jjStartNfaWithStates_0(9, 30, 89);
			else if ((active1 & 0x20L) != 0x0L)
				return jjStartNfaWithStates_0(9, 69, 89);
			else if ((active6 & 0x1000000000L) != 0x0L)
				return jjStartNfaWithStates_0(9, 420, 89);
			else if ((active6 & 0x800000000000L) != 0x0L)
				return jjStartNfaWithStates_0(9, 431, 89);
			else if ((active9 & 0x100000000L) != 0x0L)
				return jjStartNfaWithStates_0(9, 608, 89);
			return jjMoveStringLiteralDfa10_0(active0, 0x0L, active1, 0x1000000000000000L, active2, 0x20000000L, active3, 0x0L, active4, 0x80000000000L, active5, 0x0L, active6, 0x0L, active7, 0x1000000000080L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'T':
			if ((active0 & 0x2000000L) != 0x0L)
				return jjStartNfaWithStates_0(9, 25, 89);
			else if ((active1 & 0x80000000L) != 0x0L)
			{
				jjmatchedKind = 95;
				jjmatchedPos = 9;
			}
			else if ((active2 & 0x100000000L) != 0x0L)
				return jjStartNfaWithStates_0(9, 160, 89);
			else if ((active6 & 0x8000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(9, 435, 89);
			else if ((active8 & 0x10L) != 0x0L)
				return jjStartNfaWithStates_0(9, 516, 89);
			return jjMoveStringLiteralDfa10_0(active0, 0x4004001080000000L, active1, 0xf00000000L, active2, 0x8000000000000L, active3, 0x0L, active4, 0x8000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x8000000000L, active9, 0x0L, active10, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa10_0(active0, 0x0L, active1, 0x600000L, active2, 0x60000000000L, active3, 0x400L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x800000000000L, active9, 0x0L, active10, 0x0L);
		case 'V':
			return jjMoveStringLiteralDfa10_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x800000000000000L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x1fff0000L, active9, 0x0L, active10, 0x0L);
		case 'X':
			if ((active4 & 0x4000000000L) != 0x0L)
				return jjStartNfaWithStates_0(9, 294, 89);
			break;
		case 'Y':
			if ((active4 & 0x2000L) != 0x0L)
			{
				jjmatchedKind = 269;
				jjmatchedPos = 9;
			}
			else if ((active4 & 0x40000L) != 0x0L)
				return jjStartNfaWithStates_0(9, 274, 89);
			else if ((active5 & 0x20000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(9, 373, 89);
			else if ((active8 & 0x20L) != 0x0L)
				return jjStartNfaWithStates_0(9, 517, 89);
			else if ((active9 & 0x40000000000L) != 0x0L)
				return jjStartNfaWithStates_0(9, 618, 89);
			return jjMoveStringLiteralDfa10_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x4000L, active5, 0x0L, active6, 0x0L, active7, 0x8000000000000000L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case '_':
			return jjMoveStringLiteralDfa10_0(active0, 0x100000L, active1, 0x803800fL, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x3fL, active7, 0x0L, active8, 0x0L, active9, 0x402000010L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_0(8, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_0(8, old0, old1, old2, old3, old4, old5, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_0(9, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
			return 10;
		}
		switch(curChar)
		{
		case 'A':
			return jjMoveStringLiteralDfa11_0(active0, 0x0L, active1, 0x800000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x4000L, active5, 0x0L, active6, 0x0L, active7, 0x4000000000000010L, active8, 0xc84881fff0000L, active9, 0x0L, active10, 0x0L);
		case 'C':
			if ((active8 & 0x400000000L) != 0x0L)
				return jjStartNfaWithStates_0(10, 546, 89);
			return jjMoveStringLiteralDfa11_0(active0, 0x100000L, active1, 0x8000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x10000000000000L, active7, 0x40L, active8, 0x1100000000000L, active9, 0x2000000L, active10, 0x0L);
		case 'D':
			if ((active3 & 0x80000L) != 0x0L)
				return jjStartNfaWithStates_0(10, 211, 89);
			else if ((active4 & 0x4000000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(10, 318, 89);
			else if ((active4 & 0x8000000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(10, 319, 89);
			else if ((active9 & 0x2000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(10, 625, 89);
			return jjMoveStringLiteralDfa11_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x80000L, active10, 0x0L);
		case 'E':
			if ((active0 & 0x800000000L) != 0x0L)
				return jjStartNfaWithStates_0(10, 35, 89);
			else if ((active1 & 0x100000L) != 0x0L)
				return jjStartNfaWithStates_0(10, 84, 89);
			else if ((active1 & 0x4000000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(10, 126, 89);
			else if ((active3 & 0x400L) != 0x0L)
				return jjStartNfaWithStates_0(10, 202, 89);
			else if ((active3 & 0x800000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(10, 251, 89);
			else if ((active7 & 0x10000000L) != 0x0L)
				return jjStartNfaWithStates_0(10, 476, 89);
			else if ((active7 & 0x400000000000L) != 0x0L)
				return jjStartNfaWithStates_0(10, 494, 89);
			else if ((active9 & 0x200L) != 0x0L)
				return jjStartNfaWithStates_0(10, 585, 89);
			else if ((active9 & 0x2000L) != 0x0L)
				return jjStartNfaWithStates_0(10, 589, 89);
			return jjMoveStringLiteralDfa11_0(active0, 0x0L, active1, 0x1000000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x8000000000000L, active5, 0x0L, active6, 0x4000000L, active7, 0x1000000000020L, active8, 0x2000000000000L, active9, 0xc000000000000000L, active10, 0x200003L);
		case 'F':
			return jjMoveStringLiteralDfa11_0(active0, 0x0L, active1, 0x10000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'G':
			if ((active6 & 0x1000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(10, 432, 89);
			return jjMoveStringLiteralDfa11_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x10000000000000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'H':
			if ((active0 & 0x4000000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(10, 62, 89);
			else if ((active6 & 0x400L) != 0x0L)
				return jjStartNfaWithStates_0(10, 394, 89);
			return jjMoveStringLiteralDfa11_0(active0, 0x0L, active1, 0x100000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x40000L, active8, 0x0L, active9, 0x10000000000L, active10, 0x0L);
		case 'I':
			return jjMoveStringLiteralDfa11_0(active0, 0x1080000000L, active1, 0x20000000100L, active2, 0x8000000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x500000L, active10, 0x0L);
		case 'L':
			if ((active1 & 0x4000000L) != 0x0L)
				return jjStartNfaWithStates_0(10, 90, 89);
			else if ((active8 & 0x1000L) != 0x0L)
				return jjStartNfaWithStates_0(10, 524, 89);
			return jjMoveStringLiteralDfa11_0(active0, 0x0L, active1, 0x40000000000001L, active2, 0x0L, active3, 0x4000000000000000L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x100040000000L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa11_0(active0, 0x100000000000000L, active1, 0x600000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x1L, active7, 0x100020000L, active8, 0x0L, active9, 0x8000000000L, active10, 0x0L);
		case 'N':
			if ((active2 & 0x8000000L) != 0x0L)
				return jjStartNfaWithStates_0(10, 155, 89);
			else if ((active8 & 0x100L) != 0x0L)
				return jjStartNfaWithStates_0(10, 520, 89);
			else if ((active9 & 0x8000000L) != 0x0L)
			{
				jjmatchedKind = 603;
				jjmatchedPos = 10;
			}
			else if ((active9 & 0x800000000L) != 0x0L)
				return jjStartNfaWithStates_0(10, 611, 89);
			return jjMoveStringLiteralDfa11_0(active0, 0x0L, active1, 0x8610000L, active2, 0x60000000018L, active3, 0x0L, active4, 0x400000000000000L, active5, 0x0L, active6, 0x40002L, active7, 0x0L, active8, 0x602000000000L, active9, 0x4000070000000L, active10, 0x0L);
		case 'O':
			return jjMoveStringLiteralDfa11_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x4L, active5, 0x0L, active6, 0x4L, active7, 0x0L, active8, 0x2L, active9, 0x200000L, active10, 0x0L);
		case 'P':
			if ((active8 & 0x800000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(10, 571, 89);
			return jjMoveStringLiteralDfa11_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x8000000000000000L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'Q':
			return jjMoveStringLiteralDfa11_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x80L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'R':
			if ((active1 & 0x1000000000L) != 0x0L)
				return jjStartNfaWithStates_0(10, 100, 89);
			else if ((active8 & 0x8000L) != 0x0L)
				return jjStartNfaWithStates_0(10, 527, 89);
			else if ((active8 & 0x10000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(10, 564, 89);
			else if ((active9 & 0x400L) != 0x0L)
				return jjStartNfaWithStates_0(10, 586, 89);
			return jjMoveStringLiteralDfa11_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x80000000e0000000L, active9, 0x400000010L, active10, 0x0L);
		case 'S':
			if ((active1 & 0x800000000L) != 0x0L)
				return jjStartNfaWithStates_0(10, 99, 89);
			else if ((active2 & 0x40000000L) != 0x0L)
				return jjStartNfaWithStates_0(10, 158, 89);
			else if ((active4 & 0x8000L) != 0x0L)
				return jjStartNfaWithStates_0(10, 271, 89);
			return jjMoveStringLiteralDfa11_0(active0, 0x0L, active1, 0x2001eL, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x2000000000L, active6, 0x38L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'T':
			if ((active4 & 0x10000L) != 0x0L)
			{
				jjmatchedKind = 272;
				jjmatchedPos = 10;
			}
			else if ((active8 & 0x10000000000L) != 0x0L)
				return jjStartNfaWithStates_0(10, 552, 89);
			else if ((active9 & 0x1L) != 0x0L)
				return jjStartNfaWithStates_0(10, 576, 89);
			return jjMoveStringLiteralDfa11_0(active0, 0x0L, active1, 0x2c000000000000L, active2, 0x20000000L, active3, 0x1000000000000L, active4, 0x800080000020000L, active5, 0x4000000000L, active6, 0x0L, active7, 0x10000L, active8, 0x0L, active9, 0x4000000000L, active10, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa11_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x80000000000L, active9, 0x0L, active10, 0x0L);
		case 'W':
			if ((active1 & 0x80000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(10, 119, 89);
			break;
		case 'X':
			return jjMoveStringLiteralDfa11_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x1000000000000000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'Y':
			if ((active0 & 0x4000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(10, 50, 89);
			else if ((active3 & 0x800000000000L) != 0x0L)
				return jjStartNfaWithStates_0(10, 239, 89);
			else if ((active8 & 0x20000000000L) != 0x0L)
				return jjStartNfaWithStates_0(10, 553, 89);
			break;
		case '_':
			return jjMoveStringLiteralDfa11_0(active0, 0x0L, active1, 0x740000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x30000L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_0(9, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_0(9, old0, old1, old2, old3, old4, old5, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_0(10, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
			return 11;
		}
		switch(curChar)
		{
		case 'A':
			if ((active7 & 0x100000000L) != 0x0L)
				return jjStartNfaWithStates_0(11, 480, 89);
			return jjMoveStringLiteralDfa12_0(active0, 0x100000L, active1, 0x14000000018000L, active2, 0x0L, active3, 0x0L, active4, 0x80000020000L, active5, 0x0L, active6, 0x2L, active7, 0x10000L, active8, 0x0L, active9, 0x4004000000000L, active10, 0x0L);
		case 'B':
			return jjMoveStringLiteralDfa12_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x20000000L, active9, 0x0L, active10, 0x0L);
		case 'C':
			return jjMoveStringLiteralDfa12_0(active0, 0x0L, active1, 0x100620000L, active2, 0x60000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x10000L, active7, 0x0L, active8, 0x40040000000L, active9, 0x0L, active10, 0x0L);
		case 'D':
			if ((active9 & 0x80000L) != 0x0L)
				return jjStartNfaWithStates_0(11, 595, 89);
			return jjMoveStringLiteralDfa12_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x20000L, active7, 0x0L, active8, 0x0L, active9, 0xc000000000000000L, active10, 0x3L);
		case 'E':
			if ((active0 & 0x100000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(11, 56, 89);
			else if ((active1 & 0x8000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(11, 115, 89);
			else if ((active1 & 0x40000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(11, 118, 89);
			else if ((active1 & 0x200000000000000L) != 0x0L)
			{
				jjmatchedKind = 121;
				jjmatchedPos = 11;
			}
			else if ((active3 & 0x4000000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(11, 254, 89);
			else if ((active7 & 0x20000L) != 0x0L)
				return jjStartNfaWithStates_0(11, 465, 89);
			else if ((active7 & 0x100000000000L) != 0x0L)
				return jjStartNfaWithStates_0(11, 492, 89);
			else if ((active7 & 0x8000000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(11, 511, 89);
			else if ((active9 & 0x8000000000L) != 0x0L)
				return jjStartNfaWithStates_0(11, 615, 89);
			return jjMoveStringLiteralDfa12_0(active0, 0x0L, active1, 0x50000000000000fL, active2, 0x0L, active3, 0x0L, active4, 0x800000000000000L, active5, 0x0L, active6, 0x10000000000000L, active7, 0x40000L, active8, 0x0L, active9, 0x10400000010L, active10, 0x0L);
		case 'F':
			return jjMoveStringLiteralDfa12_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x100000L, active10, 0x0L);
		case 'G':
			return jjMoveStringLiteralDfa12_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x400000000004000L, active5, 0x0L, active6, 0x4000000L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'H':
			if ((active1 & 0x20000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(11, 117, 89);
			else if ((active5 & 0x4000000000L) != 0x0L)
				return jjStartNfaWithStates_0(11, 358, 89);
			break;
		case 'I':
			return jjMoveStringLiteralDfa12_0(active0, 0x0L, active1, 0x0L, active2, 0x20000000L, active3, 0x1000000000000L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x8000000000000000L, active9, 0x0L, active10, 0x0L);
		case 'K':
			if ((active6 & 0x40000L) != 0x0L)
				return jjStartNfaWithStates_0(11, 402, 89);
			else if ((active8 & 0x2000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(11, 561, 89);
			break;
		case 'L':
			return jjMoveStringLiteralDfa12_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x80L, active8, 0x1fff0000L, active9, 0x0L, active10, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa12_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x4000000000000000L, active8, 0x8000000000L, active9, 0x0L, active10, 0x0L);
		case 'N':
			if ((active1 & 0x100L) != 0x0L)
				return jjStartNfaWithStates_0(11, 72, 89);
			else if ((active4 & 0x4L) != 0x0L)
				return jjStartNfaWithStates_0(11, 258, 89);
			else if ((active8 & 0x2L) != 0x0L)
				return jjStartNfaWithStates_0(11, 513, 89);
			return jjMoveStringLiteralDfa12_0(active0, 0x0L, active1, 0x800020240000000L, active2, 0x0L, active3, 0x0L, active4, 0x10000000000000L, active5, 0x0L, active6, 0x0L, active7, 0x20L, active8, 0x80000000L, active9, 0x400000L, active10, 0x0L);
		case 'O':
			return jjMoveStringLiteralDfa12_0(active0, 0x80000000L, active1, 0x0L, active2, 0x8000000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x1L, active7, 0x40000000L, active8, 0x1000000000000L, active9, 0x2000000L, active10, 0x0L);
		case 'P':
			return jjMoveStringLiteralDfa12_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x38L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'R':
			if ((active1 & 0x1000000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(11, 124, 89);
			else if ((active4 & 0x8000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(11, 307, 89);
			else if ((active7 & 0x1000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(11, 496, 89);
			else if ((active8 & 0x800000000L) != 0x0L)
				return jjStartNfaWithStates_0(11, 547, 89);
			else if ((active8 & 0x80000000000L) != 0x0L)
				return jjStartNfaWithStates_0(11, 555, 89);
			else if ((active8 & 0x4000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(11, 562, 89);
			return jjMoveStringLiteralDfa12_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x4L, active7, 0x10L, active8, 0x8900000000000L, active9, 0x0L, active10, 0x0L);
		case 'S':
			return jjMoveStringLiteralDfa12_0(active0, 0x0L, active1, 0x400000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x70000000L, active10, 0x0L);
		case 'T':
			if ((active4 & 0x1000000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(11, 316, 89);
			else if ((active8 & 0x2000000000L) != 0x0L)
				return jjStartNfaWithStates_0(11, 549, 89);
			else if ((active10 & 0x200000L) != 0x0L)
				return jjStartNfaWithStates_0(11, 661, 89);
			return jjMoveStringLiteralDfa12_0(active0, 0x1000000000L, active1, 0x10L, active2, 0x18L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x40L, active8, 0x400000000000L, active9, 0x0L, active10, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa12_0(active0, 0x0L, active1, 0x8000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x200000000000L, active9, 0x200000L, active10, 0x0L);
		case '_':
			return jjMoveStringLiteralDfa12_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x2000000000L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_0(10, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_0(10, old0, old1, old2, old3, old4, old5, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_0(11, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
			return 12;
		}
		switch(curChar)
		{
		case 'A':
			return jjMoveStringLiteralDfa13_0(active0, 0x0L, active1, 0x340000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'C':
			if ((active2 & 0x20000000L) != 0x0L)
				return jjStartNfaWithStates_0(12, 157, 89);
			return jjMoveStringLiteralDfa13_0(active0, 0x0L, active1, 0x400000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x80000000L, active9, 0x0L, active10, 0x0L);
		case 'D':
			return jjMoveStringLiteralDfa13_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x5L, active7, 0x10L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'E':
			if ((active7 & 0x4000000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(12, 510, 89);
			return jjMoveStringLiteralDfa13_0(active0, 0x0L, active1, 0x0L, active2, 0x18L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x4000038L, active7, 0x40L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'F':
			if ((active9 & 0x100000L) != 0x0L)
				return jjStartNfaWithStates_0(12, 596, 89);
			break;
		case 'G':
			if ((active1 & 0x20000000000L) != 0x0L)
				return jjStartNfaWithStates_0(12, 105, 89);
			else if ((active4 & 0x4000L) != 0x0L)
				return jjStartNfaWithStates_0(12, 270, 89);
			return jjMoveStringLiteralDfa13_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x20000L, active5, 0x0L, active6, 0x0L, active7, 0x40000020L, active8, 0x8000000000000000L, active9, 0x400000010L, active10, 0x0L);
		case 'H':
			if ((active8 & 0x400000000000L) != 0x0L)
				return jjStartNfaWithStates_0(12, 558, 89);
			return jjMoveStringLiteralDfa13_0(active0, 0x0L, active1, 0x20000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x40000000L, active9, 0x0L, active10, 0x0L);
		case 'I':
			return jjMoveStringLiteralDfa13_0(active0, 0x1000000000L, active1, 0x10L, active2, 0x0L, active3, 0x0L, active4, 0x10000000000000L, active5, 0x0L, active6, 0x20000L, active7, 0x0L, active8, 0x20000000L, active9, 0x0L, active10, 0x0L);
		case 'L':
			if ((active9 & 0x4000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(12, 626, 89);
			return jjMoveStringLiteralDfa13_0(active0, 0x0L, active1, 0x4000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x10000L, active8, 0x0L, active9, 0x4000000000L, active10, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa13_0(active0, 0x0L, active1, 0x100000008010000L, active2, 0x0L, active3, 0x0L, active4, 0x80000000000L, active5, 0x0L, active6, 0x2L, active7, 0x40000L, active8, 0x0L, active9, 0x10000000000L, active10, 0x0L);
		case 'N':
			if ((active0 & 0x80000000L) != 0x0L)
				return jjStartNfaWithStates_0(12, 31, 89);
			else if ((active2 & 0x8000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(12, 179, 89);
			return jjMoveStringLiteralDfa13_0(active0, 0x0L, active1, 0x1L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x1000000000000L, active9, 0x0L, active10, 0x0L);
		case 'O':
			return jjMoveStringLiteralDfa13_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x1000000000000L, active4, 0x0L, active5, 0x0L, active6, 0x10000L, active7, 0x0L, active8, 0x100000000000L, active9, 0x0L, active10, 0x0L);
		case 'P':
			if ((active8 & 0x8000000000L) != 0x0L)
				return jjStartNfaWithStates_0(12, 551, 89);
			return jjMoveStringLiteralDfa13_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x10000000000000L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'R':
			if ((active9 & 0x200000L) != 0x0L)
				return jjStartNfaWithStates_0(12, 597, 89);
			return jjMoveStringLiteralDfa13_0(active0, 0x100000L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x2000000000L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'S':
			return jjMoveStringLiteralDfa13_0(active0, 0x0L, active1, 0xc00000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x80L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'T':
			return jjMoveStringLiteralDfa13_0(active0, 0x0L, active1, 0x60800eL, active2, 0x60000000000L, active3, 0x0L, active4, 0xc00000000000000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0xa00000000000L, active9, 0x0L, active10, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa13_0(active0, 0x0L, active1, 0x10000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x2400000L, active10, 0x0L);
		case 'Y':
			if ((active8 & 0x8000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(12, 563, 89);
			break;
		case '_':
			return jjMoveStringLiteralDfa13_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x4001fff0000L, active9, 0xc000000070000000L, active10, 0x3L);
		default :
			break;
		}
		return jjStartNfa_0(11, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_0(11, old0, old1, old2, old3, old4, old5, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_0(12, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
			return 13;
		}
		switch(curChar)
		{
		case 'A':
			if ((active1 & 0x100000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(13, 120, 89);
			else if ((active7 & 0x40000L) != 0x0L)
				return jjStartNfaWithStates_0(13, 466, 89);
			else if ((active9 & 0x10000000000L) != 0x0L)
				return jjStartNfaWithStates_0(13, 616, 89);
			return jjMoveStringLiteralDfa14_0(active0, 0x0L, active1, 0x8000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x40000000L, active9, 0x10000000L, active10, 0x0L);
		case 'B':
			return jjMoveStringLiteralDfa14_0(active0, 0x0L, active1, 0x8000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'C':
			return jjMoveStringLiteralDfa14_0(active0, 0x0L, active1, 0x10L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x38L, active7, 0x0L, active8, 0x0L, active9, 0x20000000L, active10, 0x0L);
		case 'D':
			if ((active8 & 0x1000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(13, 560, 89);
			return jjMoveStringLiteralDfa14_0(active0, 0x100000L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0xf0000L, active9, 0x0L, active10, 0x0L);
		case 'E':
			if ((active1 & 0x10000L) != 0x0L)
				return jjStartNfaWithStates_0(13, 80, 89);
			else if ((active6 & 0x1L) != 0x0L)
				return jjStartNfaWithStates_0(13, 384, 89);
			else if ((active6 & 0x2L) != 0x0L)
				return jjStartNfaWithStates_0(13, 385, 89);
			else if ((active8 & 0x200000000000L) != 0x0L)
				return jjStartNfaWithStates_0(13, 557, 89);
			return jjMoveStringLiteralDfa14_0(active0, 0x0L, active1, 0x20000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x2000000000L, active6, 0x0L, active7, 0x0L, active8, 0x800000000000L, active9, 0x400000010L, active10, 0x0L);
		case 'F':
			return jjMoveStringLiteralDfa14_0(active0, 0x0L, active1, 0x800000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'G':
			if ((active4 & 0x20000L) != 0x0L)
				return jjStartNfaWithStates_0(13, 273, 89);
			return jjMoveStringLiteralDfa14_0(active0, 0x0L, active1, 0x1L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'H':
			if ((active4 & 0x400000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(13, 314, 89);
			return jjMoveStringLiteralDfa14_0(active0, 0x0L, active1, 0x400000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x80700000L, active9, 0x0L, active10, 0x0L);
		case 'I':
			return jjMoveStringLiteralDfa14_0(active0, 0x0L, active1, 0x600000L, active2, 0x60000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x4L, active7, 0x10L, active8, 0x8000000000000000L, active9, 0x0L, active10, 0x0L);
		case 'L':
			return jjMoveStringLiteralDfa14_0(active0, 0x0L, active1, 0x10000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa14_0(active0, 0x0L, active1, 0x240000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x3800000L, active9, 0x0L, active10, 0x0L);
		case 'N':
			if ((active3 & 0x1000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(13, 240, 89);
			return jjMoveStringLiteralDfa14_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x10000L, active7, 0x0L, active8, 0x20000000L, active9, 0x2000000L, active10, 0x0L);
		case 'O':
			return jjMoveStringLiteralDfa14_0(active0, 0x1000000000L, active1, 0x4000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x10000L, active8, 0x0L, active9, 0x4000000000L, active10, 0x0L);
		case 'P':
			if ((active4 & 0x80000000000L) != 0x0L)
				return jjStartNfaWithStates_0(13, 299, 89);
			break;
		case 'R':
			return jjMoveStringLiteralDfa14_0(active0, 0x0L, active1, 0x0L, active2, 0x18L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x40000000L, active10, 0x0L);
		case 'S':
			if ((active7 & 0x40000000L) != 0x0L)
				return jjStartNfaWithStates_0(13, 478, 89);
			return jjMoveStringLiteralDfa14_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x20000L, active7, 0x0L, active8, 0x140004000000L, active9, 0x0L, active10, 0x0L);
		case 'T':
			if ((active6 & 0x10000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(13, 436, 89);
			return jjMoveStringLiteralDfa14_0(active0, 0x0L, active1, 0x400000100000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0xe0L, active8, 0x0L, active9, 0xc000000000400000L, active10, 0x3L);
		case 'X':
			if ((active6 & 0x4000000L) != 0x0L)
				return jjStartNfaWithStates_0(13, 410, 89);
			break;
		case 'Y':
			return jjMoveStringLiteralDfa14_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x18000000L, active9, 0x0L, active10, 0x0L);
		case 'Z':
			return jjMoveStringLiteralDfa14_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x10000000000000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case '_':
			return jjMoveStringLiteralDfa14_0(active0, 0x0L, active1, 0xeL, active2, 0x0L, active3, 0x0L, active4, 0x800000000000000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_0(12, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_0(12, old0, old1, old2, old3, old4, old5, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_0(13, active0, active1, active2, 0L, active4, active5, active6, active7, active8, active9, active10, 0L);
			return 14;
		}
		switch(curChar)
		{
		case 'A':
			return jjMoveStringLiteralDfa15_0(active0, 0x0L, active1, 0x400000100000000L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x80L, active8, 0xa00f0000L, active9, 0x0L, active10, 0x0L);
		case 'C':
			if ((active6 & 0x20000L) != 0x0L)
				return jjStartNfaWithStates_0(14, 401, 89);
			return jjMoveStringLiteralDfa15_0(active0, 0x0L, active1, 0x2L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x10000000L, active10, 0x0L);
		case 'E':
			if ((active1 & 0x40000000L) != 0x0L)
				return jjStartNfaWithStates_0(14, 94, 89);
			else if ((active1 & 0x200000000L) != 0x0L)
				return jjStartNfaWithStates_0(14, 97, 89);
			else if ((active4 & 0x10000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(14, 308, 89);
			else if ((active9 & 0x400000L) != 0x0L)
				return jjStartNfaWithStates_0(14, 598, 89);
			return jjMoveStringLiteralDfa15_0(active0, 0x0L, active1, 0x408000000L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x14001c000000L, active9, 0x0L, active10, 0x0L);
		case 'G':
			if ((active1 & 0x4000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(14, 114, 89);
			else if ((active7 & 0x10000L) != 0x0L)
				return jjStartNfaWithStates_0(14, 464, 89);
			else if ((active9 & 0x4000000000L) != 0x0L)
				return jjStartNfaWithStates_0(14, 614, 89);
			return jjMoveStringLiteralDfa15_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active5, 0x2000000000L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'H':
			if ((active7 & 0x20L) != 0x0L)
				return jjStartNfaWithStates_0(14, 453, 89);
			break;
		case 'I':
			return jjMoveStringLiteralDfa15_0(active0, 0x100000L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x38L, active7, 0x0L, active8, 0x1800000L, active9, 0x0L, active10, 0x0L);
		case 'L':
			return jjMoveStringLiteralDfa15_0(active0, 0x0L, active1, 0x8000L, active2, 0x0L, active4, 0x800000000000000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa15_0(active0, 0x0L, active1, 0x20000L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'N':
			if ((active0 & 0x1000000000L) != 0x0L)
				return jjStartNfaWithStates_0(14, 36, 89);
			else if ((active8 & 0x8000000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(14, 575, 89);
			return jjMoveStringLiteralDfa15_0(active0, 0x0L, active1, 0x4L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x4L, active7, 0x10L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'O':
			return jjMoveStringLiteralDfa15_0(active0, 0x0L, active1, 0x800000000600000L, active2, 0x60000000000L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x2700000L, active9, 0x60000000L, active10, 0x0L);
		case 'R':
			if ((active8 & 0x40000000L) != 0x0L)
				return jjStartNfaWithStates_0(14, 542, 89);
			else if ((active8 & 0x800000000000L) != 0x0L)
				return jjStartNfaWithStates_0(14, 559, 89);
			break;
		case 'S':
			if ((active1 & 0x10L) != 0x0L)
				return jjStartNfaWithStates_0(14, 68, 89);
			return jjMoveStringLiteralDfa15_0(active0, 0x0L, active1, 0x8L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'T':
			if ((active6 & 0x10000L) != 0x0L)
				return jjStartNfaWithStates_0(14, 400, 89);
			else if ((active9 & 0x2000000L) != 0x0L)
				return jjStartNfaWithStates_0(14, 601, 89);
			return jjMoveStringLiteralDfa15_0(active0, 0x0L, active1, 0x10000000000001L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'V':
			return jjMoveStringLiteralDfa15_0(active0, 0x0L, active1, 0x0L, active2, 0x18L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'X':
			if ((active9 & 0x10L) != 0x0L)
				return jjStartNfaWithStates_0(14, 580, 89);
			else if ((active9 & 0x400000000L) != 0x0L)
				return jjStartNfaWithStates_0(14, 610, 89);
			break;
		case 'Y':
			return jjMoveStringLiteralDfa15_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0xc000000000000000L, active10, 0x3L);
		case '_':
			return jjMoveStringLiteralDfa15_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x40L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_0(13, active0, active1, active2, 0L, active4, active5, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1, long old2, long active2, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_0(13, old0, old1, old2, 0L, old4, old5, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_0(14, active0, active1, active2, 0L, active4, active5, active6, active7, active8, active9, active10, 0L);
			return 15;
		}
		switch(curChar)
		{
		case 'A':
			if ((active1 & 0x20000L) != 0x0L)
				return jjStartNfaWithStates_0(15, 81, 89);
			return jjMoveStringLiteralDfa16_0(active0, 0x0L, active1, 0x6L, active2, 0x18L, active4, 0x0L, active5, 0x0L, active6, 0x4L, active7, 0x10L, active8, 0x18000000L, active9, 0x0L, active10, 0x0L);
		case 'C':
			return jjMoveStringLiteralDfa16_0(active0, 0x0L, active1, 0x8L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x140004000000L, active9, 0x0L, active10, 0x0L);
		case 'E':
			return jjMoveStringLiteralDfa16_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x800000000000000L, active5, 0x2000000000L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'F':
			return jjMoveStringLiteralDfa16_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x38L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'H':
			if ((active1 & 0x1L) != 0x0L)
				return jjStartNfaWithStates_0(15, 64, 89);
			break;
		case 'L':
			return jjMoveStringLiteralDfa16_0(active0, 0x0L, active1, 0x100000000L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x40L, active8, 0x0L, active9, 0x40000000L, active10, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa16_0(active0, 0x0L, active1, 0x400000400000000L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x20000000L, active10, 0x0L);
		case 'N':
			if ((active1 & 0x200000L) != 0x0L)
			{
				jjmatchedKind = 85;
				jjmatchedPos = 15;
			}
			else if ((active2 & 0x20000000000L) != 0x0L)
			{
				jjmatchedKind = 169;
				jjmatchedPos = 15;
			}
			return jjMoveStringLiteralDfa16_0(active0, 0x100000L, active1, 0x400000L, active2, 0x40000000000L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x3800000L, active9, 0x0L, active10, 0x0L);
		case 'O':
			return jjMoveStringLiteralDfa16_0(active0, 0x0L, active1, 0x8000L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'P':
			return jjMoveStringLiteralDfa16_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0xc000000000000000L, active10, 0x3L);
		case 'R':
			if ((active1 & 0x8000000L) != 0x0L)
				return jjStartNfaWithStates_0(15, 91, 89);
			else if ((active8 & 0x80000000L) != 0x0L)
				return jjStartNfaWithStates_0(15, 543, 89);
			return jjMoveStringLiteralDfa16_0(active0, 0x0L, active1, 0x800000000000000L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x20000000L, active9, 0x0L, active10, 0x0L);
		case 'T':
			return jjMoveStringLiteralDfa16_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x80L, active8, 0x0L, active9, 0x10000000L, active10, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa16_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x700000L, active9, 0x0L, active10, 0x0L);
		case 'Y':
			if ((active8 & 0x10000L) != 0x0L)
			{
				jjmatchedKind = 528;
				jjmatchedPos = 15;
			}
			return jjMoveStringLiteralDfa16_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0xe0000L, active9, 0x0L, active10, 0x0L);
		case '_':
			return jjMoveStringLiteralDfa16_0(active0, 0x0L, active1, 0x10000000000000L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_0(14, active0, active1, active2, 0L, active4, active5, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1, long old2, long active2, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_0(14, old0, old1, old2, 0L, old4, old5, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_0(15, active0, active1, active2, 0L, active4, active5, active6, active7, active8, active9, active10, 0L);
			return 16;
		}
		switch(curChar)
		{
		case 'A':
			if ((active1 & 0x400000000L) != 0x0L)
				return jjStartNfaWithStates_0(16, 98, 89);
			return jjMoveStringLiteralDfa17_0(active0, 0x100000L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'E':
			if ((active7 & 0x80L) != 0x0L)
				return jjStartNfaWithStates_0(16, 455, 89);
			return jjMoveStringLiteralDfa17_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x40L, active8, 0x0L, active9, 0xc000000000000000L, active10, 0x3L);
		case 'G':
			if ((active1 & 0x8000L) != 0x0L)
				return jjStartNfaWithStates_0(16, 79, 89);
			break;
		case 'H':
			return jjMoveStringLiteralDfa17_0(active0, 0x0L, active1, 0x8L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'I':
			return jjMoveStringLiteralDfa17_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x38L, active7, 0x0L, active8, 0x0L, active9, 0x10000000L, active10, 0x0L);
		case 'L':
			return jjMoveStringLiteralDfa17_0(active0, 0x0L, active1, 0x0L, active2, 0x18L, active4, 0x0L, active5, 0x0L, active6, 0x4L, active7, 0x10L, active8, 0x0L, active9, 0x40000000L, active10, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa17_0(active0, 0x0L, active1, 0x800000000000004L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x20000000L, active10, 0x0L);
		case 'N':
			return jjMoveStringLiteralDfa17_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x800000000000000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'O':
			return jjMoveStringLiteralDfa17_0(active0, 0x0L, active1, 0x100000000L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x140004000000L, active9, 0x0L, active10, 0x0L);
		case 'P':
			if ((active1 & 0x400000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(16, 122, 89);
			break;
		case 'R':
			if ((active8 & 0x100000L) != 0x0L)
			{
				jjmatchedKind = 532;
				jjmatchedPos = 16;
			}
			else if ((active8 & 0x8000000L) != 0x0L)
			{
				jjmatchedKind = 539;
				jjmatchedPos = 16;
			}
			return jjMoveStringLiteralDfa17_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x10600000L, active9, 0x0L, active10, 0x0L);
		case 'T':
			return jjMoveStringLiteralDfa17_0(active0, 0x0L, active1, 0x10000000000002L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x2000000L, active9, 0x0L, active10, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa17_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x1800000L, active9, 0x0L, active10, 0x0L);
		case 'X':
			if ((active5 & 0x2000000000L) != 0x0L)
				return jjStartNfaWithStates_0(16, 357, 89);
			break;
		case 'Y':
			if ((active8 & 0x20000000L) != 0x0L)
				return jjStartNfaWithStates_0(16, 541, 89);
			break;
		case '_':
			return jjMoveStringLiteralDfa17_0(active0, 0x0L, active1, 0x400000L, active2, 0x40000000000L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0xe0000L, active9, 0x0L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_0(15, active0, active1, active2, 0L, active4, active5, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1, long old2, long active2, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_0(15, old0, old1, old2, 0L, old4, old5, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_0(16, active0, active1, active2, 0L, active4, 0L, active6, active7, active8, active9, active10, 0L);
			return 17;
		}
		switch(curChar)
		{
		case 'A':
			return jjMoveStringLiteralDfa18_0(active0, 0x0L, active1, 0x2L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'C':
			return jjMoveStringLiteralDfa18_0(active0, 0x0L, active1, 0x400000L, active2, 0x40000000000L, active4, 0x0L, active6, 0x38L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'E':
			if ((active1 & 0x4L) != 0x0L)
				return jjStartNfaWithStates_0(17, 66, 89);
			return jjMoveStringLiteralDfa18_0(active0, 0x0L, active1, 0x8L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x40000000L, active10, 0x0L);
		case 'G':
			if ((active1 & 0x100000000L) != 0x0L)
				return jjStartNfaWithStates_0(17, 96, 89);
			return jjMoveStringLiteralDfa18_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x800000000000000L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'H':
			if ((active8 & 0x2000000L) != 0x0L)
				return jjStartNfaWithStates_0(17, 537, 89);
			break;
		case 'I':
			return jjMoveStringLiteralDfa18_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x10L, active8, 0x0L, active9, 0x20000000L, active10, 0x0L);
		case 'L':
			return jjMoveStringLiteralDfa18_0(active0, 0x100000L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'N':
			return jjMoveStringLiteralDfa18_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x40L, active8, 0x140004000000L, active9, 0x0L, active10, 0x0L);
		case 'R':
			return jjMoveStringLiteralDfa18_0(active0, 0x0L, active1, 0x10000000000000L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'T':
			return jjMoveStringLiteralDfa18_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x18e0000L, active9, 0x0L, active10, 0x0L);
		case 'V':
			return jjMoveStringLiteralDfa18_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x10000000L, active10, 0x0L);
		case '_':
			return jjMoveStringLiteralDfa18_0(active0, 0x0L, active1, 0x800000000000000L, active2, 0x18L, active4, 0x0L, active6, 0x4L, active7, 0x0L, active8, 0x10600000L, active9, 0xc000000000000000L, active10, 0x3L);
		default :
			break;
		}
		return jjStartNfa_0(16, active0, active1, active2, 0L, active4, 0L, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa18_0(long old0, long active0, long old1, long active1, long old2, long active2, long old4, long active4, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active4 &= old4) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_0(16, old0, old1, old2, 0L, old4, 0L, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_0(17, active0, active1, active2, 0L, active4, 0L, active6, active7, active8, active9, active10, 0L);
			return 18;
		}
		switch(curChar)
		{
		case 'A':
			return jjMoveStringLiteralDfa19_0(active0, 0x0L, active1, 0x10000000000000L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'C':
			return jjMoveStringLiteralDfa19_0(active0, 0x0L, active1, 0x0L, active2, 0x8L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0xc000000000000000L, active10, 0x0L);
		case 'D':
			if ((active8 & 0x4000000L) != 0x0L)
				return jjStartNfaWithStates_0(18, 538, 89);
			else if ((active8 & 0x40000000000L) != 0x0L)
				return jjStartNfaWithStates_0(18, 554, 89);
			else if ((active8 & 0x100000000000L) != 0x0L)
				return jjStartNfaWithStates_0(18, 556, 89);
			return jjMoveStringLiteralDfa19_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x40000000L, active10, 0x0L);
		case 'E':
			if ((active8 & 0x800000L) != 0x0L)
			{
				jjmatchedKind = 535;
				jjmatchedPos = 18;
			}
			else if ((active9 & 0x10000000L) != 0x0L)
				return jjStartNfaWithStates_0(18, 604, 89);
			return jjMoveStringLiteralDfa19_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x1000000L, active9, 0x0L, active10, 0x0L);
		case 'G':
			return jjMoveStringLiteralDfa19_0(active0, 0x0L, active1, 0x800000000000000L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x40L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'I':
			return jjMoveStringLiteralDfa19_0(active0, 0x100000L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'L':
			return jjMoveStringLiteralDfa19_0(active0, 0x0L, active1, 0x2L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa19_0(active0, 0x0L, active1, 0x8L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'N':
			return jjMoveStringLiteralDfa19_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x1L);
		case 'O':
			return jjMoveStringLiteralDfa19_0(active0, 0x0L, active1, 0x400000L, active2, 0x40000000000L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0xe0000L, active9, 0x0L, active10, 0x0L);
		case 'P':
			return jjMoveStringLiteralDfa19_0(active0, 0x0L, active1, 0x0L, active2, 0x10L, active4, 0x0L, active6, 0x4L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'S':
			return jjMoveStringLiteralDfa19_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x2L);
		case 'T':
			return jjMoveStringLiteralDfa19_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x800000000000000L, active6, 0x0L, active7, 0x10L, active8, 0x10600000L, active9, 0x20000000L, active10, 0x0L);
		case '_':
			return jjMoveStringLiteralDfa19_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x38L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_0(17, active0, active1, active2, 0L, active4, 0L, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa19_0(long old0, long active0, long old1, long active1, long old2, long active2, long old4, long active4, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active4 &= old4) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_0(17, old0, old1, old2, 0L, old4, 0L, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_0(18, active0, active1, active2, 0L, active4, 0L, active6, active7, active8, active9, active10, 0L);
			return 19;
		}
		switch(curChar)
		{
		case 'A':
			if ((active1 & 0x8L) != 0x0L)
				return jjStartNfaWithStates_0(19, 67, 89);
			return jjMoveStringLiteralDfa20_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x4000000000000000L, active10, 0x1L);
		case 'C':
			return jjMoveStringLiteralDfa20_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x8L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x2L);
		case 'D':
			return jjMoveStringLiteralDfa20_0(active0, 0x0L, active1, 0x400000L, active2, 0x40000000000L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'H':
			if ((active4 & 0x800000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(19, 315, 89);
			break;
		case 'N':
			return jjMoveStringLiteralDfa20_0(active0, 0x0L, active1, 0x10000000000000L, active2, 0x0L, active4, 0x0L, active6, 0x10L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'O':
			return jjMoveStringLiteralDfa20_0(active0, 0x0L, active1, 0x2L, active2, 0x8L, active4, 0x0L, active6, 0x4L, active7, 0x0L, active8, 0x10600000L, active9, 0x8000000000000000L, active10, 0x0L);
		case 'R':
			return jjMoveStringLiteralDfa20_0(active0, 0x0L, active1, 0x800000000000000L, active2, 0x10L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'S':
			return jjMoveStringLiteralDfa20_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x20L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'T':
			return jjMoveStringLiteralDfa20_0(active0, 0x100000L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x40L, active8, 0x0L, active9, 0x20000000L, active10, 0x0L);
		case 'Y':
			if ((active7 & 0x10L) != 0x0L)
				return jjStartNfaWithStates_0(19, 452, 89);
			break;
		case '_':
			return jjMoveStringLiteralDfa20_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x10e0000L, active9, 0x40000000L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_0(18, active0, active1, active2, 0L, active4, 0L, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa20_0(long old0, long active0, long old1, long active1, long old2, long active2, long old4, long active4, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active4 &= old4) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_0(18, old0, old1, old2, 0L, old4, 0L, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_0(19, active0, active1, active2, 0L, 0L, 0L, active6, active7, active8, active9, active10, 0L);
			return 20;
		}
		switch(curChar)
		{
		case 'A':
			return jjMoveStringLiteralDfa21_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active6, 0x18L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'B':
			return jjMoveStringLiteralDfa21_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x40000000L, active10, 0x0L);
		case 'C':
			return jjMoveStringLiteralDfa21_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active6, 0x20L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'D':
			return jjMoveStringLiteralDfa21_0(active0, 0x0L, active1, 0x0L, active2, 0x8L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x8000000000000000L, active10, 0x0L);
		case 'E':
			if ((active1 & 0x400000L) != 0x0L)
				return jjStartNfaWithStates_0(20, 86, 89);
			else if ((active2 & 0x40000000000L) != 0x0L)
				return jjStartNfaWithStates_0(20, 170, 89);
			return jjMoveStringLiteralDfa21_0(active0, 0x0L, active1, 0x0L, active2, 0x10L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x20000000L, active10, 0x0L);
		case 'G':
			if ((active1 & 0x2L) != 0x0L)
				return jjStartNfaWithStates_0(20, 65, 89);
			break;
		case 'H':
			if ((active7 & 0x40L) != 0x0L)
				return jjStartNfaWithStates_0(20, 454, 89);
			return jjMoveStringLiteralDfa21_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x20000L, active9, 0x0L, active10, 0x2L);
		case 'M':
			return jjMoveStringLiteralDfa21_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x40000L, active9, 0x0L, active10, 0x1L);
		case 'O':
			return jjMoveStringLiteralDfa21_0(active0, 0x0L, active1, 0x800000000000000L, active2, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'S':
			return jjMoveStringLiteralDfa21_0(active0, 0x0L, active1, 0x10000000000000L, active2, 0x0L, active6, 0x4L, active7, 0x0L, active8, 0x80000L, active9, 0x0L, active10, 0x0L);
		case 'T':
			return jjMoveStringLiteralDfa21_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x1000000L, active9, 0x4000000000000000L, active10, 0x0L);
		case 'Y':
			if ((active0 & 0x100000L) != 0x0L)
				return jjStartNfaWithStates_0(20, 20, 89);
			break;
		case '_':
			return jjMoveStringLiteralDfa21_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x10600000L, active9, 0x0L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_0(19, active0, active1, active2, 0L, 0L, 0L, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa21_0(long old0, long active0, long old1, long active1, long old2, long active2, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_0(19, old0, old1, old2, 0L, 0L, 0L, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_0(20, 0L, active1, active2, 0L, 0L, 0L, active6, 0L, active8, active9, active10, 0L);
			return 21;
		}
		switch(curChar)
		{
		case 'A':
			return jjMoveStringLiteralDfa22_0(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x0L, active9, 0x4000000040000000L, active10, 0x0L);
		case 'C':
			return jjMoveStringLiteralDfa22_0(active1, 0x0L, active2, 0x10L, active6, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'D':
			if ((active9 & 0x20000000L) != 0x0L)
				return jjStartNfaWithStates_0(21, 605, 89);
			break;
		case 'E':
			if ((active2 & 0x8L) != 0x0L)
				return jjStartNfaWithStates_0(21, 131, 89);
			else if ((active9 & 0x8000000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(21, 639, 89);
			else if ((active10 & 0x1L) != 0x0L)
				return jjStartNfaWithStates_0(21, 640, 89);
			return jjMoveStringLiteralDfa22_0(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x80000L, active9, 0x0L, active10, 0x2L);
		case 'F':
			return jjMoveStringLiteralDfa22_0(active1, 0x10000000000000L, active2, 0x0L, active6, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'H':
			return jjMoveStringLiteralDfa22_0(active1, 0x0L, active2, 0x0L, active6, 0x20L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'I':
			return jjMoveStringLiteralDfa22_0(active1, 0x0L, active2, 0x0L, active6, 0x4L, active8, 0x40000L, active9, 0x0L, active10, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa22_0(active1, 0x0L, active2, 0x0L, active6, 0x10L, active8, 0x10200000L, active9, 0x0L, active10, 0x0L);
		case 'O':
			return jjMoveStringLiteralDfa22_0(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x1020000L, active9, 0x0L, active10, 0x0L);
		case 'S':
			return jjMoveStringLiteralDfa22_0(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x400000L, active9, 0x0L, active10, 0x0L);
		case 'T':
			return jjMoveStringLiteralDfa22_0(active1, 0x0L, active2, 0x0L, active6, 0x8L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa22_0(active1, 0x800000000000000L, active2, 0x0L, active6, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_0(20, 0L, active1, active2, 0L, 0L, 0L, active6, 0L, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa22_0(long old1, long active1, long old2, long active2, long old6, long active6, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active1 &= old1) | (active2 &= old2) | (active6 &= old6) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_0(20, 0L, old1, old2, 0L, 0L, 0L, old6, 0L, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_0(21, 0L, active1, active2, 0L, 0L, 0L, active6, 0L, active8, active9, active10, 0L);
			return 22;
		}
		switch(curChar)
		{
		case 'A':
			return jjMoveStringLiteralDfa23_0(active1, 0x0L, active2, 0x0L, active6, 0x8L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'C':
			return jjMoveStringLiteralDfa23_0(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x80000L, active9, 0x40000000L, active10, 0x0L);
		case 'E':
			if ((active6 & 0x10L) != 0x0L)
				return jjStartNfaWithStates_0(22, 388, 89);
			return jjMoveStringLiteralDfa23_0(active1, 0x0L, active2, 0x0L, active6, 0x20L, active8, 0x400000L, active9, 0x0L, active10, 0x0L);
		case 'I':
			return jjMoveStringLiteralDfa23_0(active1, 0x0L, active2, 0x10L, active6, 0x0L, active8, 0x200000L, active9, 0x0L, active10, 0x0L);
		case 'L':
			return jjMoveStringLiteralDfa23_0(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x0L, active9, 0x4000000000000000L, active10, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa23_0(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x2L);
		case 'N':
			return jjMoveStringLiteralDfa23_0(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x40000L, active9, 0x0L, active10, 0x0L);
		case 'O':
			return jjMoveStringLiteralDfa23_0(active1, 0x10000000000000L, active2, 0x0L, active6, 0x0L, active8, 0x10000000L, active9, 0x0L, active10, 0x0L);
		case 'P':
			return jjMoveStringLiteralDfa23_0(active1, 0x800000000000000L, active2, 0x0L, active6, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'T':
			return jjMoveStringLiteralDfa23_0(active1, 0x0L, active2, 0x0L, active6, 0x4L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa23_0(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x20000L, active9, 0x0L, active10, 0x0L);
		case '_':
			return jjMoveStringLiteralDfa23_0(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x1000000L, active9, 0x0L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_0(21, 0L, active1, active2, 0L, 0L, 0L, active6, 0L, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa23_0(long old1, long active1, long old2, long active2, long old6, long active6, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active1 &= old1) | (active2 &= old2) | (active6 &= old6) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_0(21, 0L, old1, old2, 0L, 0L, 0L, old6, 0L, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_0(22, 0L, active1, active2, 0L, 0L, 0L, active6, 0L, active8, active9, active10, 0L);
			return 23;
		}
		switch(curChar)
		{
		case 'A':
			if ((active10 & 0x2L) != 0x0L)
				return jjStartNfaWithStates_0(23, 641, 89);
			break;
		case 'C':
			return jjMoveStringLiteralDfa24_0(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x400000L, active9, 0x0L, active10, 0x0L);
		case 'I':
			return jjMoveStringLiteralDfa24_0(active1, 0x0L, active2, 0x0L, active6, 0x4L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'K':
			if ((active9 & 0x40000000L) != 0x0L)
				return jjStartNfaWithStates_0(23, 606, 89);
			break;
		case 'L':
			return jjMoveStringLiteralDfa24_0(active1, 0x0L, active2, 0x0L, active6, 0x8L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa24_0(active1, 0x0L, active2, 0x0L, active6, 0x20L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'N':
			return jjMoveStringLiteralDfa24_0(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x10200000L, active9, 0x0L, active10, 0x0L);
		case 'O':
			return jjMoveStringLiteralDfa24_0(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x80000L, active9, 0x4000000000000000L, active10, 0x0L);
		case 'R':
			if ((active8 & 0x20000L) != 0x0L)
				return jjStartNfaWithStates_0(23, 529, 89);
			return jjMoveStringLiteralDfa24_0(active1, 0x10000000000000L, active2, 0x0L, active6, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'S':
			return jjMoveStringLiteralDfa24_0(active1, 0x0L, active2, 0x10L, active6, 0x0L, active8, 0x1000000L, active9, 0x0L, active10, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa24_0(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x40000L, active9, 0x0L, active10, 0x0L);
		case '_':
			return jjMoveStringLiteralDfa24_0(active1, 0x800000000000000L, active2, 0x0L, active6, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_0(22, 0L, active1, active2, 0L, 0L, 0L, active6, 0L, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa24_0(long old1, long active1, long old2, long active2, long old6, long active6, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active1 &= old1) | (active2 &= old2) | (active6 &= old6) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_0(22, 0L, old1, old2, 0L, 0L, 0L, old6, 0L, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_0(23, 0L, active1, active2, 0L, 0L, 0L, active6, 0L, active8, active9, 0L, 0L);
			return 24;
		}
		switch(curChar)
		{
		case 'A':
			if ((active6 & 0x20L) != 0x0L)
				return jjStartNfaWithStates_0(24, 389, 89);
			break;
		case 'E':
			return jjMoveStringLiteralDfa25_0(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x1000000L, active9, 0x0L);
		case 'F':
			return jjMoveStringLiteralDfa25_0(active1, 0x800000000000000L, active2, 0x0L, active6, 0x0L, active8, 0x0L, active9, 0x0L);
		case 'G':
			if ((active9 & 0x4000000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(24, 638, 89);
			break;
		case 'I':
			return jjMoveStringLiteralDfa25_0(active1, 0x0L, active2, 0x10L, active6, 0x0L, active8, 0x0L, active9, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa25_0(active1, 0x10000000000000L, active2, 0x0L, active6, 0x0L, active8, 0x0L, active9, 0x0L);
		case 'N':
			return jjMoveStringLiteralDfa25_0(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x80000L, active9, 0x0L);
		case 'O':
			return jjMoveStringLiteralDfa25_0(active1, 0x0L, active2, 0x0L, active6, 0xcL, active8, 0x400000L, active9, 0x0L);
		case 'T':
			return jjMoveStringLiteralDfa25_0(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x10040000L, active9, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa25_0(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x200000L, active9, 0x0L);
		default :
			break;
		}
		return jjStartNfa_0(23, 0L, active1, active2, 0L, 0L, 0L, active6, 0L, active8, active9, 0L, 0L);
	}
	private int jjMoveStringLiteralDfa25_0(long old1, long active1, long old2, long active2, long old6, long active6, long old8, long active8, long old9, long active9){
		if (((active1 &= old1) | (active2 &= old2) | (active6 &= old6) | (active8 &= old8) | (active9 &= old9)) == 0L)
			return jjStartNfa_0(23, 0L, old1, old2, 0L, 0L, 0L, old6, 0L, old8, old9, 0L, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_0(24, 0L, active1, active2, 0L, 0L, 0L, active6, 0L, active8, 0L, 0L, 0L);
			return 25;
		}
		switch(curChar)
		{
		case 'C':
			return jjMoveStringLiteralDfa26_0(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x1000000L);
		case 'D':
			if ((active8 & 0x80000L) != 0x0L)
				return jjStartNfaWithStates_0(25, 531, 89);
			break;
		case 'E':
			if ((active8 & 0x40000L) != 0x0L)
				return jjStartNfaWithStates_0(25, 530, 89);
			break;
		case 'G':
			if ((active6 & 0x8L) != 0x0L)
				return jjStartNfaWithStates_0(25, 387, 89);
			break;
		case 'H':
			if ((active8 & 0x10000000L) != 0x0L)
				return jjStartNfaWithStates_0(25, 540, 89);
			break;
		case 'N':
			if ((active6 & 0x4L) != 0x0L)
				return jjStartNfaWithStates_0(25, 386, 89);
			return jjMoveStringLiteralDfa26_0(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x400000L);
		case 'O':
			return jjMoveStringLiteralDfa26_0(active1, 0x800000000000000L, active2, 0x10L, active6, 0x0L, active8, 0x0L);
		case 'T':
			return jjMoveStringLiteralDfa26_0(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x200000L);
		case '_':
			return jjMoveStringLiteralDfa26_0(active1, 0x10000000000000L, active2, 0x0L, active6, 0x0L, active8, 0x0L);
		default :
			break;
		}
		return jjStartNfa_0(24, 0L, active1, active2, 0L, 0L, 0L, active6, 0L, active8, 0L, 0L, 0L);
	}
	private int jjMoveStringLiteralDfa26_0(long old1, long active1, long old2, long active2, long old6, long active6, long old8, long active8){
		if (((active1 &= old1) | (active2 &= old2) | (active6 &= old6) | (active8 &= old8)) == 0L)
			return jjStartNfa_0(24, 0L, old1, old2, 0L, 0L, 0L, old6, 0L, old8, 0L, 0L, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_0(25, 0L, active1, active2, 0L, 0L, 0L, 0L, 0L, active8, 0L, 0L, 0L);
			return 26;
		}
		switch(curChar)
		{
		case 'D':
			if ((active8 & 0x400000L) != 0x0L)
				return jjStartNfaWithStates_0(26, 534, 89);
			break;
		case 'E':
			if ((active8 & 0x200000L) != 0x0L)
				return jjStartNfaWithStates_0(26, 533, 89);
			break;
		case 'G':
			return jjMoveStringLiteralDfa27_0(active1, 0x10000000000000L, active2, 0x0L, active8, 0x0L);
		case 'N':
			if ((active2 & 0x10L) != 0x0L)
				return jjStartNfaWithStates_0(26, 132, 89);
			break;
		case 'O':
			return jjMoveStringLiteralDfa27_0(active1, 0x0L, active2, 0x0L, active8, 0x1000000L);
		case 'R':
			return jjMoveStringLiteralDfa27_0(active1, 0x800000000000000L, active2, 0x0L, active8, 0x0L);
		default :
			break;
		}
		return jjStartNfa_0(25, 0L, active1, active2, 0L, 0L, 0L, 0L, 0L, active8, 0L, 0L, 0L);
	}
	private int jjMoveStringLiteralDfa27_0(long old1, long active1, long old2, long active2, long old8, long active8){
		if (((active1 &= old1) | (active2 &= old2) | (active8 &= old8)) == 0L)
			return jjStartNfa_0(25, 0L, old1, old2, 0L, 0L, 0L, 0L, 0L, old8, 0L, 0L, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_0(26, 0L, active1, 0L, 0L, 0L, 0L, 0L, 0L, active8, 0L, 0L, 0L);
			return 27;
		}
		switch(curChar)
		{
		case 'N':
			return jjMoveStringLiteralDfa28_0(active1, 0x0L, active8, 0x1000000L);
		case 'R':
			return jjMoveStringLiteralDfa28_0(active1, 0x10000000000000L, active8, 0x0L);
		case '_':
			return jjMoveStringLiteralDfa28_0(active1, 0x800000000000000L, active8, 0x0L);
		default :
			break;
		}
		return jjStartNfa_0(26, 0L, active1, 0L, 0L, 0L, 0L, 0L, 0L, active8, 0L, 0L, 0L);
	}
	private int jjMoveStringLiteralDfa28_0(long old1, long active1, long old8, long active8){
		if (((active1 &= old1) | (active8 &= old8)) == 0L)
			return jjStartNfa_0(26, 0L, old1, 0L, 0L, 0L, 0L, 0L, 0L, old8, 0L, 0L, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_0(27, 0L, active1, 0L, 0L, 0L, 0L, 0L, 0L, active8, 0L, 0L, 0L);
			return 28;
		}
		switch(curChar)
		{
		case 'D':
			if ((active8 & 0x1000000L) != 0x0L)
				return jjStartNfaWithStates_0(28, 536, 89);
			break;
		case 'O':
			return jjMoveStringLiteralDfa29_0(active1, 0x10000000000000L, active8, 0x0L);
		case 'T':
			return jjMoveStringLiteralDfa29_0(active1, 0x800000000000000L, active8, 0x0L);
		default :
			break;
		}
		return jjStartNfa_0(27, 0L, active1, 0L, 0L, 0L, 0L, 0L, 0L, active8, 0L, 0L, 0L);
	}
	private int jjMoveStringLiteralDfa29_0(long old1, long active1, long old8, long active8){
		if (((active1 &= old1) | (active8 &= old8)) == 0L)
			return jjStartNfa_0(27, 0L, old1, 0L, 0L, 0L, 0L, 0L, 0L, old8, 0L, 0L, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_0(28, 0L, active1, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
			return 29;
		}
		switch(curChar)
		{
		case 'U':
			return jjMoveStringLiteralDfa30_0(active1, 0x10000000000000L);
		case 'Y':
			return jjMoveStringLiteralDfa30_0(active1, 0x800000000000000L);
		default :
			break;
		}
		return jjStartNfa_0(28, 0L, active1, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
	}
	private int jjMoveStringLiteralDfa30_0(long old1, long active1){
		if (((active1 &= old1)) == 0L)
			return jjStartNfa_0(28, 0L, old1, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_0(29, 0L, active1, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
			return 30;
		}
		switch(curChar)
		{
		case 'P':
			if ((active1 & 0x10000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(30, 116, 89);
			return jjMoveStringLiteralDfa31_0(active1, 0x800000000000000L);
		default :
			break;
		}
		return jjStartNfa_0(29, 0L, active1, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
	}
	private int jjMoveStringLiteralDfa31_0(long old1, long active1){
		if (((active1 &= old1)) == 0L)
			return jjStartNfa_0(29, 0L, old1, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_0(30, 0L, active1, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
			return 31;
		}
		switch(curChar)
		{
		case 'E':
			if ((active1 & 0x800000000000000L) != 0x0L)
				return jjStartNfaWithStates_0(31, 123, 89);
			break;
		default :
			break;
		}
		return jjStartNfa_0(30, 0L, active1, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
	}
	private int jjStartNfaWithStates_0(int pos, int kind, int state)
	{
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) { return pos + 1; }
		return jjMoveNfa_0(state, pos + 1);
	}
	static final long[] jjbitVec0 = {
			0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
	};
	static final long[] jjbitVec1 = {
			0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
	};
	static final long[] jjbitVec3 = {
			0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
	};
	static final long[] jjbitVec4 = {
			0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
	};
	static final long[] jjbitVec5 = {
			0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
	};
	static final long[] jjbitVec6 = {
			0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
	};
	static final long[] jjbitVec7 = {
			0x3fffffffffffL, 0x0L, 0x0L, 0x0L
	};
	static final long[] jjbitVec8 = {
			0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
	};
	private int jjMoveNfa_0(int startState, int curPos)
	{
		int startsAt = 0;
		jjnewStateCnt = 89;
		int i = 1;
		jjstateSet[0] = startState;
		int kind = 0x7fffffff;
		for (;;)
		{
			if (++jjround == 0x7fffffff)
				ReInitRounds();
			if (curChar < 64)
			{
				long l = 1L << curChar;
				do
				{
					switch(jjstateSet[--i])
					{
					case 84:
						if (curChar == 47)
						{
							if (kind > 730)
								kind = 730;
							{ jjCheckNAddStates(0, 2); }
						}
						else if (curChar == 42)
							jjstateSet[jjnewStateCnt++] = 85;
						if (curChar == 42)
							jjstateSet[jjnewStateCnt++] = 82;
						break;
					case 91:
						if ((0x7ff601000000000L & l) != 0x0L)
						{ jjCheckNAddTwoStates(27, 28); }
						else if (curChar == 39)
						{ jjCheckNAddStates(3, 5); }
						if ((0x3ff001000000000L & l) != 0x0L)
						{
							if (kind > 738)
								kind = 738;
							{ jjCheckNAdd(33); }
						}
						if ((0x3ff001000000000L & l) != 0x0L)
						{ jjCheckNAddStates(6, 8); }
						if (curChar == 36)
						{ jjCheckNAdd(29); }
						break;
					case 55:
						if ((0xffffff7fffffffffL & l) != 0x0L)
						{ jjCheckNAddStates(9, 11); }
						else if (curChar == 39)
						{
							if (kind > 681)
								kind = 681;
						}
						if ((0xfc00f7faffffc9ffL & l) != 0x0L)
							jjstateSet[jjnewStateCnt++] = 56;
						if (curChar == 39)
							jjstateSet[jjnewStateCnt++] = 52;
						break;
					case 1:
						if ((0x7ff601000000000L & l) != 0x0L)
						{ jjCheckNAddTwoStates(27, 28); }
						else if (curChar == 39)
						{ jjCheckNAddStates(12, 14); }
						if ((0x3ff001000000000L & l) != 0x0L)
						{
							if (kind > 738)
								kind = 738;
							{ jjCheckNAdd(33); }
						}
						if ((0x3ff001000000000L & l) != 0x0L)
						{ jjCheckNAddStates(6, 8); }
						if (curChar == 36)
						{ jjCheckNAdd(29); }
						break;
					case 94:
						if ((0x7ff601000000000L & l) != 0x0L)
						{ jjCheckNAddTwoStates(27, 28); }
						if (curChar == 36)
						{ jjCheckNAdd(29); }
						break;
					case 0:
						if ((0x3ff001000000000L & l) != 0x0L)
						{ jjCheckNAddStates(6, 8); }
						else if (curChar == 47)
						{ jjAddStates(15, 17); }
						else if (curChar == 39)
						{ jjCheckNAddStates(18, 21); }
						else if (curChar == 46)
						{ jjCheckNAddTwoStates(48, 49); }
						else if (curChar == 7)
						{
							if (kind > 742)
								kind = 742;
						}
						else if (curChar == 45)
							jjstateSet[jjnewStateCnt++] = 15;
						if ((0x3ff000000000000L & l) != 0x0L)
						{
							if (kind > 674)
								kind = 674;
							{ jjCheckNAddStates(22, 28); }
						}
						else if (curChar == 36)
						{
							if (kind > 738)
								kind = 738;
							{ jjCheckNAdd(33); }
						}
						break;
					case 90:
						if ((0x3ff000000000000L & l) != 0x0L)
						{
							if (kind > 676)
								kind = 676;
							{ jjCheckNAdd(49); }
						}
						if ((0x3ff000000000000L & l) != 0x0L)
						{ jjCheckNAddTwoStates(48, 38); }
						break;
					case 92:
						if (curChar == 32)
						{ jjCheckNAddTwoStates(78, 79); }
						if (curChar == 32)
						{ jjCheckNAddTwoStates(75, 76); }
						if (curChar == 32)
						{ jjCheckNAddTwoStates(73, 74); }
						if (curChar == 32)
						{ jjCheckNAddTwoStates(71, 72); }
						break;
					case 93:
					case 22:
						if ((0xffffffffffffdbffL & l) != 0x0L)
						{ jjCheckNAddStates(29, 31); }
						break;
					case 58:
						if ((0x7ff601000000000L & l) != 0x0L)
						{ jjCheckNAddTwoStates(27, 28); }
						else if (curChar == 38)
							jjstateSet[jjnewStateCnt++] = 65;
						if ((0x3ff001000000000L & l) != 0x0L)
						{
							if (kind > 738)
								kind = 738;
							{ jjCheckNAdd(33); }
						}
						else if (curChar == 38)
							jjstateSet[jjnewStateCnt++] = 59;
						if ((0x3ff001000000000L & l) != 0x0L)
						{ jjCheckNAddStates(6, 8); }
						if (curChar == 36)
						{ jjCheckNAdd(29); }
						break;
					case 82:
						if (curChar == 42)
							jjstateSet[jjnewStateCnt++] = 86;
						else if (curChar == 43)
							jjstateSet[jjnewStateCnt++] = 83;
						break;
					case 89:
						if ((0x7ff601000000000L & l) != 0x0L)
						{ jjCheckNAddTwoStates(27, 28); }
						if ((0x3ff001000000000L & l) != 0x0L)
						{
							if (kind > 738)
								kind = 738;
							{ jjCheckNAdd(33); }
						}
						if ((0x3ff001000000000L & l) != 0x0L)
						{ jjCheckNAddStates(6, 8); }
						if (curChar == 36)
						{ jjCheckNAdd(29); }
						break;
					case 2:
						if ((0xffffff7fffffffffL & l) != 0x0L)
						{ jjCheckNAddStates(12, 14); }
						break;
					case 3:
						if (curChar == 39)
						{ jjCheckNAddStates(12, 14); }
						break;
					case 4:
						if (curChar == 39)
							jjstateSet[jjnewStateCnt++] = 3;
						break;
					case 5:
						if (curChar == 39 && kind > 680)
							kind = 680;
						break;
					case 7:
						if ((0x3ff000000000000L & l) != 0x0L)
						{ jjCheckNAddTwoStates(8, 9); }
						break;
					case 8:
						if ((0x7ff600000000000L & l) != 0x0L)
						{ jjCheckNAddTwoStates(8, 9); }
						break;
					case 9:
					case 11:
						if (curChar == 39)
						{ jjCheckNAddStates(3, 5); }
						break;
					case 10:
						if ((0xffffff7fffffffffL & l) != 0x0L)
						{ jjCheckNAddStates(3, 5); }
						break;
					case 12:
						if (curChar == 39)
							jjstateSet[jjnewStateCnt++] = 11;
						break;
					case 13:
						if (curChar == 39 && kind > 682)
							kind = 682;
						break;
					case 15:
						if (curChar != 45)
							break;
						if (kind > 730)
							kind = 730;
						{ jjCheckNAddStates(0, 2); }
						break;
					case 16:
						if ((0xffffffffffffdbffL & l) == 0x0L)
							break;
						if (kind > 730)
							kind = 730;
						{ jjCheckNAddStates(0, 2); }
						break;
					case 17:
						if ((0x2400L & l) != 0x0L && kind > 730)
							kind = 730;
						break;
					case 18:
						if (curChar == 10 && kind > 730)
							kind = 730;
						break;
					case 19:
						if (curChar == 13)
							jjstateSet[jjnewStateCnt++] = 18;
						break;
					case 20:
						if (curChar == 45)
							jjstateSet[jjnewStateCnt++] = 15;
						break;
					case 26:
						if ((0x3ff001000000000L & l) != 0x0L)
						{ jjCheckNAddStates(6, 8); }
						break;
					case 27:
						if ((0x7ff601000000000L & l) != 0x0L)
						{ jjCheckNAddTwoStates(27, 28); }
						break;
					case 28:
						if (curChar == 36)
						{ jjCheckNAdd(29); }
						break;
					case 29:
						if (curChar != 36)
							break;
						if (kind > 737)
							kind = 737;
						{ jjCheckNAddTwoStates(29, 30); }
						break;
					case 30:
						if (curChar == 36)
						{ jjCheckNAdd(31); }
						break;
					case 31:
						if ((0x3ff001000000000L & l) == 0x0L)
							break;
						if (kind > 737)
							kind = 737;
						{ jjCheckNAdd(31); }
						break;
					case 32:
						if (curChar != 36)
							break;
						if (kind > 738)
							kind = 738;
						{ jjCheckNAdd(33); }
						break;
					case 33:
						if ((0x3ff001000000000L & l) == 0x0L)
							break;
						if (kind > 738)
							kind = 738;
						{ jjCheckNAdd(33); }
						break;
					case 34:
						if (curChar == 7 && kind > 742)
							kind = 742;
						break;
					case 35:
						if ((0x3ff000000000000L & l) == 0x0L)
							break;
						if (kind > 674)
							kind = 674;
						{ jjCheckNAddStates(22, 28); }
						break;
					case 36:
						if ((0x3ff000000000000L & l) == 0x0L)
							break;
						if (kind > 674)
							kind = 674;
						{ jjCheckNAdd(36); }
						break;
					case 37:
						if ((0x3ff000000000000L & l) != 0x0L)
						{ jjCheckNAddTwoStates(37, 38); }
						break;
					case 39:
						if ((0x280000000000L & l) != 0x0L)
						{ jjCheckNAdd(40); }
						break;
					case 40:
						if ((0x3ff000000000000L & l) == 0x0L)
							break;
						if (kind > 675)
							kind = 675;
						{ jjCheckNAdd(40); }
						break;
					case 41:
						if (curChar == 46)
						{ jjCheckNAddTwoStates(42, 38); }
						break;
					case 42:
						if ((0x3ff000000000000L & l) != 0x0L)
						{ jjCheckNAddTwoStates(42, 38); }
						break;
					case 43:
						if (curChar != 46)
							break;
						if (kind > 676)
							kind = 676;
						{ jjCheckNAdd(44); }
						break;
					case 44:
						if ((0x3ff000000000000L & l) == 0x0L)
							break;
						if (kind > 676)
							kind = 676;
						{ jjCheckNAdd(44); }
						break;
					case 45:
						if ((0x3ff000000000000L & l) == 0x0L)
							break;
						if (kind > 676)
							kind = 676;
						{ jjCheckNAddStates(32, 34); }
						break;
					case 46:
						if ((0x3ff000000000000L & l) != 0x0L)
						{ jjCheckNAddStates(35, 38); }
						break;
					case 47:
						if (curChar == 46)
						{ jjCheckNAddTwoStates(48, 49); }
						break;
					case 48:
						if ((0x3ff000000000000L & l) != 0x0L)
						{ jjCheckNAddTwoStates(48, 38); }
						break;
					case 49:
						if ((0x3ff000000000000L & l) == 0x0L)
							break;
						if (kind > 676)
							kind = 676;
						{ jjCheckNAdd(49); }
						break;
					case 50:
						if (curChar == 39)
						{ jjCheckNAddStates(18, 21); }
						break;
					case 51:
						if ((0xffffff7fffffffffL & l) != 0x0L)
						{ jjCheckNAddStates(9, 11); }
						break;
					case 52:
						if (curChar == 39)
						{ jjCheckNAddStates(9, 11); }
						break;
					case 53:
						if (curChar == 39)
							jjstateSet[jjnewStateCnt++] = 52;
						break;
					case 54:
						if (curChar == 39 && kind > 681)
							kind = 681;
						break;
					case 56:
						if (curChar == 39 && kind > 685)
							kind = 685;
						break;
					case 59:
					case 61:
						if (curChar == 39)
						{ jjCheckNAddStates(39, 41); }
						break;
					case 60:
						if ((0xffffff7fffffffffL & l) != 0x0L)
						{ jjCheckNAddStates(39, 41); }
						break;
					case 62:
						if (curChar == 39)
							jjstateSet[jjnewStateCnt++] = 61;
						break;
					case 63:
						if (curChar == 39 && kind > 683)
							kind = 683;
						break;
					case 64:
						if (curChar == 38)
							jjstateSet[jjnewStateCnt++] = 65;
						break;
					case 65:
						if (curChar == 34)
						{ jjCheckNAddTwoStates(66, 68); }
						break;
					case 66:
						if ((0xfffffffbffffdbffL & l) != 0x0L)
						{ jjCheckNAddStates(42, 44); }
						break;
					case 67:
						if (curChar == 34)
						{ jjCheckNAddStates(42, 44); }
						break;
					case 68:
						if (curChar == 34)
							jjstateSet[jjnewStateCnt++] = 67;
						break;
					case 69:
						if (curChar == 34 && kind > 739)
							kind = 739;
						break;
					case 71:
						if (curChar == 32)
						{ jjCheckNAddTwoStates(71, 72); }
						break;
					case 73:
						if (curChar == 32)
						{ jjCheckNAddTwoStates(73, 74); }
						break;
					case 75:
						if (curChar == 32)
						{ jjCheckNAddTwoStates(75, 76); }
						break;
					case 78:
						if (curChar == 32)
						{ jjCheckNAddTwoStates(78, 79); }
						break;
					case 81:
						if (curChar == 47)
						{ jjAddStates(15, 17); }
						break;
					case 83:
						if ((0xffff7fffffffffffL & l) != 0x0L && kind > 726)
							kind = 726;
						break;
					case 85:
						if (curChar == 42)
							jjstateSet[jjnewStateCnt++] = 86;
						break;
					case 86:
						if ((0xffff7fffffffffffL & l) != 0x0L && kind > 728)
							kind = 728;
						break;
					case 87:
						if (curChar == 42)
							jjstateSet[jjnewStateCnt++] = 85;
						break;
					case 88:
						if (curChar != 47)
							break;
						if (kind > 730)
							kind = 730;
						{ jjCheckNAddStates(0, 2); }
						break;
					default : break;
					}
				} while(i != startsAt);
			}
			else if (curChar < 128)
			{
				long l = 1L << (curChar & 077);
				do
				{
					switch(jjstateSet[--i])
					{
					case 91:
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{
							if (kind > 738)
								kind = 738;
							{ jjCheckNAdd(33); }
						}
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{ jjCheckNAddTwoStates(27, 28); }
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{ jjCheckNAddStates(6, 8); }
						break;
					case 55:
					{ jjCheckNAddStates(9, 11); }
					if ((0xffffff81ffffff81L & l) != 0x0L)
						jjstateSet[jjnewStateCnt++] = 56;
					break;
					case 1:
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{
							if (kind > 738)
								kind = 738;
							{ jjCheckNAdd(33); }
						}
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{ jjCheckNAddTwoStates(27, 28); }
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{ jjCheckNAddStates(6, 8); }
						break;
					case 94:
					case 27:
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{ jjCheckNAddTwoStates(27, 28); }
						break;
					case 0:
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{
							if (kind > 738)
								kind = 738;
							{ jjCheckNAdd(33); }
						}
						else if (curChar == 123)
						{ jjAddStates(45, 52); }
						else if (curChar == 91)
						{ jjCheckNAddTwoStates(22, 24); }
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{ jjCheckNAddStates(6, 8); }
						if ((0x100000001000000L & l) != 0x0L)
							jjstateSet[jjnewStateCnt++] = 1;
						else if (curChar == 85)
						{ jjAddStates(53, 54); }
						else if (curChar == 78)
						{ jjCheckNAdd(9); }
						else if (curChar == 95)
							jjstateSet[jjnewStateCnt++] = 7;
						break;
					case 92:
						if ((0x4000000040L & l) != 0x0L)
							jjstateSet[jjnewStateCnt++] = 80;
						else if ((0x10000000100000L & l) != 0x0L)
							jjstateSet[jjnewStateCnt++] = 77;
						else if ((0x1000000010L & l) != 0x0L)
						{
							if (kind > 688)
								kind = 688;
						}
						if ((0x10000000100000L & l) != 0x0L)
						{
							if (kind > 689)
								kind = 689;
						}
						break;
					case 93:
						if ((0xffffffffdfffffffL & l) != 0x0L)
						{ jjCheckNAddStates(29, 31); }
						else if (curChar == 93)
							jjstateSet[jjnewStateCnt++] = 23;
						break;
					case 58:
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{
							if (kind > 738)
								kind = 738;
							{ jjCheckNAdd(33); }
						}
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{ jjCheckNAddTwoStates(27, 28); }
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{ jjCheckNAddStates(6, 8); }
						break;
					case 89:
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{
							if (kind > 738)
								kind = 738;
							{ jjCheckNAdd(33); }
						}
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{ jjCheckNAddTwoStates(27, 28); }
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{ jjCheckNAddStates(6, 8); }
						break;
					case 2:
					{ jjAddStates(12, 14); }
					break;
					case 6:
						if (curChar == 95)
							jjstateSet[jjnewStateCnt++] = 7;
						break;
					case 7:
						if ((0x7fffffe07fffffeL & l) != 0x0L)
						{ jjCheckNAddTwoStates(8, 9); }
						break;
					case 8:
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{ jjCheckNAddTwoStates(8, 9); }
						break;
					case 10:
					{ jjAddStates(3, 5); }
					break;
					case 14:
						if (curChar == 78)
						{ jjCheckNAdd(9); }
						break;
					case 16:
						if (kind > 730)
							kind = 730;
						{ jjAddStates(0, 2); }
						break;
					case 21:
						if (curChar == 91)
						{ jjCheckNAddTwoStates(22, 24); }
						break;
					case 22:
						if ((0xffffffffdfffffffL & l) != 0x0L)
						{ jjCheckNAddStates(29, 31); }
						break;
					case 23:
						if (curChar == 93)
						{ jjCheckNAddStates(29, 31); }
						break;
					case 24:
						if (curChar == 93)
							jjstateSet[jjnewStateCnt++] = 23;
						break;
					case 25:
						if (curChar == 93 && kind > 734)
							kind = 734;
						break;
					case 26:
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{ jjCheckNAddStates(6, 8); }
						break;
					case 29:
						if ((0x7fffffe87fffffeL & l) == 0x0L)
							break;
						if (kind > 737)
							kind = 737;
						{ jjAddStates(55, 56); }
						break;
					case 31:
						if ((0x7fffffe87fffffeL & l) == 0x0L)
							break;
						if (kind > 737)
							kind = 737;
						jjstateSet[jjnewStateCnt++] = 31;
						break;
					case 32:
						if ((0x7fffffe87fffffeL & l) == 0x0L)
							break;
						if (kind > 738)
							kind = 738;
						{ jjCheckNAdd(33); }
						break;
					case 33:
						if ((0x7fffffe87fffffeL & l) == 0x0L)
							break;
						if (kind > 738)
							kind = 738;
						{ jjCheckNAdd(33); }
						break;
					case 38:
						if ((0x2000000020L & l) != 0x0L)
						{ jjAddStates(57, 58); }
						break;
					case 51:
					{ jjCheckNAddStates(9, 11); }
					break;
					case 57:
						if (curChar == 85)
						{ jjAddStates(53, 54); }
						break;
					case 60:
					{ jjAddStates(39, 41); }
					break;
					case 66:
					{ jjAddStates(42, 44); }
					break;
					case 70:
						if (curChar == 123)
						{ jjAddStates(45, 52); }
						break;
					case 72:
						if ((0x1000000010L & l) != 0x0L && kind > 688)
							kind = 688;
						break;
					case 74:
						if ((0x10000000100000L & l) != 0x0L && kind > 689)
							kind = 689;
						break;
					case 76:
						if ((0x10000000100000L & l) != 0x0L)
							jjstateSet[jjnewStateCnt++] = 77;
						break;
					case 77:
						if ((0x8000000080000L & l) != 0x0L && kind > 690)
							kind = 690;
						break;
					case 79:
						if ((0x4000000040L & l) != 0x0L)
							jjstateSet[jjnewStateCnt++] = 80;
						break;
					case 80:
						if ((0x400000004000L & l) != 0x0L && kind > 691)
							kind = 691;
						break;
					case 83:
						if (kind > 726)
							kind = 726;
						break;
					case 86:
						if (kind > 728)
							kind = 728;
						break;
					default : break;
					}
				} while(i != startsAt);
			}
			else
			{
				int hiByte = (curChar >> 8);
				int i1 = hiByte >> 6;
				long l1 = 1L << (hiByte & 077);
				int i2 = (curChar & 0xff) >> 6;
				long l2 = 1L << (curChar & 077);
				do
				{
					switch(jjstateSet[--i])
					{
					case 91:
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{ jjCheckNAddStates(6, 8); }
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{ jjCheckNAddTwoStates(27, 28); }
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{
							if (kind > 738)
								kind = 738;
							{ jjCheckNAdd(33); }
						}
						break;
					case 55:
						if (jjCanMove_0(hiByte, i1, i2, l1, l2))
						{ jjCheckNAddStates(9, 11); }
						if (jjCanMove_0(hiByte, i1, i2, l1, l2))
							jjstateSet[jjnewStateCnt++] = 56;
						break;
					case 1:
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{ jjCheckNAddStates(6, 8); }
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{ jjCheckNAddTwoStates(27, 28); }
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{
							if (kind > 738)
								kind = 738;
							{ jjCheckNAdd(33); }
						}
						break;
					case 94:
					case 27:
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{ jjCheckNAddTwoStates(27, 28); }
						break;
					case 0:
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{ jjCheckNAddStates(6, 8); }
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{
							if (kind > 738)
								kind = 738;
							{ jjCheckNAdd(33); }
						}
						break;
					case 93:
					case 22:
						if (jjCanMove_0(hiByte, i1, i2, l1, l2))
						{ jjCheckNAddStates(29, 31); }
						break;
					case 58:
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{ jjCheckNAddStates(6, 8); }
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{ jjCheckNAddTwoStates(27, 28); }
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{
							if (kind > 738)
								kind = 738;
							{ jjCheckNAdd(33); }
						}
						break;
					case 89:
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{ jjCheckNAddStates(6, 8); }
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{ jjCheckNAddTwoStates(27, 28); }
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{
							if (kind > 738)
								kind = 738;
							{ jjCheckNAdd(33); }
						}
						break;
					case 2:
						if (jjCanMove_0(hiByte, i1, i2, l1, l2))
						{ jjAddStates(12, 14); }
						break;
					case 10:
						if (jjCanMove_0(hiByte, i1, i2, l1, l2))
						{ jjAddStates(3, 5); }
						break;
					case 16:
						if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
							break;
						if (kind > 730)
							kind = 730;
						{ jjAddStates(0, 2); }
						break;
					case 26:
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{ jjCheckNAddStates(6, 8); }
						break;
					case 29:
						if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
							break;
						if (kind > 737)
							kind = 737;
						{ jjAddStates(55, 56); }
						break;
					case 31:
						if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
							break;
						if (kind > 737)
							kind = 737;
						jjstateSet[jjnewStateCnt++] = 31;
						break;
					case 32:
						if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
							break;
						if (kind > 738)
							kind = 738;
						{ jjCheckNAdd(33); }
						break;
					case 33:
						if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
							break;
						if (kind > 738)
							kind = 738;
						{ jjCheckNAdd(33); }
						break;
					case 51:
						if (jjCanMove_0(hiByte, i1, i2, l1, l2))
						{ jjCheckNAddStates(9, 11); }
						break;
					case 60:
						if (jjCanMove_0(hiByte, i1, i2, l1, l2))
						{ jjAddStates(39, 41); }
						break;
					case 66:
						if (jjCanMove_2(hiByte, i1, i2, l1, l2))
						{ jjAddStates(42, 44); }
						break;
					case 83:
						if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 726)
							kind = 726;
						break;
					case 86:
						if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 728)
							kind = 728;
						break;
					default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
					}
				} while(i != startsAt);
			}
			if (kind != 0x7fffffff)
			{
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			i = jjnewStateCnt;
			jjnewStateCnt = startsAt;
			startsAt = 89 - jjnewStateCnt;
			if (i == startsAt)
				return curPos;
			try { curChar = input_stream.readChar(); }
			catch(java.io.IOException e) { return curPos; }
		}
	}
	private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1, long active2, long active3, long active4, long active5, long active6, long active7, long active8, long active9, long active10, long active11){
		switch (pos)
		{
		case 0:
			if ((active0 & 0xffff8001fffffffeL) != 0x0L || (active1 & 0xffffffffffffffffL) != 0x0L || (active3 & 0x7ffc000000L) != 0x0L || (active4 & 0xffffc00000f00000L) != 0x0L || (active5 & 0x1fffL) != 0x0L || (active7 & 0x8000000000000L) != 0x0L || (active11 & 0x10000L) != 0x0L)
				return 89;
			if ((active11 & 0x2000080L) != 0x0L)
				return 84;
			if ((active10 & 0x200000000000000L) != 0x0L || (active11 & 0x800L) != 0x0L)
				return 90;
			if ((active5 & 0xfffffe000L) != 0x0L)
			{
				jjmatchedKind = 738;
				return 91;
			}
			if ((active11 & 0x1000L) != 0x0L)
				return 55;
			if ((active11 & 0x20L) != 0x0L)
				return 15;
			if ((active10 & 0x10000000000000L) != 0x0L)
				return 92;
			if ((active10 & 0x20000000L) != 0x0L)
			{
				jjmatchedKind = 738;
				return 1;
			}
			if ((active0 & 0x7ffe00000000L) != 0x0L || (active2 & 0xffffffffffffffffL) != 0x0L || (active3 & 0xffffff8003ffffffL) != 0x0L || (active4 & 0x3fffff0fffffL) != 0x0L || (active5 & 0xfffffff000000000L) != 0x0L || (active6 & 0xffffffffffffffffL) != 0x0L || (active7 & 0xfff7ffffffffffffL) != 0x0L || (active8 & 0xffffffffffffffffL) != 0x0L || (active9 & 0x7fffffffffffL) != 0x0L || (active10 & 0x3dfffffc0L) != 0x0L)
			{
				jjmatchedKind = 738;
				return 89;
			}
			if ((active9 & 0xffff800000000000L) != 0x0L || (active10 & 0x3fL) != 0x0L)
			{
				jjmatchedKind = 738;
				return 58;
			}
			if ((active11 & 0x2000L) != 0x0L)
				return 93;
			return -1;
		case 1:
			if ((active0 & 0x40007fe00000L) != 0x0L || (active3 & 0xfffc000300000000L) != 0x0L || (active4 & 0x100000003ffL) != 0x0L || (active5 & 0x3c73000f800000L) != 0x0L || (active9 & 0x3000000L) != 0x0L)
				return 89;
			if ((active11 & 0x2000000L) != 0x0L)
				return 82;
			if ((active0 & 0xffff3fff801ffffcL) != 0x0L || (active1 & 0xffffffffffffffffL) != 0x0L || (active2 & 0xffffffffffffffffL) != 0x0L || (active3 & 0x3fffcfbffffffL) != 0x0L || (active4 & 0xffffbeffffeffc00L) != 0x0L || (active5 & 0xffc38cfff07fffffL) != 0x0L || (active6 & 0xffffffffffffffffL) != 0x0L || (active7 & 0xffffffffffffffffL) != 0x0L || (active8 & 0xffffffffffffffffL) != 0x0L || (active9 & 0xfffffffffcffffffL) != 0x0L || (active10 & 0x3ffffffffL) != 0x0L)
			{
				if (jjmatchedPos != 1)
				{
					jjmatchedKind = 738;
					jjmatchedPos = 1;
				}
				return 89;
			}
			return -1;
		case 2:
			if ((active0 & 0x20100459cdcL) != 0x0L || (active2 & 0xf006000000f60L) != 0x0L || (active3 & 0x800000004003c003L) != 0x0L || (active4 & 0x60800002e0001fL) != 0x0L || (active5 & 0x43802400082000feL) != 0x0L || (active6 & 0x1c000009fc000L) != 0x0L || (active7 & 0xe000000780000L) != 0x0L || (active8 & 0x1fffffffffffffL) != 0x0L || (active9 & 0x40L) != 0x0L || (active10 & 0x20000000L) != 0x0L)
				return 89;
			if ((active0 & 0xffff3dfef79a6320L) != 0x0L || (active1 & 0xffffffffffffffffL) != 0x0L || (active2 & 0xfff0ff9ffffff09fL) != 0x0L || (active3 & 0x7ffbfffebbfc3ffcL) != 0x0L || (active4 & 0xff9f3efffd0fffa0L) != 0x0L || (active5 & 0xbc7bcafff75fff01L) != 0x0L || (active6 & 0xfffe3fffff603fffL) != 0x0L || (active7 & 0xfff1ffffff87ffffL) != 0x0L || (active8 & 0xffe0000000000000L) != 0x0L || (active9 & 0xfffffffffeffffbfL) != 0x0L || (active10 & 0x3dfffffffL) != 0x0L)
			{
				if (jjmatchedPos != 2)
				{
					jjmatchedKind = 738;
					jjmatchedPos = 2;
				}
				return 89;
			}
			return -1;
		case 3:
			if ((active0 & 0xe663140000000000L) != 0x0L || (active1 & 0x83000000023fL) != 0x0L || (active2 & 0x600028801e00005fL) != 0x0L || (active3 & 0xe0200e00000L) != 0x0L || (active4 & 0x63b00ffc10L) != 0x0L || (active5 & 0x3c00c803c1406400L) != 0x0L || (active6 & 0x1e0200401800L) != 0x0L || (active7 & 0x594028000401000L) != 0x0L || (active8 & 0x20000000000000L) != 0x0L || (active9 & 0xe0004e00007f8000L) != 0x0L || (active10 & 0x1c78f000bL) != 0x0L)
				return 89;
			if ((active2 & 0x2000000000000L) != 0x0L)
				return 94;
			if ((active0 & 0x199c29fef79a7b38L) != 0x0L || (active1 & 0xffff7cfffffffdc0L) != 0x0L || (active2 & 0x9ffcd71fe1fffe80L) != 0x0L || (active3 & 0x7ffbf1fcbb1fbffeL) != 0x0L || (active4 & 0xffdf3e9c4dc003afL) != 0x0L || (active5 & 0x837b02fc361f9bddL) != 0x0L || (active6 & 0xffffa1fdff3fa7ffL) != 0x0L || (active7 & 0xfa69fd7fffb7efffL) != 0x0L || (active8 & 0xffdffffffffffffeL) != 0x0L || (active9 & 0x1fffb1fffe807fbfL) != 0x0L || (active10 & 0x21870fff4L) != 0x0L)
			{
				if (jjmatchedPos != 3)
				{
					jjmatchedKind = 738;
					jjmatchedPos = 3;
				}
				return 89;
			}
			return -1;
		case 4:
			if ((active0 & 0x1000001c001a3300L) != 0x0L || (active1 & 0x8000440000001440L) != 0x0L || (active2 & 0x150400000c00000L) != 0x0L || (active3 & 0x700087c00041f60L) != 0x0L || (active4 & 0x21f2e8809000000L) != 0x0L || (active5 & 0x1180002200c5300L) != 0x0L || (active6 & 0x4000090808000000L) != 0x0L || (active7 & 0x10080001e4000800L) != 0x0L || (active8 & 0x41c0000000000000L) != 0x0L || (active9 & 0x1418001000003800L) != 0x0L || (active10 & 0x2901001f4L) != 0x0L)
				return 89;
			if ((active2 & 0x2000000000000L) != 0x0L)
				return 94;
			if ((active0 & 0xcd9e29e2f7804838L) != 0x0L || (active1 & 0x7fff3affffffe9bfL) != 0x0L || (active2 & 0xdeac971ffd3ffe9aL) != 0x0L || (active3 & 0x78fbf180bb1ba09eL) != 0x0L || (active4 & 0xfdc0105564cfe3afL) != 0x0L || (active5 & 0xba6302fd961388ddL) != 0x0L || (active6 & 0xbfffa0f5f73fa7ffL) != 0x0L || (active7 & 0xea61fd7e1bb7e7ffL) != 0x0L || (active8 & 0xbe1ffffffffffffeL) != 0x0L || (active9 & 0xcbe7b5effefc47bfL) != 0x0L || (active10 & 0xb68fe03L) != 0x0L)
			{
				if (jjmatchedPos != 4)
				{
					jjmatchedKind = 738;
					jjmatchedPos = 4;
				}
				return 89;
			}
			return -1;
		case 5:
			if ((active0 & 0x2018210004028L) != 0x0L || (active1 & 0x6000200001980000L) != 0x0L || (active2 & 0x86a00018001f0200L) != 0x0L || (active3 & 0x100220c082008084L) != 0x0L || (active4 & 0x2100000400000080L) != 0x0L || (active5 & 0x24302950000028cL) != 0x0L || (active6 & 0x4000080100L) != 0x0L || (active7 & 0x840611e1a0047fcL) != 0x0L || (active8 & 0x1200000000000000L) != 0x0L || (active9 & 0xb20200000000702L) != 0x0L || (active10 & 0x1400080L) != 0x0L)
				return 89;
			if ((active2 & 0x2000000000000L) != 0x0L)
				return 94;
			if ((active0 & 0xcd9c2878e7900810L) != 0x0L || (active1 & 0x1fff1afffe67e9bfL) != 0x0L || (active2 & 0x580c9707fd20fc9aL) != 0x0L || (active3 & 0x68f9d128391b241aL) != 0x0L || (active4 & 0xdcde1c5164cfe32fL) != 0x0L || (active5 & 0xb830006896138851L) != 0x0L || (active6 & 0xbfffa0b5f737a6ffL) != 0x0L || (active7 & 0xe2219c61c1b7a003L) != 0x0L || (active8 & 0xad1ffffffffffffeL) != 0x0L || (active9 & 0xc0c795effefc70bdL) != 0x0L || (active10 & 0xa28ff03L) != 0x0L)
			{
				if (jjmatchedPos != 5)
				{
					jjmatchedKind = 738;
					jjmatchedPos = 5;
				}
				return 89;
			}
			return -1;
		case 6:
			if ((active0 & 0xd98284000000000L) != 0x0L || (active1 & 0x1ffe008070042000L) != 0x0L || (active2 & 0x4800170001063c00L) != 0x0L || (active3 & 0xc0000808030012L) != 0x0L || (active4 & 0x6101140000121L) != 0x0L || (active5 & 0x1002000800120008L) != 0x0L || (active6 & 0xa82000848137a240L) != 0x0L || (active7 & 0x21803000878201L) != 0x0L || (active8 & 0x40L) != 0x0L || (active9 & 0xc081e000800000L) != 0x0L || (active10 & 0xa00f200L) != 0x0L)
				return 89;
			if ((active2 & 0x2000000000000L) != 0x0L)
				return 94;
			if ((active0 & 0xc0040038e7900810L) != 0x0L || (active1 & 0x40011a7f8f73c9bfL) != 0x0L || (active2 & 0x140c8007fc20c09aL) != 0x0L || (active3 & 0x6839d12031182408L) != 0x0L || (active4 & 0xdcd80c4024cfe20eL) != 0x0L || (active5 & 0xa830006096018851L) != 0x0L || (active6 & 0x17dfa031760004bfL) != 0x0L || (active7 & 0xe2005c41d13021f2L) != 0x0L || (active8 & 0xad1fffffffffffbeL) != 0x0L || (active9 & 0xc007140ffe7c76bdL) != 0x0L || (active10 & 0x280d03L) != 0x0L)
			{
				if (jjmatchedPos != 6)
				{
					jjmatchedKind = 738;
					jjmatchedPos = 6;
				}
				return 89;
			}
			return -1;
		case 7:
			if ((active0 & 0x10000000000810L) != 0x0L || (active1 & 0x6000000800L) != 0x0L || (active2 & 0x80068400a002L) != 0x0L || (active3 & 0x2000102021000008L) != 0x0L || (active4 & 0xc0000004800008L) != 0x0L || (active5 & 0x810000080010850L) != 0x0L || (active6 & 0x780000116000000L) != 0x0L || (active7 & 0xe200084000002002L) != 0x0L || (active8 & 0xd000000e84L) != 0x0L || (active9 & 0x100004000020L) != 0x0L || (active10 & 0x80500L) != 0x0L)
				return 89;
			if ((active2 & 0x2000000000000L) != 0x0L)
				return 94;
			if ((active0 & 0xc1040038e7900000L) != 0x0L || (active1 & 0x5ffd1a1fef73c1bfL) != 0x0L || (active2 & 0x140c060178204098L) != 0x0L || (active3 & 0x48b9c10010182400L) != 0x0L || (active4 & 0xdc180c40204fe206L) != 0x0L || (active5 & 0xa020006016008001L) != 0x0L || (active6 & 0x105fa030600704bfL) != 0x0L || (active7 & 0x15401d13701f0L) != 0x0L || (active8 & 0xad1fff2ffffff13aL) != 0x0L || (active9 & 0xc00705cffa7c769dL) != 0x0L || (active10 & 0x208803L) != 0x0L)
			{
				if (jjmatchedPos != 7)
				{
					jjmatchedKind = 738;
					jjmatchedPos = 7;
				}
				return 89;
			}
			return -1;
		case 8:
			if ((active0 & 0x8000002061000000L) != 0x0L || (active1 & 0x108000f03c03fL) != 0x0L || (active2 & 0x1404000000000000L) != 0x0L || (active3 & 0xb8c10010102000L) != 0x0L || (active4 & 0xc0000000206L) != 0x0L || (active5 & 0x8000000016000000L) != 0x0L || (active6 & 0x62020600000bfL) != 0x0L || (active7 & 0x40001100100L) != 0x0L || (active8 & 0x2100000300004000L) != 0x0L || (active9 & 0x10007801c4098L) != 0x0L || (active10 & 0x800L) != 0x0L)
				return 89;
			if ((active0 & 0x4104001886900000L) != 0x0L || (active1 & 0x5ffc121fe0700180L) != 0x0L || (active2 & 0x8060178204098L) != 0x0L || (active3 & 0x4801000000080400L) != 0x0L || (active4 & 0xdc180040204fe000L) != 0x0L || (active5 & 0x2020006000008001L) != 0x0L || (active6 & 0x1059801004070400L) != 0x0L || (active7 & 0xc0015001d02700f0L) != 0x0L || (active8 & 0x8c1fffacffffb13aL) != 0x0L || (active9 & 0xc00605c87a603605L) != 0x0L || (active10 & 0x208003L) != 0x0L)
			{
				if (jjmatchedPos != 8)
				{
					jjmatchedKind = 738;
					jjmatchedPos = 8;
				}
				return 89;
			}
			return -1;
		case 9:
			if ((active0 & 0x46800000L) != 0x0L || (active1 & 0x100fe00000a0L) != 0x0L || (active2 & 0x110204080L) != 0x0L || (active4 & 0x40204c6000L) != 0x0L || (active5 & 0x2020000004008001L) != 0x0L || (active6 & 0x1048801000000000L) != 0x0L || (active7 & 0x80200000L) != 0x0L || (active8 & 0x400000000002038L) != 0x0L || (active9 & 0x40100001004L) != 0x0L || (active10 & 0x8000L) != 0x0L)
				return 89;
			if ((active0 & 0x4104001880100000L) != 0x0L || (active1 & 0x5ffc02100c73811fL) != 0x0L || (active2 & 0x8060068000018L) != 0x0L || (active3 & 0x4801800000080400L) != 0x0L || (active4 & 0xdc18080000038004L) != 0x0L || (active5 & 0x6000000000L) != 0x0L || (active6 & 0x1100000407043fL) != 0x0L || (active7 & 0xc0015001500700f0L) != 0x0L || (active8 & 0x881fffacffff9102L) != 0x0L || (active9 & 0xc00601cc7a782611L) != 0x0L || (active10 & 0x200003L) != 0x0L)
			{
				if (jjmatchedPos != 9)
				{
					jjmatchedKind = 738;
					jjmatchedPos = 9;
				}
				return 89;
			}
			return -1;
		case 10:
			if ((active0 & 0x4004000800000000L) != 0x0L || (active1 & 0x4080001804100000L) != 0x0L || (active2 & 0x48000000L) != 0x0L || (active3 & 0x800800000080400L) != 0x0L || (active4 & 0xc000000000038000L) != 0x0L || (active6 & 0x1000000000400L) != 0x0L || (active7 & 0x400010000000L) != 0x0L || (active8 & 0x810030400009100L) != 0x0L || (active9 & 0x2000878002601L) != 0x0L)
				return 89;
			if ((active0 & 0x100001080100000L) != 0x0L || (active1 & 0x1f7c02074863811fL) != 0x0L || (active2 & 0x8060020000018L) != 0x0L || (active3 & 0x4001000000000000L) != 0x0L || (active4 & 0x1c18080000004004L) != 0x0L || (active5 & 0x6000000000L) != 0x0L || (active6 & 0x1000000407003fL) != 0x0L || (active7 & 0xc0011001400700f0L) != 0x0L || (active8 & 0x800ffca8ffff0002L) != 0x0L || (active9 & 0xc00401c402780010L) != 0x0L || (active10 & 0x200003L) != 0x0L)
			{
				if (jjmatchedPos != 10)
				{
					jjmatchedKind = 738;
					jjmatchedPos = 10;
				}
				return 89;
			}
			return -1;
		case 11:
			if ((active0 & 0x100000000000000L) != 0x0L || (active1 & 0x1668000000000100L) != 0x0L || (active3 & 0x4000000000000000L) != 0x0L || (active4 & 0x1008000000000004L) != 0x0L || (active5 & 0x4000000000L) != 0x0L || (active6 & 0x40000L) != 0x0L || (active7 & 0x8001100100020000L) != 0x0L || (active8 & 0x6082800000002L) != 0x0L || (active9 & 0x8000080000L) != 0x0L || (active10 & 0x200000L) != 0x0L)
				return 89;
			if ((active0 & 0x1080100000L) != 0x0L || (active1 & 0x91402074863801fL) != 0x0L || (active2 & 0x8060020000018L) != 0x0L || (active3 & 0x1000000000000L) != 0x0L || (active4 & 0xc10080000024000L) != 0x0L || (active5 & 0x2000000000L) != 0x0L || (active6 & 0x1000000403003fL) != 0x0L || (active7 & 0x40000000400500f0L) != 0x0L || (active8 & 0x8009f480ffff0000L) != 0x0L || (active9 & 0xc004014472700010L) != 0x0L || (active10 & 0x3L) != 0x0L)
			{
				if (jjmatchedPos != 11)
				{
					jjmatchedKind = 738;
					jjmatchedPos = 11;
				}
				return 89;
			}
			return -1;
		case 12:
			if ((active0 & 0x80000000L) != 0x0L || (active1 & 0x20000000000L) != 0x0L || (active2 & 0x8000020000000L) != 0x0L || (active4 & 0x4000L) != 0x0L || (active7 & 0x4000000000000000L) != 0x0L || (active8 & 0x8408000000000L) != 0x0L || (active9 & 0x4000000300000L) != 0x0L)
				return 89;
			if ((active0 & 0x1000100000L) != 0x0L || (active1 & 0xd1400074863801fL) != 0x0L || (active2 & 0x60000000018L) != 0x0L || (active3 & 0x1000000000000L) != 0x0L || (active4 & 0xc10080000020000L) != 0x0L || (active5 & 0x2000000000L) != 0x0L || (active6 & 0x1000000403003fL) != 0x0L || (active7 & 0x400500f0L) != 0x0L || (active8 & 0x8001b400ffff0000L) != 0x0L || (active9 & 0xc000014472400010L) != 0x0L || (active10 & 0x3L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 12;
				return 89;
			}
			return -1;
		case 13:
			if ((active1 & 0x100000000010000L) != 0x0L || (active3 & 0x1000000000000L) != 0x0L || (active4 & 0x400080000020000L) != 0x0L || (active6 & 0x10000004000003L) != 0x0L || (active7 & 0x40040000L) != 0x0L || (active8 & 0x1200000000000L) != 0x0L || (active9 & 0x10000000000L) != 0x0L)
				return 89;
			if ((active0 & 0x1000100000L) != 0x0L || (active1 & 0xc1400074862801fL) != 0x0L || (active2 & 0x60000000018L) != 0x0L || (active4 & 0x810000000000000L) != 0x0L || (active5 & 0x2000000000L) != 0x0L || (active6 & 0x3003cL) != 0x0L || (active7 & 0x100f0L) != 0x0L || (active8 & 0x80009400ffff0000L) != 0x0L || (active9 & 0xc000004472400010L) != 0x0L || (active10 & 0x3L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 13;
				return 89;
			}
			return -1;
		case 14:
			if ((active0 & 0x1000000000L) != 0x0L || (active1 & 0x4000240000010L) != 0x0L || (active4 & 0x10000000000000L) != 0x0L || (active6 & 0x30000L) != 0x0L || (active7 & 0x10020L) != 0x0L || (active8 & 0x8000800040000000L) != 0x0L || (active9 & 0x4402400010L) != 0x0L)
				return 89;
			if ((active0 & 0x100000L) != 0x0L || (active1 & 0xc1000050862800fL) != 0x0L || (active2 & 0x60000000018L) != 0x0L || (active4 & 0x800000000000000L) != 0x0L || (active5 & 0x2000000000L) != 0x0L || (active6 & 0x3cL) != 0x0L || (active7 & 0xd0L) != 0x0L || (active8 & 0x1400bfff0000L) != 0x0L || (active9 & 0xc000000070000000L) != 0x0L || (active10 & 0x3L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 14;
				return 89;
			}
			return -1;
		case 15:
			if ((active1 & 0x8620001L) != 0x0L || (active2 & 0x60000000000L) != 0x0L || (active8 & 0x800f0000L) != 0x0L)
				return 89;
			if ((active0 & 0x100000L) != 0x0L || (active1 & 0xc1000050000800eL) != 0x0L || (active2 & 0x18L) != 0x0L || (active4 & 0x800000000000000L) != 0x0L || (active5 & 0x2000000000L) != 0x0L || (active6 & 0x3cL) != 0x0L || (active7 & 0xd0L) != 0x0L || (active8 & 0x14003ff00000L) != 0x0L || (active9 & 0xc000000070000000L) != 0x0L || (active10 & 0x3L) != 0x0L)
			{
				if (jjmatchedPos != 15)
				{
					jjmatchedKind = 738;
					jjmatchedPos = 15;
				}
				return 89;
			}
			return -1;
		case 16:
			if ((active1 & 0x400000400008000L) != 0x0L || (active5 & 0x2000000000L) != 0x0L || (active7 & 0x80L) != 0x0L || (active8 & 0x38700000L) != 0x0L)
				return 89;
			if ((active0 & 0x100000L) != 0x0L || (active1 & 0x81000010040000eL) != 0x0L || (active2 & 0x40000000018L) != 0x0L || (active4 & 0x800000000000000L) != 0x0L || (active6 & 0x3cL) != 0x0L || (active7 & 0x50L) != 0x0L || (active8 & 0x1400078e0000L) != 0x0L || (active9 & 0xc000000070000000L) != 0x0L || (active10 & 0x3L) != 0x0L)
			{
				if (jjmatchedPos != 16)
				{
					jjmatchedKind = 738;
					jjmatchedPos = 16;
				}
				return 89;
			}
			return -1;
		case 17:
			if ((active1 & 0x100000004L) != 0x0L || (active8 & 0x2000000L) != 0x0L)
				return 89;
			if ((active0 & 0x100000L) != 0x0L || (active1 & 0x81000000040000aL) != 0x0L || (active2 & 0x40000000018L) != 0x0L || (active4 & 0x800000000000000L) != 0x0L || (active6 & 0x3cL) != 0x0L || (active7 & 0x50L) != 0x0L || (active8 & 0x140015ee0000L) != 0x0L || (active9 & 0xc000000070000000L) != 0x0L || (active10 & 0x3L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 17;
				return 89;
			}
			return -1;
		case 18:
			if ((active8 & 0x140005800000L) != 0x0L || (active9 & 0x10000000L) != 0x0L)
				return 89;
			if ((active0 & 0x100000L) != 0x0L || (active1 & 0x81000000040000aL) != 0x0L || (active2 & 0x40000000018L) != 0x0L || (active4 & 0x800000000000000L) != 0x0L || (active6 & 0x3cL) != 0x0L || (active7 & 0x50L) != 0x0L || (active8 & 0x106e0000L) != 0x0L || (active9 & 0xc000000060000000L) != 0x0L || (active10 & 0x3L) != 0x0L)
			{
				if (jjmatchedPos != 18)
				{
					jjmatchedKind = 738;
					jjmatchedPos = 18;
				}
				return 89;
			}
			return -1;
		case 19:
			if ((active1 & 0x8L) != 0x0L || (active4 & 0x800000000000000L) != 0x0L || (active7 & 0x10L) != 0x0L)
				return 89;
			if ((active0 & 0x100000L) != 0x0L || (active1 & 0x810000000400002L) != 0x0L || (active2 & 0x40000000018L) != 0x0L || (active6 & 0x3cL) != 0x0L || (active7 & 0x40L) != 0x0L || (active8 & 0x116e0000L) != 0x0L || (active9 & 0xc000000060000000L) != 0x0L || (active10 & 0x3L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 19;
				return 89;
			}
			return -1;
		case 20:
			if ((active0 & 0x100000L) != 0x0L || (active1 & 0x400002L) != 0x0L || (active2 & 0x40000000000L) != 0x0L || (active7 & 0x40L) != 0x0L)
				return 89;
			if ((active1 & 0x810000000000000L) != 0x0L || (active2 & 0x18L) != 0x0L || (active6 & 0x3cL) != 0x0L || (active8 & 0x116e0000L) != 0x0L || (active9 & 0xc000000060000000L) != 0x0L || (active10 & 0x3L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 20;
				return 89;
			}
			return -1;
		case 21:
			if ((active2 & 0x8L) != 0x0L || (active9 & 0x8000000020000000L) != 0x0L || (active10 & 0x1L) != 0x0L)
				return 89;
			if ((active1 & 0x810000000000000L) != 0x0L || (active2 & 0x10L) != 0x0L || (active6 & 0x3cL) != 0x0L || (active8 & 0x116e0000L) != 0x0L || (active9 & 0x4000000040000000L) != 0x0L || (active10 & 0x2L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 21;
				return 89;
			}
			return -1;
		case 22:
			if ((active6 & 0x10L) != 0x0L)
				return 89;
			if ((active1 & 0x810000000000000L) != 0x0L || (active2 & 0x10L) != 0x0L || (active6 & 0x2cL) != 0x0L || (active8 & 0x116e0000L) != 0x0L || (active9 & 0x4000000040000000L) != 0x0L || (active10 & 0x2L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 22;
				return 89;
			}
			return -1;
		case 23:
			if ((active8 & 0x20000L) != 0x0L || (active9 & 0x40000000L) != 0x0L || (active10 & 0x2L) != 0x0L)
				return 89;
			if ((active1 & 0x810000000000000L) != 0x0L || (active2 & 0x10L) != 0x0L || (active6 & 0x2cL) != 0x0L || (active8 & 0x116c0000L) != 0x0L || (active9 & 0x4000000000000000L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 23;
				return 89;
			}
			return -1;
		case 24:
			if ((active6 & 0x20L) != 0x0L || (active9 & 0x4000000000000000L) != 0x0L)
				return 89;
			if ((active1 & 0x810000000000000L) != 0x0L || (active2 & 0x10L) != 0x0L || (active6 & 0xcL) != 0x0L || (active8 & 0x116c0000L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 24;
				return 89;
			}
			return -1;
		case 25:
			if ((active6 & 0xcL) != 0x0L || (active8 & 0x100c0000L) != 0x0L)
				return 89;
			if ((active1 & 0x810000000000000L) != 0x0L || (active2 & 0x10L) != 0x0L || (active8 & 0x1600000L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 25;
				return 89;
			}
			return -1;
		case 26:
			if ((active2 & 0x10L) != 0x0L || (active8 & 0x600000L) != 0x0L)
				return 89;
			if ((active1 & 0x810000000000000L) != 0x0L || (active8 & 0x1000000L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 26;
				return 89;
			}
			return -1;
		case 27:
			if ((active1 & 0x810000000000000L) != 0x0L || (active8 & 0x1000000L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 27;
				return 89;
			}
			return -1;
		case 28:
			if ((active8 & 0x1000000L) != 0x0L)
				return 89;
			if ((active1 & 0x810000000000000L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 28;
				return 89;
			}
			return -1;
		case 29:
			if ((active1 & 0x810000000000000L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 29;
				return 89;
			}
			return -1;
		case 30:
			if ((active1 & 0x10000000000000L) != 0x0L)
				return 89;
			if ((active1 & 0x800000000000000L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 30;
				return 89;
			}
			return -1;
		default :
			return -1;
		}
	}
	private final int jjStartNfa_1(int pos, long active0, long active1, long active2, long active3, long active4, long active5, long active6, long active7, long active8, long active9, long active10, long active11){
		return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, active11), pos + 1);
	}
	private int jjMoveStringLiteralDfa0_1(){
		switch(curChar)
		{
		case '!':
			return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x8L);
		case '"':
			return jjStartNfaWithStates_1(0, 717, 93);
		case '$':
			return jjStartNfaWithStates_1(0, 720, 89);
		case '%':
			return jjStopAtPos(0, 712);
		case '\'':
			return jjStartNfaWithStates_1(0, 716, 55);
		case '(':
			return jjStopAtPos(0, 686);
		case ')':
			return jjStopAtPos(0, 687);
		case '*':
			jjmatchedKind = 710;
			return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x800000L);
		case '+':
			return jjStopAtPos(0, 708);
		case ',':
			return jjStopAtPos(0, 698);
		case '-':
			return jjStartNfaWithStates_1(0, 709, 15);
		case '.':
			jjmatchedKind = 697;
			return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x800L);
		case '/':
			jjmatchedKind = 711;
			return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x2000000L);
		case ':':
			return jjStopAtPos(0, 703);
		case ';':
			return jjStopAtPos(0, 696);
		case '<':
			jjmatchedKind = 701;
			return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x5L);
		case '=':
			jjmatchedKind = 699;
			return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x400L);
		case '>':
			jjmatchedKind = 700;
			return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x2L);
		case '?':
			return jjStopAtPos(0, 702);
		case 'A':
			jjmatchedKind = 1;
			return jjMoveStringLiteralDfa1_1(0x1fffffffcL, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'B':
			return jjMoveStringLiteralDfa1_1(0x7ffe00000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'C':
			jjmatchedKind = 47;
			return jjMoveStringLiteralDfa1_1(0xffff000000000000L, 0xffffffffffffffffL, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'D':
			return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x7ffffffffffL, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x200000000L, 0x0L);
		case 'E':
			return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0xfffff80000000000L, 0x1fL, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'F':
			return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x3ffffe0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'G':
			jjmatchedKind = 218;
			return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x7ff8000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'H':
			return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0xf8000000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'I':
			return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0xfffff00000000000L, 0x3ffL, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'J':
			return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x0L, 0xffc00L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'K':
			jjmatchedKind = 276;
			return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x0L, 0xe00000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'L':
			return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x0L, 0x3fffff000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'M':
			jjmatchedKind = 302;
			return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x0L, 0xffff800000000000L, 0x1fffL, 0x0L, 0x8000000000000L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'N':
			return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0xfffffe000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'O':
			return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x3ffffff000000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'P':
			return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0xc000000000000000L, 0x7fffffffffL, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'Q':
			return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x8000000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'R':
			return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0xffffff0000000000L, 0xffffffL, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'S':
			return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0xfff7ffffff000000L, 0xffffffffffffffffL, 0x7ffL, 0x0L, 0x0L);
		case 'T':
			return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x7ffffffff800L, 0x0L, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0xffff800000000000L, 0x3fL, 0x0L);
		case 'V':
			return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x1ffc0L, 0x0L);
		case 'W':
			return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x1ffe0000L, 0x0L);
		case 'X':
			return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x20000000L, 0x0L);
		case 'Y':
			return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0xc0000000L, 0x0L);
		case 'Z':
			return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x100000000L, 0x0L);
		case '[':
			return jjStopAtPos(0, 694);
		case ']':
			return jjStopAtPos(0, 695);
		case '^':
			return jjStopAtPos(0, 719);
		case '{':
			return jjStartNfaWithStates_1(0, 692, 92);
		case '|':
			jjmatchedKind = 718;
			return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x200L);
		case '}':
			return jjStopAtPos(0, 693);
		default :
			return jjMoveNfa_1(0, 0);
		}
	}
	private int jjMoveStringLiteralDfa1_1(long active0, long active1, long active2, long active3, long active4, long active5, long active6, long active7, long active8, long active9, long active10, long active11){
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_1(0, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, active11);
			return 1;
		}
		switch(curChar)
		{
		case '*':
			if ((active11 & 0x2000000L) != 0x0L)
				return jjStartNfaWithStates_1(1, 729, 82);
			break;
		case '.':
			if ((active11 & 0x800L) != 0x0L)
				return jjStopAtPos(1, 715);
			break;
		case '/':
			if ((active11 & 0x800000L) != 0x0L)
				return jjStopAtPos(1, 727);
			break;
		case '=':
			if ((active11 & 0x1L) != 0x0L)
				return jjStopAtPos(1, 704);
			else if ((active11 & 0x2L) != 0x0L)
				return jjStopAtPos(1, 705);
			else if ((active11 & 0x8L) != 0x0L)
				return jjStopAtPos(1, 707);
			break;
		case '>':
			if ((active11 & 0x4L) != 0x0L)
				return jjStopAtPos(1, 706);
			else if ((active11 & 0x400L) != 0x0L)
				return jjStopAtPos(1, 714);
			break;
		case 'A':
			return jjMoveStringLiteralDfa2_1(active0, 0x1ff000000000000L, active1, 0x0L, active2, 0x8000000007fL, active3, 0x8000000020L, active4, 0x7f80007f000400L, active5, 0xc00000000003e000L, active6, 0x30000003fffL, active7, 0x1000000L, active8, 0x0L, active9, 0x3800L, active10, 0x3fc0L, active11, 0x0L);
		case 'B':
			return jjMoveStringLiteralDfa2_1(active0, 0x1cL, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x1000000000L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L, active11, 0x0L);
		case 'C':
			return jjMoveStringLiteralDfa2_1(active0, 0x20L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0xe0000c0000L, active6, 0x0L, active7, 0x3fe000000L, active8, 0x0L, active9, 0x0L, active10, 0x0L, active11, 0x0L);
		case 'D':
			return jjMoveStringLiteralDfa2_1(active0, 0x1c0L, active1, 0x0L, active2, 0x0L, active3, 0x100000000000L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L, active11, 0x0L);
		case 'E':
			return jjMoveStringLiteralDfa2_1(active0, 0xe00007e00000000L, active1, 0x0L, active2, 0x3fffff80L, active3, 0x78000040L, active4, 0x3f80000f80e00000L, active5, 0x700000L, active6, 0xfffffc00001fc000L, active7, 0x7fffc000007ffL, active8, 0x0L, active9, 0x800000004000L, active10, 0x2c002c000L, active11, 0x0L);
		case 'F':
			if ((active5 & 0x10000000000L) != 0x0L)
			{
				jjmatchedKind = 360;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_1(active0, 0x200L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x20000000000L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L, active11, 0x0L);
		case 'G':
			return jjMoveStringLiteralDfa2_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x200000000000L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L, active11, 0x0L);
		case 'H':
			return jjMoveStringLiteralDfa2_1(active0, 0xf000000000000000L, active1, 0x7fL, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x10000000000000L, active8, 0x0L, active9, 0x8000L, active10, 0x1c0000L, active11, 0x0L);
		case 'I':
			return jjMoveStringLiteralDfa2_1(active0, 0x38000000000L, active1, 0x0L, active2, 0x7c0000000L, active3, 0x10000000780L, active4, 0xc00000f000000000L, active5, 0x1fL, active6, 0x0L, active7, 0xe8000000000800L, active8, 0x0L, active9, 0xff0000L, active10, 0x3e10000L, active11, 0x0L);
		case 'K':
			return jjMoveStringLiteralDfa2_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x100000000000000L, active8, 0x0L, active9, 0x0L, active10, 0x0L, active11, 0x0L);
		case 'L':
			return jjMoveStringLiteralDfa2_1(active0, 0x40000007c00L, active1, 0x780L, active2, 0x300000000000L, active3, 0x80001800L, active4, 0x0L, active5, 0x40000000000L, active6, 0xe00000L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L, active11, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa2_1(active0, 0x0L, active1, 0x0L, active2, 0x400000000000L, active3, 0x3c00000000000L, active4, 0x0L, active5, 0x80000000000L, active6, 0x0L, active7, 0x200000000000000L, active8, 0x0L, active9, 0x0L, active10, 0x20000000L, active11, 0x0L);
		case 'N':
			if ((active3 & 0x4000000000000L) != 0x0L)
			{
				jjmatchedKind = 242;
				jjmatchedPos = 1;
			}
			else if ((active4 & 0x10000000000L) != 0x0L)
				return jjStartNfaWithStates_1(1, 296, 89);
			else if ((active5 & 0x100000000000L) != 0x0L)
			{
				jjmatchedKind = 364;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_1(active0, 0x18000L, active1, 0x0L, active2, 0xf800000000000L, active3, 0xfff8000000000000L, active4, 0x3fL, active5, 0x600000000000L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x1ff000000000000L, active10, 0x0L, active11, 0x0L);
		case 'O':
			if ((active3 & 0x100000000L) != 0x0L)
			{
				jjmatchedKind = 224;
				jjmatchedPos = 1;
			}
			else if ((active5 & 0x800000L) != 0x0L)
			{
				jjmatchedKind = 343;
				jjmatchedPos = 1;
			}
			else if ((active9 & 0x1000000L) != 0x0L)
			{
				jjmatchedKind = 600;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_1(active0, 0x180000000000L, active1, 0x1ffffffff800L, active2, 0x7800000000L, active3, 0xe020007e000L, active4, 0x3e0000000800L, active5, 0xf0007e0L, active6, 0xf000000L, active7, 0xc000000007ff000L, active8, 0x0L, active9, 0x2000000L, active10, 0x104000000L, active11, 0x0L);
		case 'P':
			return jjMoveStringLiteralDfa2_1(active0, 0x20000L, active1, 0x0L, active2, 0x10000000000000L, active3, 0x0L, active4, 0x0L, active5, 0x3800000000000L, active6, 0x0L, active7, 0xf000000000000000L, active8, 0x0L, active9, 0xe00000000000000L, active10, 0x0L, active11, 0x0L);
		case 'Q':
			return jjMoveStringLiteralDfa2_1(active0, 0x0L, active1, 0x0L, active2, 0x20000000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x3fffffffffffffL, active9, 0x0L, active10, 0x0L, active11, 0x0L);
		case 'R':
			if ((active5 & 0x4000000000000L) != 0x0L)
			{
				jjmatchedKind = 370;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_1(active0, 0x2000001c0000L, active1, 0x600000000000L, active2, 0x40008000000000L, active3, 0x7c00780000L, active4, 0x0L, active5, 0x38000000000000L, active6, 0x3ff0000000L, active7, 0x0L, active8, 0x0L, active9, 0x1ffffc000000L, active10, 0x18000000L, active11, 0x0L);
		case 'S':
			if ((active0 & 0x200000L) != 0x0L)
			{
				jjmatchedKind = 21;
				jjmatchedPos = 1;
			}
			else if ((active4 & 0x40L) != 0x0L)
			{
				jjmatchedKind = 262;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_1(active0, 0x7c00000L, active1, 0x0L, active2, 0x80000000000000L, active3, 0x0L, active4, 0xff380L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0xf000000000000000L, active10, 0x7L, active11, 0x0L);
		case 'T':
			if ((active0 & 0x8000000L) != 0x0L)
			{
				jjmatchedKind = 27;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_1(active0, 0x70000000L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x40000030000000L, active6, 0x0L, active7, 0x0L, active8, 0x7fc0000000000000L, active9, 0x0L, active10, 0x38L, active11, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa2_1(active0, 0x80000000L, active1, 0x7fff800000000000L, active2, 0x0L, active3, 0x3800000L, active4, 0x0L, active5, 0x380000fc0001800L, active6, 0xc000000000L, active7, 0x800000L, active8, 0x8000000000000000L, active9, 0x20000000007fL, active10, 0x0L, active11, 0x0L);
		case 'V':
			return jjMoveStringLiteralDfa2_1(active0, 0x100000000L, active1, 0x0L, active2, 0x100000000000000L, active3, 0x0L, active4, 0x0L, active5, 0x3c00000000000000L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L, active11, 0x0L);
		case 'X':
			return jjMoveStringLiteralDfa2_1(active0, 0x0L, active1, 0x0L, active2, 0xfe00000000000000L, active3, 0x1fL, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L, active11, 0x0L);
		case 'Y':
			if ((active0 & 0x400000000000L) != 0x0L)
				return jjStartNfaWithStates_1(1, 46, 89);
			return jjMoveStringLiteralDfa2_1(active0, 0x0L, active1, 0x8000000000000000L, active2, 0x70000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x400000000780L, active10, 0x0L, active11, 0x0L);
		case '|':
			if ((active11 & 0x200L) != 0x0L)
				return jjStopAtPos(1, 713);
			break;
		default :
			break;
		}
		return jjStartNfa_1(0, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, active11);
	}
	private int jjMoveStringLiteralDfa2_1(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10, long old11, long active11){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10) | (active11 &= old11)) == 0L)
			return jjStartNfa_1(0, old0, old1, old2, old3, old4, old5, old6, old7, old8, old9, old10, old11);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_1(1, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
			return 2;
		}
		switch(curChar)
		{
		case 'A':
			if ((active0 & 0x40L) != 0x0L)
				return jjStartNfaWithStates_1(2, 6, 89);
			return jjMoveStringLiteralDfa3_1(active0, 0xf000000000000000L, active1, 0x9bfL, active2, 0x40000080L, active3, 0xc00180000L, active4, 0x80000180000000L, active5, 0x0L, active6, 0x1c8000600000L, active7, 0x1200000406000000L, active8, 0x3c0000000000000L, active9, 0x1000000ffc000000L, active10, 0xc8000000L);
		case 'B':
			return jjMoveStringLiteralDfa3_1(active0, 0x0L, active1, 0x800000001000L, active2, 0x0L, active3, 0x0L, active4, 0x1001000000L, active5, 0x0L, active6, 0x4000000000L, active7, 0x0L, active8, 0x8000000000000000L, active9, 0x100000000381fL, active10, 0x0L);
		case 'C':
			if ((active0 & 0x400000L) != 0x0L)
				return jjStartNfaWithStates_1(2, 22, 89);
			else if ((active2 & 0x100L) != 0x0L)
			{
				jjmatchedKind = 136;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_1(active0, 0x0L, active1, 0x8000000000000000L, active2, 0x1e80880000000e00L, active3, 0x18000000000000L, active4, 0x40001e0000000000L, active5, 0x2000000000L, active6, 0x200000000000L, active7, 0x7800000000L, active8, 0x0L, active9, 0x6000000000020L, active10, 0x0L);
		case 'D':
			if ((active0 & 0x80L) != 0x0L)
				return jjStartNfaWithStates_1(2, 7, 89);
			else if ((active0 & 0x8000L) != 0x0L)
				return jjStartNfaWithStates_1(2, 15, 89);
			else if ((active2 & 0x1000000000000L) != 0x0L)
			{
				jjmatchedKind = 176;
				jjmatchedPos = 2;
			}
			else if ((active5 & 0x20L) != 0x0L)
			{
				jjmatchedKind = 325;
				jjmatchedPos = 2;
			}
			else if ((active5 & 0x40000000000L) != 0x0L)
				return jjStartNfaWithStates_1(2, 362, 89);
			else if ((active5 & 0x4000000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(2, 382, 89);
			return jjMoveStringLiteralDfa3_1(active0, 0x0L, active1, 0x0L, active2, 0xe000000000000L, active3, 0x20000000000000L, active4, 0x0L, active5, 0x380000000000c0L, active6, 0x0L, active7, 0x0L, active8, 0xc00000000000000L, active9, 0x208000000000000L, active10, 0x200200000L);
		case 'E':
			if ((active0 & 0x40000L) != 0x0L)
				return jjStartNfaWithStates_1(2, 18, 89);
			else if ((active5 & 0x200000000000L) != 0x0L)
				return jjStartNfaWithStates_1(2, 365, 89);
			return jjMoveStringLiteralDfa3_1(active0, 0x200000800000L, active1, 0x200000000040L, active2, 0x6100100000000000L, active3, 0x110000200000L, active4, 0x0L, active5, 0x3c00800000000000L, active6, 0x3f0000000L, active7, 0xe000008000000000L, active8, 0x0L, active9, 0xe000001000018000L, active10, 0x1f0003L);
		case 'F':
			if ((active6 & 0x400000000000L) != 0x0L)
			{
				jjmatchedKind = 430;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_1(active0, 0x200000000L, active1, 0x0L, active2, 0x7f000L, active3, 0x0L, active4, 0x200000000L, active5, 0x20000000000L, active6, 0x1800000000000L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x38L);
		case 'G':
			if ((active0 & 0x100000000L) != 0x0L)
				return jjStartNfaWithStates_1(2, 32, 89);
			else if ((active4 & 0x2000000L) != 0x0L)
				return jjStartNfaWithStates_1(2, 281, 89);
			return jjMoveStringLiteralDfa3_1(active0, 0x9c00000000L, active1, 0x0L, active2, 0x80000L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x3fe000000000000L, active7, 0x800L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'H':
			return jjMoveStringLiteralDfa3_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x40000010040000L, active6, 0x0L, active7, 0x18000000L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'I':
			if ((active6 & 0x800000L) != 0x0L)
				return jjStartNfaWithStates_1(2, 407, 89);
			return jjMoveStringLiteralDfa3_1(active0, 0x600000000000000L, active1, 0x0L, active2, 0x8000000000000000L, active3, 0xc0000000000000L, active4, 0x800L, active5, 0x80020000000L, active6, 0x1c00000000L, active7, 0x100000000000000L, active8, 0x0L, active9, 0x3007e000000000L, active10, 0x10000004L);
		case 'J':
			return jjMoveStringLiteralDfa3_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x1000000000L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'K':
			return jjMoveStringLiteralDfa3_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x6000000000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x40000000000000L, active10, 0x0L);
		case 'L':
			if ((active0 & 0x400L) != 0x0L)
			{
				jjmatchedKind = 10;
				jjmatchedPos = 2;
			}
			else if ((active8 & 0x1L) != 0x0L)
			{
				jjmatchedKind = 512;
				jjmatchedPos = 2;
			}
			else if ((active10 & 0x20000000L) != 0x0L)
				return jjStartNfaWithStates_1(2, 669, 89);
			return jjMoveStringLiteralDfa3_1(active0, 0x3000000001800L, active1, 0x1fe000L, active2, 0x100000L, active3, 0x200008020a0L, active4, 0x8000000000000000L, active5, 0x4003c0080801L, active6, 0xc00000000000000L, active7, 0x30000007000L, active8, 0x1ffffffffffffeL, active9, 0x0L, active10, 0x1c0L);
		case 'M':
			if ((active9 & 0x40L) != 0x0L)
				return jjStartNfaWithStates_1(2, 582, 89);
			return jjMoveStringLiteralDfa3_1(active0, 0x100L, active1, 0x1000001e00000L, active2, 0x800000000L, active3, 0xc00000000000L, active4, 0x100008000000000L, active5, 0xc00007000L, active6, 0x0L, active7, 0x460000000000000L, active8, 0x0L, active9, 0x2000007e4080L, active10, 0x0L);
		case 'N':
			if ((active5 & 0x2L) != 0x0L)
			{
				jjmatchedKind = 321;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_1(active0, 0x800010000000000L, active1, 0xfffe000000L, active2, 0x70000200000L, active3, 0x100200019000100L, active4, 0x404000000L, active5, 0x100831cL, active6, 0x30000000000L, active7, 0x8040000800000L, active8, 0x0L, active9, 0x180000000800000L, active10, 0x100400000L);
		case 'O':
			return jjMoveStringLiteralDfa3_1(active0, 0xc0010000000L, active1, 0x400000000600L, active2, 0x10008000000000L, active3, 0x2000070a0401800L, active4, 0xff380L, active5, 0x0L, active6, 0x2000000000L, active7, 0x100001e0000000L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'P':
			if ((active3 & 0x1L) != 0x0L)
			{
				jjmatchedKind = 192;
				jjmatchedPos = 2;
			}
			else if ((active4 & 0x800000000000L) != 0x0L)
				return jjStartNfaWithStates_1(2, 303, 89);
			return jjMoveStringLiteralDfa3_1(active0, 0x20000L, active1, 0x0L, active2, 0x400000400000L, active3, 0x403000000000002L, active4, 0x0L, active5, 0x0L, active6, 0x3000000000000000L, active7, 0x0L, active8, 0x0L, active9, 0x400400002000000L, active10, 0x0L);
		case 'Q':
			return jjMoveStringLiteralDfa3_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x80000000000L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'R':
			if ((active3 & 0x4000L) != 0x0L)
			{
				jjmatchedKind = 206;
				jjmatchedPos = 2;
			}
			else if ((active6 & 0x4000L) != 0x0L)
			{
				jjmatchedKind = 398;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_1(active0, 0x4002000180000L, active1, 0x7ffe030000000000L, active2, 0x40000001800000L, active3, 0x38600L, active4, 0x200000008000000L, active5, 0x8000000006000400L, active6, 0x11f80ffL, active7, 0x700200000000L, active8, 0x3020000000000000L, active9, 0x0L, active10, 0x400fe00L);
		case 'S':
			if ((active0 & 0x4L) != 0x0L)
			{
				jjmatchedKind = 2;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_1(active0, 0x78000003000018L, active1, 0x0L, active2, 0x20079e000000L, active3, 0x7800000002000000L, active4, 0x1c00000030000000L, active5, 0x100000L, active6, 0xc000000006000f00L, active7, 0x1800000000007L, active8, 0x0L, active9, 0x800800000000700L, active10, 0x0L);
		case 'T':
			if ((active0 & 0x20000000000L) != 0x0L)
				return jjStartNfaWithStates_1(2, 41, 89);
			else if ((active3 & 0x40000000L) != 0x0L)
				return jjStartNfaWithStates_1(2, 222, 89);
			else if ((active3 & 0x8000000000000000L) != 0x0L)
			{
				jjmatchedKind = 255;
				jjmatchedPos = 2;
			}
			else if ((active5 & 0x8000000L) != 0x0L)
				return jjStartNfaWithStates_1(2, 347, 89);
			else if ((active5 & 0x80000000000000L) != 0x0L)
			{
				jjmatchedKind = 375;
				jjmatchedPos = 2;
			}
			else if ((active7 & 0x2000000000000L) != 0x0L)
			{
				jjmatchedKind = 497;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_1(active0, 0x1801040e0002220L, active1, 0x0L, active2, 0x2000001fL, active3, 0x20000005cL, active4, 0x201f00004000001fL, active5, 0x30300c000030000L, active6, 0x3000L, active7, 0x40000000003f8L, active8, 0x0L, active9, 0x0L, active10, 0x3800000L);
		case 'U':
			return jjMoveStringLiteralDfa3_1(active0, 0x0L, active1, 0x40000000000L, active2, 0x20001000000000L, active3, 0xc0000040000L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x800000000078000L, active8, 0x0L, active9, 0x180000000000L, active10, 0x0L);
		case 'V':
			return jjMoveStringLiteralDfa3_1(active0, 0x0L, active1, 0x180000000000L, active2, 0x0L, active3, 0x8000000000L, active4, 0x800000420L, active5, 0x0L, active6, 0x0L, active7, 0x1000400L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'W':
			if ((active2 & 0x2000000000L) != 0x0L)
				return jjStartNfaWithStates_1(2, 165, 89);
			else if ((active5 & 0x200000L) != 0x0L)
				return jjStartNfaWithStates_1(2, 341, 89);
			else if ((active7 & 0x80000L) != 0x0L)
			{
				jjmatchedKind = 467;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_1(active0, 0x4000L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x200000000000L, active5, 0x0L, active6, 0x8000000L, active7, 0x700000L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'X':
			if ((active4 & 0x20000000000000L) != 0x0L)
			{
				jjmatchedKind = 309;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x40000000000000L, active5, 0x400000L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'Y':
			if ((active0 & 0x10000L) != 0x0L)
				return jjStartNfaWithStates_1(2, 16, 89);
			else if ((active2 & 0x20L) != 0x0L)
			{
				jjmatchedKind = 133;
				jjmatchedPos = 2;
			}
			else if ((active2 & 0x4000000000L) != 0x0L)
				return jjStartNfaWithStates_1(2, 166, 89);
			else if ((active4 & 0x200000L) != 0x0L)
			{
				jjmatchedKind = 277;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_1(active0, 0x4000000L, active1, 0x0L, active2, 0x40L, active3, 0x0L, active4, 0xc00000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x4000000000000000L, active9, 0x0L, active10, 0x0L);
		case 'Z':
			return jjMoveStringLiteralDfa3_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x80000000000000L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_1(1, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa3_1(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_1(1, old0, old1, old2, old3, old4, old5, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_1(2, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
			return 3;
		}
		switch(curChar)
		{
		case '-':
			return jjMoveStringLiteralDfa4_1(active0, 0x0L, active1, 0x0L, active2, 0x2000000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case '1':
			return jjMoveStringLiteralDfa4_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x10L);
		case '3':
			return jjMoveStringLiteralDfa4_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x20L);
		case '8':
			if ((active10 & 0x8L) != 0x0L)
				return jjStartNfaWithStates_1(3, 643, 89);
			break;
		case 'A':
			if ((active2 & 0x1L) != 0x0L)
			{
				jjmatchedKind = 128;
				jjmatchedPos = 3;
			}
			else if ((active4 & 0x400L) != 0x0L)
				return jjStartNfaWithStates_1(3, 266, 89);
			return jjMoveStringLiteralDfa4_1(active0, 0x180210000184000L, active1, 0x380000000000L, active2, 0xa0070880003202L, active3, 0x900L, active4, 0x1e0000000000L, active5, 0x8000000000040000L, active6, 0x40000000000003fL, active7, 0x0L, active8, 0x0L, active9, 0x280001000000000L, active10, 0x0L);
		case 'B':
			if ((active0 & 0x40000000000L) != 0x0L)
				return jjStartNfaWithStates_1(3, 42, 89);
			else if ((active1 & 0x200L) != 0x0L)
				return jjStartNfaWithStates_1(3, 73, 89);
			return jjMoveStringLiteralDfa4_1(active0, 0x0L, active1, 0x0L, active2, 0x1000000000L, active3, 0x80000000L, active4, 0x100000000000000L, active5, 0x400000000L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x200000000000L, active10, 0x800L);
		case 'C':
			if ((active2 & 0x2000000L) != 0x0L)
			{
				jjmatchedKind = 153;
				jjmatchedPos = 3;
			}
			else if ((active2 & 0x2000000000000000L) != 0x0L)
			{
				jjmatchedKind = 189;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_1(active0, 0x18000000000000L, active1, 0x40L, active2, 0x401000011c000000L, active3, 0x1080040L, active4, 0x1f000000000000L, active5, 0x0L, active6, 0x2070278100L, active7, 0xf000000000000000L, active8, 0x8000000000000000L, active9, 0x800000000020L, active10, 0x1000L);
		case 'D':
			if ((active3 & 0x20000000000L) != 0x0L)
				return jjStartNfaWithStates_1(3, 233, 89);
			else if ((active4 & 0x80000000L) != 0x0L)
			{
				jjmatchedKind = 287;
				jjmatchedPos = 3;
			}
			else if ((active6 & 0x40000000000L) != 0x0L)
			{
				jjmatchedKind = 426;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_1(active0, 0x4000000000000L, active1, 0xe000000L, active2, 0x0L, active3, 0x0L, active4, 0x100000080L, active5, 0x0L, active6, 0x80000000000L, active7, 0x0L, active8, 0xc00000000000000L, active9, 0x0L, active10, 0x400000L);
		case 'E':
			if ((active0 & 0x20000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(3, 53, 89);
			else if ((active1 & 0x800000000000L) != 0x0L)
				return jjStartNfaWithStates_1(3, 111, 89);
			else if ((active2 & 0x4L) != 0x0L)
			{
				jjmatchedKind = 130;
				jjmatchedPos = 3;
			}
			else if ((active2 & 0x200000000000L) != 0x0L)
				return jjStartNfaWithStates_1(3, 173, 89);
			else if ((active3 & 0x200000L) != 0x0L)
				return jjStartNfaWithStates_1(3, 213, 89);
			else if ((active4 & 0x2000000000L) != 0x0L)
			{
				jjmatchedKind = 293;
				jjmatchedPos = 3;
			}
			else if ((active5 & 0x400L) != 0x0L)
				return jjStartNfaWithStates_1(3, 330, 89);
			else if ((active5 & 0x2000L) != 0x0L)
			{
				jjmatchedKind = 333;
				jjmatchedPos = 3;
			}
			else if ((active5 & 0x1000000L) != 0x0L)
				return jjStartNfaWithStates_1(3, 344, 89);
			else if ((active7 & 0x1000L) != 0x0L)
				return jjStartNfaWithStates_1(3, 460, 89);
			else if ((active7 & 0x80000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(3, 503, 89);
			else if ((active7 & 0x400000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(3, 506, 89);
			else if ((active9 & 0x20000L) != 0x0L)
			{
				jjmatchedKind = 593;
				jjmatchedPos = 3;
			}
			else if ((active9 & 0x80000000000L) != 0x0L)
				return jjStartNfaWithStates_1(3, 619, 89);
			else if ((active9 & 0x400000000000L) != 0x0L)
				return jjStartNfaWithStates_1(3, 622, 89);
			else if ((active10 & 0x100000000L) != 0x0L)
				return jjStartNfaWithStates_1(3, 672, 89);
			return jjMoveStringLiteralDfa4_1(active0, 0x1002208L, active1, 0x1000000000000L, active2, 0x60000002090c018L, active3, 0x1900c0001801000cL, active4, 0x20484100000fL, active5, 0x15800d800004000L, active6, 0x5801800008000000L, active7, 0x10019000000L, active8, 0x1000000000000002L, active9, 0xd080000007c0000L, active10, 0x0L);
		case 'F':
			if ((active7 & 0x20000000000L) != 0x0L)
				return jjStartNfaWithStates_1(3, 489, 89);
			break;
		case 'G':
			return jjMoveStringLiteralDfa4_1(active0, 0x0L, active1, 0x0L, active2, 0x40000000L, active3, 0x0L, active4, 0x20000040c000000L, active5, 0x0L, active6, 0x10000000000L, active7, 0x0L, active8, 0x0L, active9, 0x100001e000000000L, active10, 0x0L);
		case 'H':
			if ((active0 & 0x100000000000L) != 0x0L)
				return jjStartNfaWithStates_1(3, 44, 89);
			else if ((active2 & 0x80000000000L) != 0x0L)
				return jjStartNfaWithStates_1(3, 171, 89);
			else if ((active6 & 0x1000L) != 0x0L)
				return jjStartNfaWithStates_1(3, 396, 89);
			else if ((active10 & 0x800000L) != 0x0L)
			{
				jjmatchedKind = 663;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_1(active0, 0x80000000L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x2000000000000000L, active5, 0x0L, active6, 0x0L, active7, 0x800L, active8, 0x0L, active9, 0x0L, active10, 0x3000000L);
		case 'I':
			return jjMoveStringLiteralDfa4_1(active0, 0x1000009c02000120L, active1, 0x0L, active2, 0x1070400L, active3, 0x20008002000000L, active4, 0x8000000000L, active5, 0x23000000010040L, active6, 0x6080000L, active7, 0x20100000000000L, active8, 0x0L, active9, 0x4000000L, active10, 0x0L);
		case 'K':
			if ((active6 & 0x20000000000L) != 0x0L)
				return jjStartNfaWithStates_1(3, 425, 89);
			else if ((active7 & 0x8000000000L) != 0x0L)
				return jjStartNfaWithStates_1(3, 487, 89);
			else if ((active10 & 0x20000L) != 0x0L)
				return jjStartNfaWithStates_1(3, 657, 89);
			else if ((active10 & 0x4000000L) != 0x0L)
				return jjStartNfaWithStates_1(3, 666, 89);
			break;
		case 'L':
			if ((active0 & 0x1000000000000L) != 0x0L)
			{
				jjmatchedKind = 48;
				jjmatchedPos = 3;
			}
			else if ((active0 & 0x200000000000000L) != 0x0L)
			{
				jjmatchedKind = 57;
				jjmatchedPos = 3;
			}
			else if ((active3 & 0x800000L) != 0x0L)
				return jjStartNfaWithStates_1(3, 215, 89);
			else if ((active5 & 0x40000000L) != 0x0L)
			{
				jjmatchedKind = 350;
				jjmatchedPos = 3;
			}
			else if ((active6 & 0x100000000000L) != 0x0L)
				return jjStartNfaWithStates_1(3, 428, 89);
			return jjMoveStringLiteralDfa4_1(active0, 0x402080000020000L, active1, 0x800000000007e800L, active2, 0x1800000000000880L, active3, 0x9000000002002L, active4, 0x8000000000000200L, active5, 0x3a0000001L, active6, 0x2000004000000000L, active7, 0x200000006006000L, active8, 0x4000000000000000L, active9, 0x3800L, active10, 0x0L);
		case 'M':
			if ((active3 & 0x400000L) != 0x0L)
				return jjStartNfaWithStates_1(3, 214, 89);
			else if ((active9 & 0x20000000000L) != 0x0L)
			{
				jjmatchedKind = 617;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_1(active0, 0x14000000L, active1, 0x1e00000L, active2, 0x100000000000L, active3, 0x20108000L, active4, 0x0L, active5, 0x6000000L, active6, 0x400100000L, active7, 0x0L, active8, 0x0L, active9, 0x40000000081L, active10, 0x0L);
		case 'N':
			if ((active4 & 0x800L) != 0x0L)
				return jjStartNfaWithStates_1(3, 267, 89);
			else if ((active4 & 0x1000L) != 0x0L)
			{
				jjmatchedKind = 268;
				jjmatchedPos = 3;
			}
			else if ((active5 & 0x800000000000L) != 0x0L)
				return jjStartNfaWithStates_1(3, 367, 89);
			else if ((active6 & 0x400000L) != 0x0L)
				return jjStartNfaWithStates_1(3, 406, 89);
			else if ((active9 & 0x8000L) != 0x0L)
				return jjStartNfaWithStates_1(3, 591, 89);
			else if ((active10 & 0x40000L) != 0x0L)
			{
				jjmatchedKind = 658;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_1(active0, 0x2000800000L, active1, 0x40070000000L, active2, 0x0L, active3, 0x100c00040000L, active4, 0xfe000L, active5, 0x0L, active6, 0x0L, active7, 0x800000L, active8, 0x0L, active9, 0x40100ff8000000L, active10, 0x80004L);
		case 'O':
			if ((active3 & 0x200000000L) != 0x0L)
				return jjStartNfaWithStates_1(3, 225, 89);
			else if ((active4 & 0x10L) != 0x0L)
				return jjStartNfaWithStates_1(3, 260, 89);
			return jjMoveStringLiteralDfa4_1(active0, 0x200001810L, active1, 0x1000L, active2, 0x40800000000000L, active3, 0x2200000001000L, active4, 0x20L, active5, 0x88000L, active6, 0x800000000L, active7, 0x1a00000400L, active8, 0x0L, active9, 0x17000000000000L, active10, 0x0L);
		case 'P':
			if ((active2 & 0x8000000000L) != 0x0L)
				return jjStartNfaWithStates_1(3, 167, 89);
			else if ((active7 & 0x100000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(3, 504, 89);
			return jjMoveStringLiteralDfa4_1(active0, 0x0L, active1, 0x0L, active2, 0x200000000L, active3, 0x0L, active4, 0x0L, active5, 0x200000000001000L, active6, 0x8000000080000000L, active7, 0x400001e0000000L, active8, 0x0L, active9, 0x4000L, active10, 0x8000000L);
		case 'Q':
			return jjMoveStringLiteralDfa4_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x20000000000000L, active10, 0x0L);
		case 'R':
			if ((active0 & 0x2000000000000000L) != 0x0L)
			{
				jjmatchedKind = 61;
				jjmatchedPos = 3;
			}
			else if ((active1 & 0x10000000000L) != 0x0L)
			{
				jjmatchedKind = 104;
				jjmatchedPos = 3;
			}
			else if ((active3 & 0x40000000000L) != 0x0L)
			{
				jjmatchedKind = 234;
				jjmatchedPos = 3;
			}
			else if ((active5 & 0x400000000000000L) != 0x0L)
			{
				jjmatchedKind = 378;
				jjmatchedPos = 3;
			}
			else if ((active9 & 0x2000000000000000L) != 0x0L)
			{
				jjmatchedKind = 637;
				jjmatchedPos = 3;
			}
			else if ((active10 & 0x40000000L) != 0x0L)
			{
				jjmatchedKind = 670;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_1(active0, 0xc000000060000000L, active1, 0x1ffe02000000003fL, active2, 0x100000000080000L, active3, 0x10090000000010L, active4, 0x4000001000000000L, active5, 0x3800000000000000L, active6, 0x3fe008000000000L, active7, 0x800000400000000L, active8, 0x40000000000000L, active9, 0xc000000000000000L, active10, 0x80100003L);
		case 'S':
			if ((active2 & 0x40L) != 0x0L)
				return jjStartNfaWithStates_1(3, 134, 89);
			else if ((active7 & 0x400000L) != 0x0L)
				return jjStartNfaWithStates_1(3, 470, 89);
			else if ((active7 & 0x4000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(3, 498, 89);
			else if ((active9 & 0x10000L) != 0x0L)
				return jjStartNfaWithStates_1(3, 592, 89);
			return jjMoveStringLiteralDfa4_1(active0, 0x0L, active1, 0x6000401f80000580L, active2, 0x8000000000200000L, active3, 0x620L, active4, 0x1c80000000000000L, active5, 0x20000000000L, active6, 0x100000600L, active7, 0x1840000000000L, active8, 0x4L, active9, 0x1eL, active10, 0xc000L);
		case 'T':
			if ((active0 & 0x40000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(3, 54, 89);
			else if ((active4 & 0x10000000L) != 0x0L)
			{
				jjmatchedKind = 284;
				jjmatchedPos = 3;
			}
			else if ((active4 & 0x200000000L) != 0x0L)
				return jjStartNfaWithStates_1(3, 289, 89);
			else if ((active5 & 0x400000L) != 0x0L)
				return jjStartNfaWithStates_1(3, 342, 89);
			else if ((active5 & 0x80000000000L) != 0x0L)
				return jjStartNfaWithStates_1(3, 363, 89);
			else if ((active6 & 0x800L) != 0x0L)
				return jjStartNfaWithStates_1(3, 395, 89);
			else if ((active8 & 0x20000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(3, 565, 89);
			return jjMoveStringLiteralDfa4_1(active0, 0x800000000000000L, active1, 0x6000000000L, active2, 0x400400400000L, active3, 0x60c0000000020080L, active4, 0x20000000L, active5, 0x100b00L, active6, 0x10020c0L, active7, 0x2000078003L, active8, 0x380000000000000L, active9, 0x700L, active10, 0x10200000L);
		case 'U':
			return jjMoveStringLiteralDfa4_1(active0, 0x0L, active1, 0x180000L, active2, 0x0L, active3, 0x600007000000000L, active4, 0x0L, active5, 0x200002008cL, active6, 0x200000000000L, active7, 0x80840000003fcL, active8, 0x2000000000000000L, active9, 0x0L, active10, 0x2000001c0L);
		case 'V':
			if ((active6 & 0x200000000L) != 0x0L)
				return jjStartNfaWithStates_1(3, 417, 89);
			return jjMoveStringLiteralDfa4_1(active0, 0x0L, active1, 0x8000000000L, active2, 0x0L, active3, 0x0L, active4, 0x40000000000000L, active5, 0x10L, active6, 0x1000000000L, active7, 0x600000000000L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'W':
			if ((active7 & 0x10000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(3, 500, 89);
			else if ((active10 & 0x10000L) != 0x0L)
				return jjStartNfaWithStates_1(3, 656, 89);
			return jjMoveStringLiteralDfa4_1(active0, 0x4000000000L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x8L, active9, 0x0L, active10, 0x0L);
		case 'Y':
			if ((active5 & 0x400000000000L) != 0x0L)
				return jjStartNfaWithStates_1(3, 366, 89);
			return jjMoveStringLiteralDfa4_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x100L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x800000L, active10, 0x2000L);
		case '_':
			return jjMoveStringLiteralDfa4_1(active0, 0x0L, active1, 0x0L, active2, 0xc000000000000L, active3, 0x0L, active4, 0xc00000L, active5, 0x10000000L, active6, 0x0L, active7, 0x300000L, active8, 0x1ffffffffffff0L, active9, 0x2000000L, active10, 0x600L);
		default :
			break;
		}
		return jjStartNfa_1(2, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa4_1(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_1(2, old0, old1, old2, old3, old4, old5, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_1(3, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
			return 4;
		}
		switch(curChar)
		{
		case '2':
			if ((active10 & 0x20L) != 0x0L)
				return jjStartNfaWithStates_1(4, 645, 89);
			break;
		case '6':
			if ((active10 & 0x10L) != 0x0L)
				return jjStartNfaWithStates_1(4, 644, 89);
			break;
		case 'A':
			return jjMoveStringLiteralDfa5_1(active0, 0x8018000000000000L, active1, 0x200063e03fL, active2, 0x200000800L, active3, 0x6000010080008012L, active4, 0x1c40001000000200L, active5, 0x86000010L, active6, 0x3800000480000100L, active7, 0x100002000001L, active8, 0x1000000000000008L, active9, 0x800000000000L, active10, 0x0L);
		case 'B':
			if ((active5 & 0x80000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 339, 89);
			return jjMoveStringLiteralDfa5_1(active0, 0x0L, active1, 0x0L, active2, 0x2L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x2000L, active8, 0x1f0L, active9, 0x0L, active10, 0x0L);
		case 'C':
			return jjMoveStringLiteralDfa5_1(active0, 0x800L, active1, 0x0L, active2, 0x0L, active3, 0x20000000000000L, active4, 0x0L, active5, 0x1000000000L, active6, 0x0L, active7, 0x800010400100000L, active8, 0x2000000000000600L, active9, 0x100000000000L, active10, 0x0L);
		case 'D':
			if ((active3 & 0x40000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 210, 89);
			return jjMoveStringLiteralDfa5_1(active0, 0x200000000000L, active1, 0x0L, active2, 0x800000000200L, active3, 0xc00000000000L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x3800L, active9, 0x0L, active10, 0x0L);
		case 'E':
			if ((active1 & 0x400L) != 0x0L)
				return jjStartNfaWithStates_1(4, 74, 89);
			else if ((active1 & 0x8000000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 127, 89);
			else if ((active3 & 0x20L) != 0x0L)
				return jjStartNfaWithStates_1(4, 197, 89);
			else if ((active4 & 0x8000000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 283, 89);
			else if ((active4 & 0x200000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 313, 89);
			else if ((active5 & 0x20000000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 349, 89);
			else if ((active6 & 0x10000000000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 424, 89);
			else if ((active7 & 0x4000000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 474, 89);
			else if ((active7 & 0x20000000L) != 0x0L)
			{
				jjmatchedKind = 477;
				jjmatchedPos = 4;
			}
			else if ((active7 & 0x1000000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 508, 89);
			else if ((active8 & 0x80000000000000L) != 0x0L)
			{
				jjmatchedKind = 567;
				jjmatchedPos = 4;
			}
			else if ((active8 & 0x4000000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 574, 89);
			else if ((active9 & 0x800L) != 0x0L)
			{
				jjmatchedKind = 587;
				jjmatchedPos = 4;
			}
			else if ((active9 & 0x1000000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 636, 89);
			else if ((active10 & 0x40L) != 0x0L)
			{
				jjmatchedKind = 646;
				jjmatchedPos = 4;
			}
			else if ((active10 & 0x100000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 660, 89);
			else if ((active10 & 0x10000000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 668, 89);
			return jjMoveStringLiteralDfa5_1(active0, 0x2084000000000L, active1, 0x1ffe028070040800L, active2, 0x2100000280000L, active3, 0x11000020100080L, active4, 0x100000000000100L, active5, 0x20400000001L, active6, 0x800000213007a000L, active7, 0x6801c0000000L, active8, 0xd00000000000000L, active9, 0x37a2L, active10, 0x80180L);
		case 'F':
			if ((active2 & 0x800000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 151, 89);
			return jjMoveStringLiteralDfa5_1(active0, 0x0L, active1, 0x0L, active2, 0x4000000000000L, active3, 0x0L, active4, 0x0L, active5, 0x40L, active6, 0x0L, active7, 0x0L, active8, 0x4000L, active9, 0x0L, active10, 0x0L);
		case 'G':
			if ((active10 & 0x4L) != 0x0L)
				return jjStartNfaWithStates_1(4, 642, 89);
			return jjMoveStringLiteralDfa5_1(active0, 0x2000000L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x1L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x1e000000000L, active10, 0x0L);
		case 'H':
			if ((active2 & 0x400000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 150, 89);
			else if ((active2 & 0x10000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 180, 89);
			else if ((active3 & 0x40L) != 0x0L)
				return jjStartNfaWithStates_1(4, 198, 89);
			else if ((active4 & 0x1000000000000L) != 0x0L)
			{
				jjmatchedKind = 304;
				jjmatchedPos = 4;
			}
			else if ((active5 & 0x100L) != 0x0L)
			{
				jjmatchedKind = 328;
				jjmatchedPos = 4;
			}
			return jjMoveStringLiteralDfa5_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x1e000000000000L, active5, 0x200L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x201000L);
		case 'I':
			return jjMoveStringLiteralDfa5_1(active0, 0x404000070000000L, active1, 0x400f800000L, active2, 0xc00000000L, active3, 0xc0000000010000L, active4, 0x8000000100000000L, active5, 0x100100800L, active6, 0x50412002c0L, active7, 0xe001842000878000L, active8, 0x20000001fff8000L, active9, 0x800000L, active10, 0x100e800L);
		case 'K':
			if ((active1 & 0x40L) != 0x0L)
				return jjStartNfaWithStates_1(4, 70, 89);
			return jjMoveStringLiteralDfa5_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x20L, active5, 0x0L, active6, 0x0L, active7, 0x400L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'L':
			if ((active1 & 0x1000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 76, 89);
			else if ((active3 & 0x100L) != 0x0L)
				return jjStartNfaWithStates_1(4, 200, 89);
			else if ((active4 & 0x1000000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 280, 89);
			else if ((active4 & 0x800000000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 291, 89);
			else if ((active4 & 0x20000000000L) != 0x0L)
			{
				jjmatchedKind = 297;
				jjmatchedPos = 4;
			}
			return jjMoveStringLiteralDfa5_1(active0, 0x180000000000010L, active1, 0x0L, active2, 0x20001080000080L, active3, 0x0L, active4, 0xc0000000000L, active5, 0x1800000000000080L, active6, 0x0L, active7, 0x260000200000004L, active8, 0x80000000e0000000L, active9, 0x200006000000L, active10, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa5_1(active0, 0x4000000L, active1, 0x180000L, active2, 0x70000000400L, active3, 0x0L, active4, 0x400000L, active5, 0x8000000000000000L, active6, 0x3fL, active7, 0x18000000L, active8, 0x0L, active9, 0x82000000000000L, active10, 0x0L);
		case 'N':
			if ((active0 & 0x100L) != 0x0L)
				return jjStartNfaWithStates_1(4, 8, 89);
			else if ((active0 & 0x400000000L) != 0x0L)
			{
				jjmatchedKind = 34;
				jjmatchedPos = 4;
			}
			else if ((active0 & 0x1000000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 60, 89);
			else if ((active9 & 0x10000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 628, 89);
			return jjMoveStringLiteralDfa5_1(active0, 0x9800000008L, active1, 0x0L, active2, 0x40070000L, active3, 0x800008000000004L, active4, 0x0L, active5, 0x20000000000000L, active6, 0x0L, active7, 0x1800200000L, active8, 0xf00000000L, active9, 0x4000000000000L, active10, 0x0L);
		case 'O':
			return jjMoveStringLiteralDfa5_1(active0, 0x2080000020L, active1, 0x6000000000000000L, active2, 0x100000000L, active3, 0x2002000L, active4, 0x6000000000000080L, active5, 0x3000000010000L, active6, 0x80000L, active7, 0x0L, active8, 0x0L, active9, 0x40000000004000L, active10, 0x2400000L);
		case 'P':
			if ((active3 & 0x1000000000L) != 0x0L)
			{
				jjmatchedKind = 228;
				jjmatchedPos = 4;
			}
			else if ((active10 & 0x200000000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 673, 89);
			return jjMoveStringLiteralDfa5_1(active0, 0x0L, active1, 0x0L, active2, 0x688000000000000L, active3, 0x6000000000L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x1000000L, active8, 0x0L, active9, 0x0L, active10, 0x8000200L);
		case 'R':
			if ((active0 & 0x200L) != 0x0L)
				return jjStartNfaWithStates_1(4, 9, 89);
			else if ((active0 & 0x2000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 13, 89);
			else if ((active2 & 0x40000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 182, 89);
			else if ((active3 & 0x1000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 204, 89);
			else if ((active3 & 0x100000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 248, 89);
			else if ((active4 & 0x200000000000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 301, 89);
			else if ((active5 & 0x40000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 338, 89);
			else if ((active5 & 0x8000000000000L) != 0x0L)
			{
				jjmatchedKind = 371;
				jjmatchedPos = 4;
			}
			else if ((active5 & 0x100000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 376, 89);
			else if ((active6 & 0x8000000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 411, 89);
			else if ((active6 & 0x800000000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 419, 89);
			else if ((active9 & 0x8000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 627, 89);
			else if ((active9 & 0x400000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 634, 89);
			return jjMoveStringLiteralDfa5_1(active0, 0x10201000000L, active1, 0x180000000000L, active2, 0x3c00c000L, active3, 0x1002200018020008L, active4, 0x4000000eL, active5, 0x2050002800020000L, active6, 0x1a00000000000L, active7, 0x40000003faL, active8, 0x1000000000L, active9, 0x800000000000000L, active10, 0x0L);
		case 'S':
			if ((active1 & 0x400000000000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 110, 89);
			else if ((active3 & 0x80000000000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 235, 89);
			else if ((active5 & 0x1000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 332, 89);
			else if ((active5 & 0x4000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 334, 89);
			else if ((active5 & 0x200000000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 353, 89);
			else if ((active6 & 0x80000000000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 427, 89);
			else if ((active7 & 0x8000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 499, 89);
			else if ((active10 & 0x80000000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 671, 89);
			return jjMoveStringLiteralDfa5_1(active0, 0x800000L, active1, 0x180L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x8000L, active6, 0x0L, active7, 0x0L, active8, 0x2000000000L, active9, 0x100000ff81c0000L, active10, 0x400L);
		case 'T':
			if ((active1 & 0x40000000000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 106, 89);
			else if ((active3 & 0x200L) != 0x0L)
			{
				jjmatchedKind = 201;
				jjmatchedPos = 4;
			}
			else if ((active3 & 0x800L) != 0x0L)
				return jjStartNfaWithStates_1(4, 203, 89);
			else if ((active3 & 0x400000000L) != 0x0L)
			{
				jjmatchedKind = 226;
				jjmatchedPos = 4;
			}
			else if ((active3 & 0x200000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 249, 89);
			else if ((active3 & 0x400000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 250, 89);
			else if ((active4 & 0x8000000000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 295, 89);
			else if ((active6 & 0x4000000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 446, 89);
			else if ((active7 & 0x800L) != 0x0L)
				return jjStartNfaWithStates_1(4, 459, 89);
			else if ((active8 & 0x40000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 566, 89);
			else if ((active9 & 0x1000000000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 612, 89);
			return jjMoveStringLiteralDfa5_1(active0, 0x0L, active1, 0x201f80000000L, active2, 0x8000000000100018L, active3, 0x100801000400L, active4, 0x100400800000L, active5, 0xc00000000cL, active6, 0x400008006000400L, active7, 0x0L, active8, 0x7ffc000000004L, active9, 0x20000000000001cL, active10, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa5_1(active0, 0x800000000000000L, active1, 0x0L, active2, 0x5800000000003000L, active3, 0x8000000000000L, active4, 0x80000004000000L, active5, 0x200000000000000L, active6, 0x100000L, active7, 0x4000L, active8, 0x0L, active9, 0x21000000000001L, active10, 0x0L);
		case 'V':
			return jjMoveStringLiteralDfa5_1(active0, 0x0L, active1, 0x0L, active2, 0x1000000L, active3, 0x0L, active4, 0x0L, active5, 0x10000000L, active6, 0x0L, active7, 0x0L, active8, 0x18000000000000L, active9, 0x0L, active10, 0x0L);
		case 'W':
			if ((active0 & 0x1000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 12, 89);
			break;
		case 'X':
			return jjMoveStringLiteralDfa5_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x2L, active9, 0x0L, active10, 0x0L);
		case 'Y':
			if ((active0 & 0x20000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 17, 89);
			else if ((active0 & 0x80000L) != 0x0L)
			{
				jjmatchedKind = 19;
				jjmatchedPos = 4;
			}
			else if ((active2 & 0x400000000000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 174, 89);
			else if ((active2 & 0x100000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(4, 184, 89);
			return jjMoveStringLiteralDfa5_1(active0, 0x104000L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'Z':
			return jjMoveStringLiteralDfa5_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x600000L, active10, 0x0L);
		case '_':
			return jjMoveStringLiteralDfa5_1(active0, 0x4000000000000000L, active1, 0x1000000000000L, active2, 0x0L, active3, 0x80000L, active4, 0x40200fe000L, active5, 0x0L, active6, 0x3fe000000000000L, active7, 0x0L, active8, 0x0L, active9, 0xc000040000000000L, active10, 0x3L);
		default :
			break;
		}
		return jjStartNfa_1(3, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa5_1(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_1(3, old0, old1, old2, old3, old4, old5, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_1(4, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
			return 5;
		}
		switch(curChar)
		{
		case 'A':
			if ((active7 & 0x8000000L) != 0x0L)
			{
				jjmatchedKind = 475;
				jjmatchedPos = 5;
			}
			return jjMoveStringLiteralDfa6_1(active0, 0x80000000800L, active1, 0x0L, active2, 0x8000000000402L, active3, 0xe0000018020000L, active4, 0x44006100L, active5, 0x1820000010020000L, active6, 0x6000000000040L, active7, 0x20000010002000L, active8, 0x8018000000000804L, active9, 0x140078000000L, active10, 0x1400L);
		case 'B':
			return jjMoveStringLiteralDfa6_1(active0, 0x60000000L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x80000000L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'C':
			if ((active0 & 0x10000000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 28, 89);
			else if ((active6 & 0x4000000000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 422, 89);
			else if ((active8 & 0x200000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 569, 89);
			return jjMoveStringLiteralDfa6_1(active0, 0x8000000000000000L, active1, 0x7004003fL, active2, 0x0L, active3, 0x10L, active4, 0x0L, active5, 0x0L, active6, 0xa008000000000000L, active7, 0x0L, active8, 0x300000002L, active9, 0x0L, active10, 0x0L);
		case 'D':
			if ((active0 & 0x2000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 49, 89);
			else if ((active3 & 0x4L) != 0x0L)
				return jjStartNfaWithStates_1(5, 194, 89);
			else if ((active4 & 0x2000000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 317, 89);
			else if ((active6 & 0x80000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 403, 89);
			else if ((active7 & 0x800000000L) != 0x0L)
			{
				jjmatchedKind = 483;
				jjmatchedPos = 5;
			}
			return jjMoveStringLiteralDfa6_1(active0, 0x18000000000000L, active1, 0x1000000000000L, active2, 0x1800000000000000L, active3, 0x8000000000000L, active4, 0x0L, active5, 0x0L, active6, 0x2030000000L, active7, 0x1000000000L, active8, 0x0L, active9, 0xc004000000000000L, active10, 0x3L);
		case 'E':
			if ((active0 & 0x200000000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 33, 89);
			else if ((active1 & 0x200000000000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 109, 89);
			else if ((active2 & 0x200L) != 0x0L)
				return jjStartNfaWithStates_1(5, 137, 89);
			else if ((active2 & 0x10000L) != 0x0L)
			{
				jjmatchedKind = 144;
				jjmatchedPos = 5;
			}
			else if ((active2 & 0x80000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 147, 89);
			else if ((active2 & 0x100000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 148, 89);
			else if ((active2 & 0x1000000000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 164, 89);
			else if ((active2 & 0x80000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 183, 89);
			else if ((active3 & 0x200000000000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 237, 89);
			else if ((active5 & 0x4L) != 0x0L)
			{
				jjmatchedKind = 322;
				jjmatchedPos = 5;
			}
			else if ((active5 & 0x80L) != 0x0L)
				return jjStartNfaWithStates_1(5, 327, 89);
			else if ((active7 & 0x400L) != 0x0L)
				return jjStartNfaWithStates_1(5, 458, 89);
			else if ((active7 & 0x40000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 502, 89);
			else if ((active7 & 0x800000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 507, 89);
			else if ((active9 & 0x200000000000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 621, 89);
			else if ((active9 & 0x20000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 629, 89);
			else if ((active9 & 0x200000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 633, 89);
			return jjMoveStringLiteralDfa6_1(active0, 0x4004000000L, active1, 0x0L, active2, 0x1060000L, active3, 0x800000000L, active4, 0x6000000408021L, active5, 0x8000000000008008L, active6, 0x180800000003fL, active7, 0x0L, active8, 0x1000001000L, active9, 0x8001e002000020L, active10, 0x8000000L);
		case 'F':
			if ((active5 & 0x100000000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 352, 89);
			return jjMoveStringLiteralDfa6_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0xe000000000000000L, active8, 0x0L, active9, 0x180000000L, active10, 0x0L);
		case 'G':
			if ((active3 & 0x8000000000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 231, 89);
			return jjMoveStringLiteralDfa6_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x10000L, active4, 0x1c00000000000000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'H':
			if ((active4 & 0x400000000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 290, 89);
			else if ((active7 & 0x400000000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 482, 89);
			return jjMoveStringLiteralDfa6_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x400L, active7, 0x0L, active8, 0x200L, active9, 0x0L, active10, 0x0L);
		case 'I':
			return jjMoveStringLiteralDfa6_1(active0, 0x800000L, active1, 0x2000000080L, active2, 0x87001c000018L, active3, 0xd02001000002L, active4, 0x0L, active5, 0x2010000800000040L, active6, 0x410000006000000L, active7, 0x200004000000002L, active8, 0x1c000000070L, active9, 0x4000004L, active10, 0x0L);
		case 'L':
			if ((active3 & 0x80000000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 223, 89);
			else if ((active6 & 0x100L) != 0x0L)
				return jjStartNfaWithStates_1(5, 392, 89);
			else if ((active7 & 0x200000000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 481, 89);
			return jjMoveStringLiteralDfa6_1(active0, 0x4000000000000000L, active1, 0x0L, active2, 0x80003000L, active3, 0x0L, active4, 0x40000000000000L, active5, 0x6000010L, active6, 0x1000000000L, active7, 0x100000000000L, active8, 0x4480L, active9, 0xe00000001L, active10, 0x0L);
		case 'M':
			if ((active8 & 0x1000000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 572, 89);
			else if ((active9 & 0x100L) != 0x0L)
			{
				jjmatchedKind = 584;
				jjmatchedPos = 5;
			}
			return jjMoveStringLiteralDfa6_1(active0, 0x0L, active1, 0x0L, active2, 0x20000000L, active3, 0x11000000000000L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x100002000000000L, active9, 0x2000000000600L, active10, 0x0L);
		case 'N':
			if ((active0 & 0x20L) != 0x0L)
				return jjStartNfaWithStates_1(5, 5, 89);
			else if ((active1 & 0x80000L) != 0x0L)
			{
				jjmatchedKind = 83;
				jjmatchedPos = 5;
			}
			else if ((active2 & 0x800000000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 163, 89);
			else if ((active3 & 0x2000000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 217, 89);
			else if ((active5 & 0x1000000000000L) != 0x0L)
			{
				jjmatchedKind = 368;
				jjmatchedPos = 5;
			}
			else if ((active7 & 0x8L) != 0x0L)
			{
				jjmatchedKind = 451;
				jjmatchedPos = 5;
			}
			else if ((active10 & 0x1000000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 664, 89);
			return jjMoveStringLiteralDfa6_1(active0, 0x404000002000000L, active1, 0x1ffe004000700000L, active2, 0x100500000000L, active3, 0x6000000000000008L, active4, 0x100000000L, active5, 0x2000000110001L, active6, 0x278200L, active7, 0x800008783f0L, active8, 0x1fff8000L, active9, 0x1000000800000L, active10, 0x2800L);
		case 'O':
			return jjMoveStringLiteralDfa6_1(active0, 0x180000000000000L, active1, 0x0L, active2, 0x40000080L, active3, 0x0L, active4, 0x100000030000L, active5, 0x0L, active6, 0x1000000L, active7, 0x1802001100000L, active8, 0xe0002100L, active9, 0x600000L, active10, 0xc200L);
		case 'P':
			if ((active7 & 0x4000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 462, 89);
			return jjMoveStringLiteralDfa6_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x800000000000L, active10, 0x0L);
		case 'Q':
			return jjMoveStringLiteralDfa6_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x40000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'R':
			if ((active1 & 0x2000000000000000L) != 0x0L)
			{
				jjmatchedKind = 125;
				jjmatchedPos = 5;
			}
			else if ((active3 & 0x80L) != 0x0L)
				return jjStartNfaWithStates_1(5, 199, 89);
			else if ((active4 & 0x100000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 312, 89);
			else if ((active5 & 0x400000000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 354, 89);
			else if ((active7 & 0x2000000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 473, 89);
			else if ((active7 & 0x200000000000L) != 0x0L)
			{
				jjmatchedKind = 493;
				jjmatchedPos = 5;
			}
			return jjMoveStringLiteralDfa6_1(active0, 0x800000080000000L, active1, 0x4000009f80000000L, active2, 0x400000000c800L, active3, 0x10000000000L, active4, 0x80005000000000L, active5, 0x2000000000L, active6, 0x20000580002000L, active7, 0x400000000001L, active8, 0x8L, active9, 0x4018L, active10, 0x0L);
		case 'S':
			if ((active0 & 0x4000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 14, 89);
			else if ((active2 & 0x20000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 181, 89);
			else if ((active2 & 0x8000000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 191, 89);
			else if ((active3 & 0x4000000000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 230, 89);
			else if ((active5 & 0x200L) != 0x0L)
				return jjStartNfaWithStates_1(5, 329, 89);
			else if ((active5 & 0x8000000000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 359, 89);
			else if ((active5 & 0x40000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 374, 89);
			else if ((active10 & 0x80L) != 0x0L)
				return jjStartNfaWithStates_1(5, 647, 89);
			return jjMoveStringLiteralDfa6_1(active0, 0x0L, active1, 0x20000000800L, active2, 0x0L, active3, 0x800000000080000L, active4, 0xc000000000000006L, active5, 0x800L, active6, 0xbc0200040000000L, active7, 0x0L, active8, 0x7fe0000000000L, active9, 0x2000L, active10, 0x0L);
		case 'T':
			if ((active0 & 0x8L) != 0x0L)
				return jjStartNfaWithStates_1(5, 3, 89);
			else if ((active0 & 0x8000000000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 39, 89);
			else if ((active1 & 0x800000L) != 0x0L)
			{
				jjmatchedKind = 87;
				jjmatchedPos = 5;
			}
			else if ((active2 & 0x200000000000000L) != 0x0L)
			{
				jjmatchedKind = 185;
				jjmatchedPos = 5;
			}
			else if ((active3 & 0x8000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 207, 89);
			else if ((active3 & 0x2000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 241, 89);
			else if ((active3 & 0x1000000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 252, 89);
			else if ((active5 & 0x1000000000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 356, 89);
			else if ((active5 & 0x20000000000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 361, 89);
			else if ((active5 & 0x200000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 377, 89);
			else if ((active7 & 0x4L) != 0x0L)
				return jjStartNfaWithStates_1(5, 450, 89);
			else if ((active7 & 0x10000000000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 488, 89);
			else if ((active9 & 0x2L) != 0x0L)
				return jjStartNfaWithStates_1(5, 577, 89);
			else if ((active9 & 0x100000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 632, 89);
			else if ((active9 & 0x800000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 635, 89);
			return jjMoveStringLiteralDfa6_1(active0, 0x200001000000L, active1, 0xf03e000L, active2, 0x4400000200000000L, active3, 0x20000000L, active4, 0xc0000000200L, active5, 0x0L, active6, 0x1000000000100080L, active7, 0x40000000000L, active8, 0x2000000000000000L, active9, 0x1c0080L, active10, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa6_1(active0, 0x2000000010L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x200000L, active8, 0x400000000L, active9, 0x0L, active10, 0x2000000L);
		case 'V':
			return jjMoveStringLiteralDfa6_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x20080008L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0xc00000800000000L, active9, 0x0L, active10, 0x80000L);
		case 'W':
			if ((active4 & 0x80L) != 0x0L)
				return jjStartNfaWithStates_1(5, 263, 89);
			else if ((active10 & 0x400000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 662, 89);
			return jjMoveStringLiteralDfa6_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x2000L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x40000000000000L, active10, 0x0L);
		case 'X':
			return jjMoveStringLiteralDfa6_1(active0, 0x0L, active1, 0x0L, active2, 0x2000000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'Y':
			if ((active0 & 0x10000000000L) != 0x0L)
				return jjStartNfaWithStates_1(5, 40, 89);
			return jjMoveStringLiteralDfa6_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x800000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case '_':
			return jjMoveStringLiteralDfa6_1(active0, 0x1800100000L, active1, 0x180000000100L, active2, 0x200000L, active3, 0x100400L, active4, 0x18000000000000L, active5, 0x4000000000L, active6, 0x0L, active7, 0x1c0000000L, active8, 0x0L, active9, 0x1000L, active10, 0x200100L);
		default :
			break;
		}
		return jjStartNfa_1(4, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa6_1(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_1(4, old0, old1, old2, old3, old4, old5, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_1(5, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
			return 6;
		}
		switch(curChar)
		{
		case '2':
			if ((active6 & 0x20000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 437, 89);
			break;
		case 'A':
			return jjMoveStringLiteralDfa7_1(active0, 0x4000000000000L, active1, 0xf80000000L, active2, 0x4000000004000L, active3, 0xc00000000008L, active4, 0x20080008L, active5, 0x10000L, active6, 0x1000000000000000L, active7, 0x0L, active8, 0x3800000200L, active9, 0xe001c6000L, active10, 0x800L);
		case 'B':
			return jjMoveStringLiteralDfa7_1(active0, 0x0L, active1, 0x0L, active2, 0x4000000L, active3, 0x0L, active4, 0x30000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x200000L);
		case 'C':
			if ((active2 & 0x10000000000L) != 0x0L)
			{
				jjmatchedKind = 168;
				jjmatchedPos = 6;
			}
			else if ((active5 & 0x800000000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 355, 89);
			return jjMoveStringLiteralDfa7_1(active0, 0x0L, active1, 0x800L, active2, 0x60600000080L, active3, 0x2000010000000000L, active4, 0x0L, active5, 0x8000L, active6, 0x0L, active7, 0x80040002002L, active8, 0x1000L, active9, 0x78000000L, active10, 0x0L);
		case 'D':
			if ((active2 & 0x20000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 145, 89);
			else if ((active2 & 0x1000000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 152, 89);
			else if ((active3 & 0x800000000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 227, 89);
			else if ((active4 & 0x2000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 305, 89);
			else if ((active9 & 0x80000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 631, 89);
			return jjMoveStringLiteralDfa7_1(active0, 0x0L, active1, 0x600000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x2000000000000000L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x1000000000020L, active10, 0x0L);
		case 'E':
			if ((active0 & 0x8000000000000L) != 0x0L)
			{
				jjmatchedKind = 51;
				jjmatchedPos = 6;
			}
			else if ((active1 & 0x2000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 77, 89);
			else if ((active2 & 0x800L) != 0x0L)
				return jjStartNfaWithStates_1(6, 139, 89);
			else if ((active2 & 0x800000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 187, 89);
			else if ((active2 & 0x4000000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 190, 89);
			else if ((active6 & 0x100000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 404, 89);
			else if ((active6 & 0x80000000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 415, 89);
			else if ((active6 & 0x800000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 443, 89);
			else if ((active6 & 0x2000000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 445, 89);
			else if ((active7 & 0x8000L) != 0x0L)
			{
				jjmatchedKind = 463;
				jjmatchedPos = 6;
			}
			else if ((active9 & 0x800000000000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 623, 89);
			return jjMoveStringLiteralDfa7_1(active0, 0x4010000000000000L, active1, 0x0L, active2, 0x2000000008000L, active3, 0x11000000080000L, active4, 0xdc80004000000006L, active5, 0x2000000840L, active6, 0x1010000000L, active7, 0x700f0L, active8, 0x100000000000002L, active9, 0xc000000000000000L, active10, 0x80003L);
		case 'F':
			return jjMoveStringLiteralDfa7_1(active0, 0x800000000L, active1, 0x80L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'G':
			if ((active0 & 0x80000000000000L) != 0x0L)
			{
				jjmatchedKind = 55;
				jjmatchedPos = 6;
			}
			else if ((active0 & 0x400000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 58, 89);
			else if ((active4 & 0x100000000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 288, 89);
			else if ((active5 & 0x100000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 340, 89);
			else if ((active6 & 0x200L) != 0x0L)
				return jjStartNfaWithStates_1(6, 393, 89);
			else if ((active6 & 0x200000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 405, 89);
			else if ((active7 & 0x800000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 471, 89);
			else if ((active10 & 0x2000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 653, 89);
			return jjMoveStringLiteralDfa7_1(active0, 0x100000000000000L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x4000000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x10L, active9, 0x0L, active10, 0x0L);
		case 'H':
			if ((active0 & 0x200000000000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 45, 89);
			return jjMoveStringLiteralDfa7_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x100000000L, active9, 0x0L, active10, 0x0L);
		case 'I':
			return jjMoveStringLiteralDfa7_1(active0, 0x81000000L, active1, 0x100000e03c000L, active2, 0x1400000020000000L, active3, 0x808000000002000L, active4, 0xc0000000200L, active5, 0x6000000L, active6, 0x200060000080L, active7, 0xe000140001000100L, active8, 0x7fe0000000000L, active9, 0x6000000000018L, active10, 0x0L);
		case 'L':
			if ((active2 & 0x400L) != 0x0L)
				return jjStartNfaWithStates_1(6, 138, 89);
			else if ((active3 & 0x8000000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 219, 89);
			else if ((active3 & 0x40000000000000L) != 0x0L)
			{
				jjmatchedKind = 246;
				jjmatchedPos = 6;
			}
			else if ((active4 & 0x40000000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 286, 89);
			else if ((active5 & 0x20000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 337, 89);
			else if ((active6 & 0x40L) != 0x0L)
				return jjStartNfaWithStates_1(6, 390, 89);
			return jjMoveStringLiteralDfa7_1(active0, 0x2000000000L, active1, 0x0L, active2, 0x0L, active3, 0x80000000000000L, active4, 0x0L, active5, 0x20004090000000L, active6, 0x40000000000000L, active7, 0x0L, active8, 0x200000000L, active9, 0x0L, active10, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa7_1(active0, 0x2100000L, active1, 0x0L, active2, 0x18L, active3, 0x0L, active4, 0x400000L, active5, 0x0L, active6, 0x0L, active7, 0x200000L, active8, 0xc400000000L, active9, 0x0L, active10, 0x400L);
		case 'N':
			if ((active0 & 0x4000000000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 38, 89);
			else if ((active0 & 0x80000000000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 43, 89);
			else if ((active3 & 0x2L) != 0x0L)
				return jjStartNfaWithStates_1(6, 193, 89);
			else if ((active3 & 0x10000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 208, 89);
			else if ((active3 & 0x20000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 209, 89);
			else if ((active6 & 0x2000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 397, 89);
			else if ((active6 & 0x1000000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 408, 89);
			else if ((active7 & 0x2000000000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 485, 89);
			else if ((active7 & 0x800000000000L) != 0x0L)
			{
				jjmatchedKind = 495;
				jjmatchedPos = 6;
			}
			else if ((active9 & 0x40000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 630, 89);
			else if ((active10 & 0x4000L) != 0x0L)
			{
				jjmatchedKind = 654;
				jjmatchedPos = 6;
			}
			return jjMoveStringLiteralDfa7_1(active0, 0x0L, active1, 0x2000000000L, active2, 0x800100000000L, active3, 0x2000000000L, active4, 0x8000000000000L, active5, 0x10000000000001L, active6, 0x11800000000000L, active7, 0x201000080000000L, active8, 0x100e0000028L, active9, 0x4601000L, active10, 0x8000L);
		case 'O':
			return jjMoveStringLiteralDfa7_1(active0, 0x0L, active1, 0x100L, active2, 0x80000000L, active3, 0x1000000L, active4, 0x0L, active5, 0x0L, active6, 0x8000006000000L, active7, 0x0L, active8, 0x4580L, active9, 0x180000000L, active10, 0x100L);
		case 'P':
			if ((active10 & 0x200L) != 0x0L)
				return jjStartNfaWithStates_1(6, 649, 89);
			return jjMoveStringLiteralDfa7_1(active0, 0x1000000000L, active1, 0xa0000000000L, active2, 0x18000000L, active3, 0x0L, active4, 0x800000L, active5, 0x800000000000000L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'R':
			if ((active2 & 0x40000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 146, 89);
			else if ((active4 & 0x1L) != 0x0L)
				return jjStartNfaWithStates_1(6, 256, 89);
			else if ((active4 & 0x20L) != 0x0L)
				return jjStartNfaWithStates_1(6, 261, 89);
			else if ((active4 & 0x100L) != 0x0L)
				return jjStartNfaWithStates_1(6, 264, 89);
			else if ((active4 & 0x100000000000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 300, 89);
			else if ((active6 & 0x8000000000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 423, 89);
			else if ((active7 & 0x20000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 501, 89);
			else if ((active9 & 0x2000000000L) != 0x0L)
			{
				jjmatchedKind = 613;
				jjmatchedPos = 6;
			}
			else if ((active10 & 0x1000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 652, 89);
			else if ((active10 & 0x8000000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 667, 89);
			return jjMoveStringLiteralDfa7_1(active0, 0x0L, active1, 0x0L, active2, 0x8000000200000L, active3, 0x20100000L, active4, 0x10000000006000L, active5, 0x0L, active6, 0x400L, active7, 0x0L, active8, 0x18000000000000L, active9, 0x5c000000080L, active10, 0x0L);
		case 'S':
			if ((active4 & 0x4000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 306, 89);
			else if ((active5 & 0x8L) != 0x0L)
				return jjStartNfaWithStates_1(6, 323, 89);
			else if ((active5 & 0x2000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 369, 89);
			else if ((active7 & 0x200L) != 0x0L)
				return jjStartNfaWithStates_1(6, 457, 89);
			else if ((active7 & 0x1000000000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 484, 89);
			return jjMoveStringLiteralDfa7_1(active0, 0x0L, active1, 0x100000000000L, active2, 0x40000002L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x100000000L, active8, 0x8000000000000000L, active9, 0x0L, active10, 0x0L);
		case 'T':
			if ((active1 & 0x40000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 82, 89);
			else if ((active1 & 0x10000000L) != 0x0L)
			{
				jjmatchedKind = 92;
				jjmatchedPos = 6;
			}
			else if ((active1 & 0x8000000000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 103, 89);
			else if ((active1 & 0x2000000000000L) != 0x0L)
			{
				jjmatchedKind = 113;
				jjmatchedPos = 6;
			}
			else if ((active2 & 0x1000L) != 0x0L)
			{
				jjmatchedKind = 140;
				jjmatchedPos = 6;
			}
			else if ((active2 & 0x100000000000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 172, 89);
			else if ((active3 & 0x10L) != 0x0L)
				return jjStartNfaWithStates_1(6, 196, 89);
			else if ((active6 & 0x8000L) != 0x0L)
			{
				jjmatchedKind = 399;
				jjmatchedPos = 6;
			}
			else if ((active6 & 0x8000000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 447, 89);
			else if ((active7 & 0x1L) != 0x0L)
				return jjStartNfaWithStates_1(6, 448, 89);
			else if ((active8 & 0x40L) != 0x0L)
				return jjStartNfaWithStates_1(6, 518, 89);
			else if ((active9 & 0x800000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 599, 89);
			else if ((active10 & 0x2000000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 665, 89);
			return jjMoveStringLiteralDfa7_1(active0, 0x8000000004800810L, active1, 0x1ffc00006100003fL, active2, 0x2000L, active3, 0x4020100010000000L, active4, 0x0L, active5, 0x8000000000000000L, active6, 0x7003fL, active7, 0x4000000000L, active8, 0x1fff8804L, active9, 0x100000000005L, active10, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa7_1(active0, 0x60000000L, active1, 0x5000000000L, active2, 0x0L, active3, 0x0L, active4, 0x40000000040000L, active5, 0x10L, active6, 0x2000000000L, active7, 0x100000L, active8, 0x2000000000002000L, active9, 0x0L, active10, 0x0L);
		case 'V':
			return jjMoveStringLiteralDfa7_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x400L, active4, 0x0L, active5, 0x0L, active6, 0x406000100000000L, active7, 0x0L, active8, 0x0L, active9, 0x2000000L, active10, 0x0L);
		case 'X':
			return jjMoveStringLiteralDfa7_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x8000L, active5, 0x0L, active6, 0x180000000000000L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'Y':
			if ((active0 & 0x800000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 59, 89);
			else if ((active4 & 0x1000000000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 292, 89);
			else if ((active5 & 0x1000000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 380, 89);
			else if ((active6 & 0x400000000L) != 0x0L)
				return jjStartNfaWithStates_1(6, 418, 89);
			return jjMoveStringLiteralDfa7_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x200000000000000L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case '_':
			return jjMoveStringLiteralDfa7_1(active0, 0x0L, active1, 0x4000000000100000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x400010000000L, active8, 0xc00000000000000L, active9, 0x600L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_1(5, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa7_1(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_1(5, old0, old1, old2, old3, old4, old5, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_1(6, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
			return 7;
		}
		switch(curChar)
		{
		case 'A':
			return jjMoveStringLiteralDfa8_1(active0, 0x1000100000L, active1, 0x100000000000L, active2, 0x200080L, active3, 0x400L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0xc0000000L, active8, 0x100004020L, active9, 0x1000L, active10, 0x0L);
		case 'B':
			if ((active8 & 0x80L) != 0x0L)
				return jjStartNfaWithStates_1(7, 519, 89);
			else if ((active8 & 0x400L) != 0x0L)
				return jjStartNfaWithStates_1(7, 522, 89);
			return jjMoveStringLiteralDfa8_1(active0, 0x0L, active1, 0x0L, active2, 0x4000L, active3, 0x0L, active4, 0x400000L, active5, 0x0L, active6, 0x1000000000000000L, active7, 0x200000L, active8, 0x8000000002000L, active9, 0x0L, active10, 0x0L);
		case 'C':
			if ((active2 & 0x2000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(7, 177, 94);
			else if ((active7 & 0x2000000000000000L) != 0x0L)
			{
				jjmatchedKind = 509;
				jjmatchedPos = 7;
			}
			return jjMoveStringLiteralDfa8_1(active0, 0x0L, active1, 0x1000000000L, active2, 0x0L, active3, 0x80000L, active4, 0xc000000000000006L, active5, 0x0L, active6, 0x1800000000000L, active7, 0xc000000100000000L, active8, 0x10000000000000L, active9, 0x0L, active10, 0x0L);
		case 'D':
			if ((active0 & 0x10000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(7, 52, 89);
			else if ((active2 & 0x8000L) != 0x0L)
				return jjStartNfaWithStates_1(7, 143, 89);
			return jjMoveStringLiteralDfa8_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0xf0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'E':
			if ((active0 & 0x10L) != 0x0L)
				return jjStartNfaWithStates_1(7, 4, 89);
			else if ((active0 & 0x800L) != 0x0L)
				return jjStartNfaWithStates_1(7, 11, 89);
			else if ((active1 & 0x800L) != 0x0L)
				return jjStartNfaWithStates_1(7, 75, 89);
			else if ((active1 & 0x4000000000L) != 0x0L)
				return jjStartNfaWithStates_1(7, 102, 89);
			else if ((active2 & 0x2L) != 0x0L)
				return jjStartNfaWithStates_1(7, 129, 89);
			else if ((active2 & 0x4000000L) != 0x0L)
				return jjStartNfaWithStates_1(7, 154, 89);
			else if ((active3 & 0x2000000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(7, 253, 89);
			else if ((active4 & 0x800000L) != 0x0L)
				return jjStartNfaWithStates_1(7, 279, 89);
			else if ((active4 & 0x4000000L) != 0x0L)
				return jjStartNfaWithStates_1(7, 282, 89);
			else if ((active4 & 0x40000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(7, 310, 89);
			else if ((active5 & 0x10L) != 0x0L)
				return jjStartNfaWithStates_1(7, 324, 89);
			else if ((active5 & 0x80000000L) != 0x0L)
				return jjStartNfaWithStates_1(7, 351, 89);
			else if ((active6 & 0x100000000L) != 0x0L)
				return jjStartNfaWithStates_1(7, 416, 89);
			else if ((active6 & 0x400000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(7, 442, 89);
			else if ((active7 & 0x80000000000L) != 0x0L)
				return jjStartNfaWithStates_1(7, 491, 89);
			else if ((active8 & 0x4L) != 0x0L)
				return jjStartNfaWithStates_1(7, 514, 89);
			else if ((active8 & 0x800L) != 0x0L)
				return jjStartNfaWithStates_1(7, 523, 89);
			else if ((active8 & 0x4000000000L) != 0x0L)
			{
				jjmatchedKind = 550;
				jjmatchedPos = 7;
			}
			else if ((active9 & 0x100000000000L) != 0x0L)
				return jjStartNfaWithStates_1(7, 620, 89);
			return jjMoveStringLiteralDfa8_1(active0, 0x8000000002000000L, active1, 0x100003fL, active2, 0x100000018L, active3, 0x10000000L, active4, 0x10000000040000L, active5, 0x8000004000000000L, active6, 0x3fL, active7, 0x0L, active8, 0x841fff8000L, active9, 0x1000002600000L, active10, 0x0L);
		case 'F':
			if ((active10 & 0x100L) != 0x0L)
				return jjStartNfaWithStates_1(7, 648, 89);
			return jjMoveStringLiteralDfa8_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0xc000000000000000L, active10, 0x3L);
		case 'G':
			if ((active2 & 0x800000000000L) != 0x0L)
				return jjStartNfaWithStates_1(7, 175, 89);
			else if ((active3 & 0x2000000000L) != 0x0L)
				return jjStartNfaWithStates_1(7, 229, 89);
			else if ((active5 & 0x10000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(7, 372, 89);
			else if ((active9 & 0x4000000L) != 0x0L)
				return jjStartNfaWithStates_1(7, 602, 89);
			return jjMoveStringLiteralDfa8_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x4000000000L, active5, 0x0L, active6, 0x6001000000000L, active7, 0x0L, active8, 0xe0000000L, active9, 0x0L, active10, 0x0L);
		case 'H':
			if ((active2 & 0x200000000L) != 0x0L)
				return jjStartNfaWithStates_1(7, 161, 89);
			return jjMoveStringLiteralDfa8_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x10000000000L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'I':
			return jjMoveStringLiteralDfa8_1(active0, 0x800000L, active1, 0xfe0000080L, active2, 0x0L, active3, 0x4000000000000000L, active4, 0x8000L, active5, 0x2020000000000001L, active6, 0x30000L, active7, 0x0L, active8, 0x1018L, active9, 0x81L, active10, 0x8000L);
		case 'J':
			return jjMoveStringLiteralDfa8_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x30000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'K':
			if ((active7 & 0x2000L) != 0x0L)
				return jjStartNfaWithStates_1(7, 461, 89);
			break;
		case 'L':
			if ((active3 & 0x8L) != 0x0L)
				return jjStartNfaWithStates_1(7, 195, 89);
			else if ((active4 & 0x8L) != 0x0L)
				return jjStartNfaWithStates_1(7, 259, 89);
			else if ((active5 & 0x10000L) != 0x0L)
				return jjStartNfaWithStates_1(7, 336, 89);
			else if ((active8 & 0x1000000000L) != 0x0L)
				return jjStartNfaWithStates_1(7, 548, 89);
			return jjMoveStringLiteralDfa8_1(active0, 0x4002000000000L, active1, 0x0L, active2, 0x0L, active3, 0x80000000000000L, active4, 0x20080000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x2000000100L, active9, 0x0L, active10, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa8_1(active0, 0x0L, active1, 0x0L, active2, 0x4000000000000L, active3, 0x0L, active4, 0xc0000000000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x1c2000L, active10, 0x0L);
		case 'N':
			if ((active3 & 0x1000000L) != 0x0L)
				return jjStartNfaWithStates_1(7, 216, 89);
			else if ((active6 & 0x2000000L) != 0x0L)
			{
				jjmatchedKind = 409;
				jjmatchedPos = 7;
			}
			return jjMoveStringLiteralDfa8_1(active0, 0x4000000000000000L, active1, 0x4000000000100000L, active2, 0x1000000020000000L, active3, 0x19000000002000L, active4, 0x0L, active5, 0x2000000000L, active6, 0x24000000L, active7, 0x400011100100L, active8, 0x100000000000000L, active9, 0x18L, active10, 0x0L);
		case 'O':
			return jjMoveStringLiteralDfa8_1(active0, 0x1000000L, active1, 0xa000e03c000L, active2, 0x400000000000000L, active3, 0x20000000100000L, active4, 0x200L, active5, 0x8000L, active6, 0x40000040000480L, active7, 0x0L, active8, 0x200000000L, active9, 0x0L, active10, 0x0L);
		case 'P':
			if ((active10 & 0x400L) != 0x0L)
				return jjStartNfaWithStates_1(7, 650, 89);
			return jjMoveStringLiteralDfa8_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x400000000000002L, active9, 0x0L, active10, 0x0L);
		case 'R':
			if ((active8 & 0x200L) != 0x0L)
				return jjStartNfaWithStates_1(7, 521, 89);
			else if ((active10 & 0x80000L) != 0x0L)
				return jjStartNfaWithStates_1(7, 659, 89);
			return jjMoveStringLiteralDfa8_1(active0, 0x804000000L, active1, 0x100L, active2, 0x0L, active3, 0x0L, active4, 0x6000L, active5, 0x0L, active6, 0x2000000000L, active7, 0x0L, active8, 0x2000000800000000L, active9, 0x40180004000L, active10, 0x800L);
		case 'S':
			if ((active1 & 0x2000000000L) != 0x0L)
				return jjStartNfaWithStates_1(7, 101, 89);
			else if ((active2 & 0x2000L) != 0x0L)
				return jjStartNfaWithStates_1(7, 141, 89);
			else if ((active4 & 0x80000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(7, 311, 89);
			else if ((active5 & 0x40L) != 0x0L)
				return jjStartNfaWithStates_1(7, 326, 89);
			else if ((active5 & 0x800000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(7, 379, 89);
			else if ((active6 & 0x10000000L) != 0x0L)
				return jjStartNfaWithStates_1(7, 412, 89);
			else if ((active9 & 0x20L) != 0x0L)
				return jjStartNfaWithStates_1(7, 581, 89);
			return jjMoveStringLiteralDfa8_1(active0, 0x0L, active1, 0x1000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x8800000000000000L, active9, 0x0L, active10, 0x0L);
		case 'T':
			if ((active2 & 0x400000000L) != 0x0L)
				return jjStartNfaWithStates_1(7, 162, 89);
			else if ((active5 & 0x800L) != 0x0L)
				return jjStartNfaWithStates_1(7, 331, 89);
			else if ((active7 & 0x2L) != 0x0L)
				return jjStartNfaWithStates_1(7, 449, 89);
			else if ((active7 & 0x200000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(7, 505, 89);
			return jjMoveStringLiteralDfa8_1(active0, 0x60000000L, active1, 0x0L, active2, 0x8000058000000L, active3, 0x800c00000000000L, active4, 0x0L, active5, 0x0L, active6, 0x10000000000000L, active7, 0x0L, active8, 0x0L, active9, 0x6000e78000200L, active10, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa8_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x8000000000000L, active5, 0x10000000L, active6, 0x8000000000000L, active7, 0x0L, active8, 0x0L, active9, 0x404L, active10, 0x200000L);
		case 'V':
			return jjMoveStringLiteralDfa8_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x200000000000L, active7, 0x40000000000L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'W':
			if ((active2 & 0x80000000L) != 0x0L)
				return jjStartNfaWithStates_1(7, 159, 89);
			break;
		case 'X':
			if ((active6 & 0x80000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(7, 439, 89);
			break;
		case 'Y':
			if ((active3 & 0x20000000L) != 0x0L)
				return jjStartNfaWithStates_1(7, 221, 89);
			else if ((active3 & 0x100000000000L) != 0x0L)
				return jjStartNfaWithStates_1(7, 236, 89);
			else if ((active6 & 0x100000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(7, 440, 89);
			else if ((active6 & 0x200000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(7, 441, 89);
			else if ((active7 & 0x4000000000L) != 0x0L)
				return jjStartNfaWithStates_1(7, 486, 89);
			return jjMoveStringLiteralDfa8_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x10000000000L, active9, 0x0L, active10, 0x0L);
		case 'Z':
			return jjMoveStringLiteralDfa8_1(active0, 0x80000000L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x6000000L, active6, 0x0L, active7, 0x100000000000L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case '_':
			return jjMoveStringLiteralDfa8_1(active0, 0x100000000000000L, active1, 0x1ffc000000600000L, active2, 0x60000000000L, active3, 0x0L, active4, 0x1c00000000000000L, active5, 0x0L, active6, 0x40000L, active7, 0x1000000070000L, active8, 0x7fe0000000000L, active9, 0x1c000000000L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_1(6, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa8_1(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_1(6, old0, old1, old2, old3, old4, old5, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_1(7, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
			return 8;
		}
		switch(curChar)
		{
		case 'A':
			return jjMoveStringLiteralDfa9_1(active0, 0x880000000L, active1, 0x4000000000100000L, active2, 0x0L, active3, 0x4000000000000000L, active4, 0x6000L, active5, 0x0L, active6, 0x0L, active7, 0x500010000000L, active8, 0x800000000000000L, active9, 0x40000000000L, active10, 0x0L);
		case 'B':
			if ((active8 & 0x200000000L) != 0x0L)
				return jjStartNfaWithStates_1(8, 545, 89);
			break;
		case 'C':
			if ((active9 & 0x80L) != 0x0L)
				return jjStartNfaWithStates_1(8, 583, 89);
			return jjMoveStringLiteralDfa9_1(active0, 0x0L, active1, 0x4000000000000L, active2, 0x100000000L, active3, 0x0L, active4, 0x10000000000000L, active5, 0x2000000000L, active6, 0x0L, active7, 0x10000L, active8, 0x800000000L, active9, 0x4000000000L, active10, 0x200000L);
		case 'D':
			if ((active1 & 0x1000000L) != 0x0L)
				return jjStartNfaWithStates_1(8, 88, 89);
			else if ((active3 & 0x10000000L) != 0x0L)
				return jjStartNfaWithStates_1(8, 220, 89);
			else if ((active9 & 0x1000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(8, 624, 89);
			return jjMoveStringLiteralDfa9_1(active0, 0x0L, active1, 0x18000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x20000000000L, active9, 0x0L, active10, 0x0L);
		case 'E':
			if ((active0 & 0x20000000L) != 0x0L)
			{
				jjmatchedKind = 29;
				jjmatchedPos = 8;
			}
			else if ((active2 & 0x4000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(8, 178, 89);
			else if ((active3 & 0x400000000000L) != 0x0L)
			{
				jjmatchedKind = 238;
				jjmatchedPos = 8;
			}
			else if ((active4 & 0x40000000000L) != 0x0L)
			{
				jjmatchedKind = 298;
				jjmatchedPos = 8;
			}
			else if ((active5 & 0x2000000L) != 0x0L)
			{
				jjmatchedKind = 345;
				jjmatchedPos = 8;
			}
			else if ((active5 & 0x10000000L) != 0x0L)
				return jjStartNfaWithStates_1(8, 348, 89);
			else if ((active6 & 0x2000000000L) != 0x0L)
				return jjStartNfaWithStates_1(8, 421, 89);
			else if ((active6 & 0x200000000000L) != 0x0L)
				return jjStartNfaWithStates_1(8, 429, 89);
			else if ((active7 & 0x40000000000L) != 0x0L)
				return jjStartNfaWithStates_1(8, 490, 89);
			else if ((active8 & 0x2000000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(8, 573, 89);
			else if ((active9 & 0x200000000L) != 0x0L)
			{
				jjmatchedKind = 609;
				jjmatchedPos = 8;
			}
			return jjMoveStringLiteralDfa9_1(active0, 0x40000000L, active1, 0x80L, active2, 0x0L, active3, 0x800000000000L, active4, 0x84000430000L, active5, 0x4000000L, active6, 0x10801000000000L, active7, 0x200000L, active8, 0x100L, active9, 0x400000000L, active10, 0x0L);
		case 'F':
			return jjMoveStringLiteralDfa9_1(active0, 0x0L, active1, 0x600000L, active2, 0x60000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x40000000000L, active9, 0x0L, active10, 0x0L);
		case 'G':
			if ((active2 & 0x1000000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(8, 188, 89);
			else if ((active3 & 0x2000L) != 0x0L)
				return jjStartNfaWithStates_1(8, 205, 89);
			else if ((active3 & 0x8000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(8, 243, 89);
			else if ((active6 & 0x20000000L) != 0x0L)
				return jjStartNfaWithStates_1(8, 413, 89);
			else if ((active7 & 0x100L) != 0x0L)
				return jjStartNfaWithStates_1(8, 456, 89);
			else if ((active9 & 0x8L) != 0x0L)
			{
				jjmatchedKind = 579;
				jjmatchedPos = 8;
			}
			return jjMoveStringLiteralDfa9_1(active0, 0x4000000000000000L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x8000L, active9, 0x10L, active10, 0x0L);
		case 'H':
			return jjMoveStringLiteralDfa9_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x100000000L, active8, 0x10080000000000L, active9, 0x0L, active10, 0x0L);
		case 'I':
			if ((active0 & 0x2000000000L) != 0x0L)
				return jjStartNfaWithStates_1(8, 37, 89);
			return jjMoveStringLiteralDfa9_1(active0, 0x4000004000000L, active1, 0x100L, active2, 0x8000068000000L, active3, 0x800000000000000L, active4, 0x0L, active5, 0x0L, active6, 0x1000000000000L, active7, 0x0L, active8, 0x8010000000000L, active9, 0xc004000878000200L, active10, 0x3L);
		case 'L':
			return jjMoveStringLiteralDfa9_1(active0, 0x0L, active1, 0x0L, active2, 0x4000L, active3, 0x400L, active4, 0x400000000000000L, active5, 0x0L, active6, 0x1000000000030000L, active7, 0x0L, active8, 0x2000002000L, active9, 0x2000000L, active10, 0x0L);
		case 'M':
			if ((active9 & 0x80000000L) != 0x0L)
			{
				jjmatchedKind = 607;
				jjmatchedPos = 8;
			}
			return jjMoveStringLiteralDfa9_1(active0, 0x0L, active1, 0x100000000000L, active2, 0x0L, active3, 0x0L, active4, 0x8000000000000L, active5, 0x0L, active6, 0x0L, active7, 0x80000000L, active8, 0x700000001000L, active9, 0x100001000L, active10, 0x0L);
		case 'N':
			if ((active0 & 0x1000000L) != 0x0L)
				return jjStartNfaWithStates_1(8, 24, 89);
			else if ((active1 & 0x4000L) != 0x0L)
			{
				jjmatchedKind = 78;
				jjmatchedPos = 8;
			}
			else if ((active1 & 0x2000000L) != 0x0L)
			{
				jjmatchedKind = 89;
				jjmatchedPos = 8;
			}
			else if ((active2 & 0x400000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(8, 186, 89);
			else if ((active4 & 0x200L) != 0x0L)
				return jjStartNfaWithStates_1(8, 265, 89);
			else if ((active6 & 0x80L) != 0x0L)
				return jjStartNfaWithStates_1(8, 391, 89);
			else if ((active6 & 0x40000000L) != 0x0L)
				return jjStartNfaWithStates_1(8, 414, 89);
			return jjMoveStringLiteralDfa9_1(active0, 0x100000002000000L, active1, 0x20f8c038000L, active2, 0x200000L, active3, 0x0L, active4, 0x0L, active5, 0x2000004000008000L, active6, 0x8000000000000L, active7, 0x20000L, active8, 0x18L, active9, 0x8000000000L, active10, 0x8000L);
		case 'O':
			return jjMoveStringLiteralDfa9_1(active0, 0x0L, active1, 0x60000000L, active2, 0x10000000L, active3, 0x80000L, active4, 0xc800000000000000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x400000000000000L, active9, 0x0L, active10, 0x0L);
		case 'P':
			if ((active1 & 0x80000000000L) != 0x0L)
				return jjStartNfaWithStates_1(8, 107, 89);
			else if ((active9 & 0x40000L) != 0x0L)
			{
				jjmatchedKind = 594;
				jjmatchedPos = 8;
			}
			return jjMoveStringLiteralDfa9_1(active0, 0x0L, active1, 0x20000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x40000000000000L, active7, 0x0L, active8, 0x0L, active9, 0x182000L, active10, 0x0L);
		case 'Q':
			return jjMoveStringLiteralDfa9_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x800000000000L, active9, 0x0L, active10, 0x0L);
		case 'R':
			if ((active0 & 0x8000000000000000L) != 0x0L)
			{
				jjmatchedKind = 63;
				jjmatchedPos = 8;
			}
			else if ((active3 & 0x20000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(8, 245, 89);
			else if ((active5 & 0x8000000000000000L) != 0x0L)
			{
				jjmatchedKind = 383;
				jjmatchedPos = 8;
			}
			else if ((active8 & 0x100000000L) != 0x0L)
				return jjStartNfaWithStates_1(8, 544, 89);
			return jjMoveStringLiteralDfa9_1(active0, 0x1000000000L, active1, 0xc000000000003fL, active2, 0x0L, active3, 0x0L, active4, 0x40000L, active5, 0x0L, active6, 0x4003fL, active7, 0x0L, active8, 0x41fff0020L, active9, 0x0L, active10, 0x0L);
		case 'S':
			return jjMoveStringLiteralDfa9_1(active0, 0x0L, active1, 0x100000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x8000L, active5, 0x0L, active6, 0x0L, active7, 0x40000L, active8, 0x1008000000000L, active9, 0x10000000401L, active10, 0x0L);
		case 'T':
			if ((active1 & 0x1000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(8, 112, 89);
			else if ((active3 & 0x10000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(8, 244, 89);
			else if ((active4 & 0x2L) != 0x0L)
			{
				jjmatchedKind = 257;
				jjmatchedPos = 8;
			}
			else if ((active7 & 0x100000L) != 0x0L)
				return jjStartNfaWithStates_1(8, 468, 89);
			else if ((active7 & 0x1000000L) != 0x0L)
				return jjStartNfaWithStates_1(8, 472, 89);
			else if ((active8 & 0x4000L) != 0x0L)
				return jjStartNfaWithStates_1(8, 526, 89);
			else if ((active8 & 0x100000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(8, 568, 89);
			return jjMoveStringLiteralDfa9_1(active0, 0x0L, active1, 0xe00001000000000L, active2, 0x80L, active3, 0x1000000000000L, active4, 0x1000000000000004L, active5, 0x20000000000000L, active6, 0x0L, active7, 0x8000000040000000L, active8, 0x2L, active9, 0x2000000000004L, active10, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa9_1(active0, 0x0L, active1, 0x1000000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x20080000L, active5, 0x1L, active6, 0x400L, active7, 0x1000000000000L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'V':
			return jjMoveStringLiteralDfa9_1(active0, 0x800000L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0xe0000000L, active9, 0x0L, active10, 0x0L);
		case 'W':
			if ((active3 & 0x100000L) != 0x0L)
				return jjStartNfaWithStates_1(8, 212, 89);
			return jjMoveStringLiteralDfa9_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x2000000000000L, active9, 0x0L, active10, 0x0L);
		case 'X':
			if ((active6 & 0x2000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(8, 433, 89);
			return jjMoveStringLiteralDfa9_1(active0, 0x100000L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'Y':
			if ((active3 & 0x10000000000L) != 0x0L)
				return jjStartNfaWithStates_1(8, 232, 89);
			else if ((active3 & 0x80000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(8, 247, 89);
			else if ((active6 & 0x4000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(8, 434, 89);
			else if ((active9 & 0x4000L) != 0x0L)
				return jjStartNfaWithStates_1(8, 590, 89);
			else if ((active10 & 0x800L) != 0x0L)
				return jjStartNfaWithStates_1(8, 651, 89);
			return jjMoveStringLiteralDfa9_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x4000000000000L, active9, 0x0L, active10, 0x0L);
		case '_':
			return jjMoveStringLiteralDfa9_1(active0, 0x0L, active1, 0x0L, active2, 0x18L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x4000000L, active7, 0x40000000000000f0L, active8, 0x8000000000000000L, active9, 0x600000L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_1(7, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa9_1(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_1(7, old0, old1, old2, old3, old4, old5, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_1(8, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
			return 9;
		}
		switch(curChar)
		{
		case 'A':
			return jjMoveStringLiteralDfa10_1(active0, 0x100000000000000L, active1, 0x2c000004000000L, active2, 0x0L, active3, 0x1000000000000L, active4, 0x0L, active5, 0x0L, active6, 0x40000L, active7, 0x40030000L, active8, 0x100200e0001100L, active9, 0xc000080000L, active10, 0x0L);
		case 'B':
			return jjMoveStringLiteralDfa10_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x4000000000000000L, active4, 0x8000000000000L, active5, 0x0L, active6, 0x0L, active7, 0x100000000000L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'C':
			if ((active0 & 0x4000000L) != 0x0L)
				return jjStartNfaWithStates_1(9, 26, 89);
			return jjMoveStringLiteralDfa10_1(active0, 0x0L, active1, 0x100000000000000L, active2, 0x40000000L, active3, 0x0L, active4, 0x800000000030000L, active5, 0x0L, active6, 0x0L, active7, 0x40010L, active8, 0x0L, active9, 0x10000000000L, active10, 0x0L);
		case 'D':
			if ((active5 & 0x8000L) != 0x0L)
				return jjStartNfaWithStates_1(9, 335, 89);
			else if ((active5 & 0x4000000L) != 0x0L)
				return jjStartNfaWithStates_1(9, 346, 89);
			return jjMoveStringLiteralDfa10_1(active0, 0x0L, active1, 0x20000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x100000L, active10, 0x0L);
		case 'E':
			if ((active0 & 0x800000L) != 0x0L)
				return jjStartNfaWithStates_1(9, 23, 89);
			else if ((active2 & 0x80L) != 0x0L)
				return jjStartNfaWithStates_1(9, 135, 89);
			else if ((active2 & 0x4000L) != 0x0L)
				return jjStartNfaWithStates_1(9, 142, 89);
			else if ((active4 & 0x80000L) != 0x0L)
				return jjStartNfaWithStates_1(9, 275, 89);
			else if ((active4 & 0x20000000L) != 0x0L)
				return jjStartNfaWithStates_1(9, 285, 89);
			else if ((active6 & 0x40000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(9, 438, 89);
			else if ((active6 & 0x1000000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(9, 444, 89);
			else if ((active7 & 0x80000000L) != 0x0L)
				return jjStartNfaWithStates_1(9, 479, 89);
			else if ((active8 & 0x2000L) != 0x0L)
				return jjStartNfaWithStates_1(9, 525, 89);
			else if ((active9 & 0x4L) != 0x0L)
				return jjStartNfaWithStates_1(9, 578, 89);
			else if ((active9 & 0x1000L) != 0x0L)
				return jjStartNfaWithStates_1(9, 588, 89);
			return jjMoveStringLiteralDfa10_1(active0, 0x0L, active1, 0x10000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x1400000000000000L, active5, 0x2000000000L, active6, 0x30000L, active7, 0x100000000L, active8, 0x7000000008000L, active9, 0x2000000000401L, active10, 0x0L);
		case 'G':
			if ((active5 & 0x2000000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(9, 381, 89);
			else if ((active8 & 0x8L) != 0x0L)
				return jjStartNfaWithStates_1(9, 515, 89);
			else if ((active10 & 0x8000L) != 0x0L)
				return jjStartNfaWithStates_1(9, 655, 89);
			return jjMoveStringLiteralDfa10_1(active0, 0x0L, active1, 0x100L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x4000000000L, active6, 0x400L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'H':
			return jjMoveStringLiteralDfa10_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x800000000L, active9, 0x200000L, active10, 0x0L);
		case 'I':
			return jjMoveStringLiteralDfa10_1(active0, 0x0L, active1, 0x600000000000010L, active2, 0x18L, active3, 0x0L, active4, 0x4L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x302400000002L, active9, 0x0L, active10, 0x0L);
		case 'K':
			if ((active2 & 0x200000L) != 0x0L)
				return jjStartNfaWithStates_1(9, 149, 89);
			return jjMoveStringLiteralDfa10_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x200000L);
		case 'L':
			return jjMoveStringLiteralDfa10_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x800000000000L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x20L, active8, 0x0L, active9, 0x2000L, active10, 0x0L);
		case 'M':
			if ((active5 & 0x1L) != 0x0L)
				return jjStartNfaWithStates_1(9, 320, 89);
			return jjMoveStringLiteralDfa10_1(active0, 0x800000000L, active1, 0x4000000000100000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x400010000000L, active8, 0x800000000000000L, active9, 0x400200L, active10, 0x0L);
		case 'N':
			if ((active1 & 0x20000000L) != 0x0L)
			{
				jjmatchedKind = 93;
				jjmatchedPos = 9;
			}
			return jjMoveStringLiteralDfa10_1(active0, 0x0L, active1, 0x40000000L, active2, 0x0L, active3, 0x80000L, active4, 0xc000000000000000L, active5, 0x0L, active6, 0x1000000000000L, active7, 0x4000000000000000L, active8, 0x8010000000000L, active9, 0xc000000000000000L, active10, 0x3L);
		case 'O':
			return jjMoveStringLiteralDfa10_1(active0, 0x0L, active1, 0xc0001000000000L, active2, 0x8000000L, active3, 0x0L, active4, 0x10000000000000L, active5, 0x0L, active6, 0x0L, active7, 0x40L, active8, 0x8000480000000000L, active9, 0x4000878000000L, active10, 0x0L);
		case 'P':
			if ((active1 & 0x100000000000L) != 0x0L)
				return jjStartNfaWithStates_1(9, 108, 89);
			else if ((active8 & 0x400000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(9, 570, 89);
			break;
		case 'R':
			if ((active1 & 0x80L) != 0x0L)
				return jjStartNfaWithStates_1(9, 71, 89);
			else if ((active2 & 0x10000000L) != 0x0L)
				return jjStartNfaWithStates_1(9, 156, 89);
			else if ((active4 & 0x400000L) != 0x0L)
				return jjStartNfaWithStates_1(9, 278, 89);
			else if ((active7 & 0x200000L) != 0x0L)
				return jjStartNfaWithStates_1(9, 469, 89);
			return jjMoveStringLiteralDfa10_1(active0, 0x0L, active1, 0x800000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x10000004000000L, active7, 0x0L, active8, 0x40000000000L, active9, 0x0L, active10, 0x0L);
		case 'S':
			if ((active0 & 0x40000000L) != 0x0L)
				return jjStartNfaWithStates_1(9, 30, 89);
			else if ((active1 & 0x20L) != 0x0L)
				return jjStartNfaWithStates_1(9, 69, 89);
			else if ((active6 & 0x1000000000L) != 0x0L)
				return jjStartNfaWithStates_1(9, 420, 89);
			else if ((active6 & 0x800000000000L) != 0x0L)
				return jjStartNfaWithStates_1(9, 431, 89);
			else if ((active9 & 0x100000000L) != 0x0L)
				return jjStartNfaWithStates_1(9, 608, 89);
			return jjMoveStringLiteralDfa10_1(active0, 0x0L, active1, 0x1000000000000000L, active2, 0x20000000L, active3, 0x0L, active4, 0x80000000000L, active5, 0x0L, active6, 0x0L, active7, 0x1000000000080L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'T':
			if ((active0 & 0x2000000L) != 0x0L)
				return jjStartNfaWithStates_1(9, 25, 89);
			else if ((active1 & 0x80000000L) != 0x0L)
			{
				jjmatchedKind = 95;
				jjmatchedPos = 9;
			}
			else if ((active2 & 0x100000000L) != 0x0L)
				return jjStartNfaWithStates_1(9, 160, 89);
			else if ((active6 & 0x8000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(9, 435, 89);
			else if ((active8 & 0x10L) != 0x0L)
				return jjStartNfaWithStates_1(9, 516, 89);
			return jjMoveStringLiteralDfa10_1(active0, 0x4004001080000000L, active1, 0xf00000000L, active2, 0x8000000000000L, active3, 0x0L, active4, 0x8000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x8000000000L, active9, 0x0L, active10, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa10_1(active0, 0x0L, active1, 0x600000L, active2, 0x60000000000L, active3, 0x400L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x800000000000L, active9, 0x0L, active10, 0x0L);
		case 'V':
			return jjMoveStringLiteralDfa10_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x800000000000000L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x1fff0000L, active9, 0x0L, active10, 0x0L);
		case 'X':
			if ((active4 & 0x4000000000L) != 0x0L)
				return jjStartNfaWithStates_1(9, 294, 89);
			break;
		case 'Y':
			if ((active4 & 0x2000L) != 0x0L)
			{
				jjmatchedKind = 269;
				jjmatchedPos = 9;
			}
			else if ((active4 & 0x40000L) != 0x0L)
				return jjStartNfaWithStates_1(9, 274, 89);
			else if ((active5 & 0x20000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(9, 373, 89);
			else if ((active8 & 0x20L) != 0x0L)
				return jjStartNfaWithStates_1(9, 517, 89);
			else if ((active9 & 0x40000000000L) != 0x0L)
				return jjStartNfaWithStates_1(9, 618, 89);
			return jjMoveStringLiteralDfa10_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x4000L, active5, 0x0L, active6, 0x0L, active7, 0x8000000000000000L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case '_':
			return jjMoveStringLiteralDfa10_1(active0, 0x100000L, active1, 0x803800fL, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x3fL, active7, 0x0L, active8, 0x0L, active9, 0x402000010L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_1(8, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa10_1(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_1(8, old0, old1, old2, old3, old4, old5, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_1(9, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
			return 10;
		}
		switch(curChar)
		{
		case 'A':
			return jjMoveStringLiteralDfa11_1(active0, 0x0L, active1, 0x800000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x4000L, active5, 0x0L, active6, 0x0L, active7, 0x4000000000000010L, active8, 0xc84881fff0000L, active9, 0x0L, active10, 0x0L);
		case 'C':
			if ((active8 & 0x400000000L) != 0x0L)
				return jjStartNfaWithStates_1(10, 546, 89);
			return jjMoveStringLiteralDfa11_1(active0, 0x100000L, active1, 0x8000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x10000000000000L, active7, 0x40L, active8, 0x1100000000000L, active9, 0x2000000L, active10, 0x0L);
		case 'D':
			if ((active3 & 0x80000L) != 0x0L)
				return jjStartNfaWithStates_1(10, 211, 89);
			else if ((active4 & 0x4000000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(10, 318, 89);
			else if ((active4 & 0x8000000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(10, 319, 89);
			else if ((active9 & 0x2000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(10, 625, 89);
			return jjMoveStringLiteralDfa11_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x80000L, active10, 0x0L);
		case 'E':
			if ((active0 & 0x800000000L) != 0x0L)
				return jjStartNfaWithStates_1(10, 35, 89);
			else if ((active1 & 0x100000L) != 0x0L)
				return jjStartNfaWithStates_1(10, 84, 89);
			else if ((active1 & 0x4000000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(10, 126, 89);
			else if ((active3 & 0x400L) != 0x0L)
				return jjStartNfaWithStates_1(10, 202, 89);
			else if ((active3 & 0x800000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(10, 251, 89);
			else if ((active7 & 0x10000000L) != 0x0L)
				return jjStartNfaWithStates_1(10, 476, 89);
			else if ((active7 & 0x400000000000L) != 0x0L)
				return jjStartNfaWithStates_1(10, 494, 89);
			else if ((active9 & 0x200L) != 0x0L)
				return jjStartNfaWithStates_1(10, 585, 89);
			else if ((active9 & 0x2000L) != 0x0L)
				return jjStartNfaWithStates_1(10, 589, 89);
			return jjMoveStringLiteralDfa11_1(active0, 0x0L, active1, 0x1000000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x8000000000000L, active5, 0x0L, active6, 0x4000000L, active7, 0x1000000000020L, active8, 0x2000000000000L, active9, 0xc000000000000000L, active10, 0x200003L);
		case 'F':
			return jjMoveStringLiteralDfa11_1(active0, 0x0L, active1, 0x10000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'G':
			if ((active6 & 0x1000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(10, 432, 89);
			return jjMoveStringLiteralDfa11_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x10000000000000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'H':
			if ((active0 & 0x4000000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(10, 62, 89);
			else if ((active6 & 0x400L) != 0x0L)
				return jjStartNfaWithStates_1(10, 394, 89);
			return jjMoveStringLiteralDfa11_1(active0, 0x0L, active1, 0x100000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x40000L, active8, 0x0L, active9, 0x10000000000L, active10, 0x0L);
		case 'I':
			return jjMoveStringLiteralDfa11_1(active0, 0x1080000000L, active1, 0x20000000100L, active2, 0x8000000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x500000L, active10, 0x0L);
		case 'L':
			if ((active1 & 0x4000000L) != 0x0L)
				return jjStartNfaWithStates_1(10, 90, 89);
			else if ((active8 & 0x1000L) != 0x0L)
				return jjStartNfaWithStates_1(10, 524, 89);
			return jjMoveStringLiteralDfa11_1(active0, 0x0L, active1, 0x40000000000001L, active2, 0x0L, active3, 0x4000000000000000L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x100040000000L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa11_1(active0, 0x100000000000000L, active1, 0x600000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x1L, active7, 0x100020000L, active8, 0x0L, active9, 0x8000000000L, active10, 0x0L);
		case 'N':
			if ((active2 & 0x8000000L) != 0x0L)
				return jjStartNfaWithStates_1(10, 155, 89);
			else if ((active8 & 0x100L) != 0x0L)
				return jjStartNfaWithStates_1(10, 520, 89);
			else if ((active9 & 0x8000000L) != 0x0L)
			{
				jjmatchedKind = 603;
				jjmatchedPos = 10;
			}
			else if ((active9 & 0x800000000L) != 0x0L)
				return jjStartNfaWithStates_1(10, 611, 89);
			return jjMoveStringLiteralDfa11_1(active0, 0x0L, active1, 0x8610000L, active2, 0x60000000018L, active3, 0x0L, active4, 0x400000000000000L, active5, 0x0L, active6, 0x40002L, active7, 0x0L, active8, 0x602000000000L, active9, 0x4000070000000L, active10, 0x0L);
		case 'O':
			return jjMoveStringLiteralDfa11_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x4L, active5, 0x0L, active6, 0x4L, active7, 0x0L, active8, 0x2L, active9, 0x200000L, active10, 0x0L);
		case 'P':
			if ((active8 & 0x800000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(10, 571, 89);
			return jjMoveStringLiteralDfa11_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x8000000000000000L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'Q':
			return jjMoveStringLiteralDfa11_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x80L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'R':
			if ((active1 & 0x1000000000L) != 0x0L)
				return jjStartNfaWithStates_1(10, 100, 89);
			else if ((active8 & 0x8000L) != 0x0L)
				return jjStartNfaWithStates_1(10, 527, 89);
			else if ((active8 & 0x10000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(10, 564, 89);
			else if ((active9 & 0x400L) != 0x0L)
				return jjStartNfaWithStates_1(10, 586, 89);
			return jjMoveStringLiteralDfa11_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x80000000e0000000L, active9, 0x400000010L, active10, 0x0L);
		case 'S':
			if ((active1 & 0x800000000L) != 0x0L)
				return jjStartNfaWithStates_1(10, 99, 89);
			else if ((active2 & 0x40000000L) != 0x0L)
				return jjStartNfaWithStates_1(10, 158, 89);
			else if ((active4 & 0x8000L) != 0x0L)
				return jjStartNfaWithStates_1(10, 271, 89);
			return jjMoveStringLiteralDfa11_1(active0, 0x0L, active1, 0x2001eL, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x2000000000L, active6, 0x38L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'T':
			if ((active4 & 0x10000L) != 0x0L)
			{
				jjmatchedKind = 272;
				jjmatchedPos = 10;
			}
			else if ((active8 & 0x10000000000L) != 0x0L)
				return jjStartNfaWithStates_1(10, 552, 89);
			else if ((active9 & 0x1L) != 0x0L)
				return jjStartNfaWithStates_1(10, 576, 89);
			return jjMoveStringLiteralDfa11_1(active0, 0x0L, active1, 0x2c000000000000L, active2, 0x20000000L, active3, 0x1000000000000L, active4, 0x800080000020000L, active5, 0x4000000000L, active6, 0x0L, active7, 0x10000L, active8, 0x0L, active9, 0x4000000000L, active10, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa11_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x80000000000L, active9, 0x0L, active10, 0x0L);
		case 'W':
			if ((active1 & 0x80000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(10, 119, 89);
			break;
		case 'X':
			return jjMoveStringLiteralDfa11_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x1000000000000000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'Y':
			if ((active0 & 0x4000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(10, 50, 89);
			else if ((active3 & 0x800000000000L) != 0x0L)
				return jjStartNfaWithStates_1(10, 239, 89);
			else if ((active8 & 0x20000000000L) != 0x0L)
				return jjStartNfaWithStates_1(10, 553, 89);
			break;
		case '_':
			return jjMoveStringLiteralDfa11_1(active0, 0x0L, active1, 0x740000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x30000L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_1(9, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa11_1(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_1(9, old0, old1, old2, old3, old4, old5, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_1(10, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
			return 11;
		}
		switch(curChar)
		{
		case 'A':
			if ((active7 & 0x100000000L) != 0x0L)
				return jjStartNfaWithStates_1(11, 480, 89);
			return jjMoveStringLiteralDfa12_1(active0, 0x100000L, active1, 0x14000000018000L, active2, 0x0L, active3, 0x0L, active4, 0x80000020000L, active5, 0x0L, active6, 0x2L, active7, 0x10000L, active8, 0x0L, active9, 0x4004000000000L, active10, 0x0L);
		case 'B':
			return jjMoveStringLiteralDfa12_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x20000000L, active9, 0x0L, active10, 0x0L);
		case 'C':
			return jjMoveStringLiteralDfa12_1(active0, 0x0L, active1, 0x100620000L, active2, 0x60000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x10000L, active7, 0x0L, active8, 0x40040000000L, active9, 0x0L, active10, 0x0L);
		case 'D':
			if ((active9 & 0x80000L) != 0x0L)
				return jjStartNfaWithStates_1(11, 595, 89);
			return jjMoveStringLiteralDfa12_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x20000L, active7, 0x0L, active8, 0x0L, active9, 0xc000000000000000L, active10, 0x3L);
		case 'E':
			if ((active0 & 0x100000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(11, 56, 89);
			else if ((active1 & 0x8000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(11, 115, 89);
			else if ((active1 & 0x40000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(11, 118, 89);
			else if ((active1 & 0x200000000000000L) != 0x0L)
			{
				jjmatchedKind = 121;
				jjmatchedPos = 11;
			}
			else if ((active3 & 0x4000000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(11, 254, 89);
			else if ((active7 & 0x20000L) != 0x0L)
				return jjStartNfaWithStates_1(11, 465, 89);
			else if ((active7 & 0x100000000000L) != 0x0L)
				return jjStartNfaWithStates_1(11, 492, 89);
			else if ((active7 & 0x8000000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(11, 511, 89);
			else if ((active9 & 0x8000000000L) != 0x0L)
				return jjStartNfaWithStates_1(11, 615, 89);
			return jjMoveStringLiteralDfa12_1(active0, 0x0L, active1, 0x50000000000000fL, active2, 0x0L, active3, 0x0L, active4, 0x800000000000000L, active5, 0x0L, active6, 0x10000000000000L, active7, 0x40000L, active8, 0x0L, active9, 0x10400000010L, active10, 0x0L);
		case 'F':
			return jjMoveStringLiteralDfa12_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x100000L, active10, 0x0L);
		case 'G':
			return jjMoveStringLiteralDfa12_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x400000000004000L, active5, 0x0L, active6, 0x4000000L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'H':
			if ((active1 & 0x20000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(11, 117, 89);
			else if ((active5 & 0x4000000000L) != 0x0L)
				return jjStartNfaWithStates_1(11, 358, 89);
			break;
		case 'I':
			return jjMoveStringLiteralDfa12_1(active0, 0x0L, active1, 0x0L, active2, 0x20000000L, active3, 0x1000000000000L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x8000000000000000L, active9, 0x0L, active10, 0x0L);
		case 'K':
			if ((active6 & 0x40000L) != 0x0L)
				return jjStartNfaWithStates_1(11, 402, 89);
			else if ((active8 & 0x2000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(11, 561, 89);
			break;
		case 'L':
			return jjMoveStringLiteralDfa12_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x80L, active8, 0x1fff0000L, active9, 0x0L, active10, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa12_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x4000000000000000L, active8, 0x8000000000L, active9, 0x0L, active10, 0x0L);
		case 'N':
			if ((active1 & 0x100L) != 0x0L)
				return jjStartNfaWithStates_1(11, 72, 89);
			else if ((active4 & 0x4L) != 0x0L)
				return jjStartNfaWithStates_1(11, 258, 89);
			else if ((active8 & 0x2L) != 0x0L)
				return jjStartNfaWithStates_1(11, 513, 89);
			return jjMoveStringLiteralDfa12_1(active0, 0x0L, active1, 0x800020240000000L, active2, 0x0L, active3, 0x0L, active4, 0x10000000000000L, active5, 0x0L, active6, 0x0L, active7, 0x20L, active8, 0x80000000L, active9, 0x400000L, active10, 0x0L);
		case 'O':
			return jjMoveStringLiteralDfa12_1(active0, 0x80000000L, active1, 0x0L, active2, 0x8000000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x1L, active7, 0x40000000L, active8, 0x1000000000000L, active9, 0x2000000L, active10, 0x0L);
		case 'P':
			return jjMoveStringLiteralDfa12_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x38L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'R':
			if ((active1 & 0x1000000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(11, 124, 89);
			else if ((active4 & 0x8000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(11, 307, 89);
			else if ((active7 & 0x1000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(11, 496, 89);
			else if ((active8 & 0x800000000L) != 0x0L)
				return jjStartNfaWithStates_1(11, 547, 89);
			else if ((active8 & 0x80000000000L) != 0x0L)
				return jjStartNfaWithStates_1(11, 555, 89);
			else if ((active8 & 0x4000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(11, 562, 89);
			return jjMoveStringLiteralDfa12_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x4L, active7, 0x10L, active8, 0x8900000000000L, active9, 0x0L, active10, 0x0L);
		case 'S':
			return jjMoveStringLiteralDfa12_1(active0, 0x0L, active1, 0x400000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x70000000L, active10, 0x0L);
		case 'T':
			if ((active4 & 0x1000000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(11, 316, 89);
			else if ((active8 & 0x2000000000L) != 0x0L)
				return jjStartNfaWithStates_1(11, 549, 89);
			else if ((active10 & 0x200000L) != 0x0L)
				return jjStartNfaWithStates_1(11, 661, 89);
			return jjMoveStringLiteralDfa12_1(active0, 0x1000000000L, active1, 0x10L, active2, 0x18L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x40L, active8, 0x400000000000L, active9, 0x0L, active10, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa12_1(active0, 0x0L, active1, 0x8000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x200000000000L, active9, 0x200000L, active10, 0x0L);
		case '_':
			return jjMoveStringLiteralDfa12_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x2000000000L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_1(10, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa12_1(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_1(10, old0, old1, old2, old3, old4, old5, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_1(11, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
			return 12;
		}
		switch(curChar)
		{
		case 'A':
			return jjMoveStringLiteralDfa13_1(active0, 0x0L, active1, 0x340000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'C':
			if ((active2 & 0x20000000L) != 0x0L)
				return jjStartNfaWithStates_1(12, 157, 89);
			return jjMoveStringLiteralDfa13_1(active0, 0x0L, active1, 0x400000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x80000000L, active9, 0x0L, active10, 0x0L);
		case 'D':
			return jjMoveStringLiteralDfa13_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x5L, active7, 0x10L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'E':
			if ((active7 & 0x4000000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(12, 510, 89);
			return jjMoveStringLiteralDfa13_1(active0, 0x0L, active1, 0x0L, active2, 0x18L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x4000038L, active7, 0x40L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'F':
			if ((active9 & 0x100000L) != 0x0L)
				return jjStartNfaWithStates_1(12, 596, 89);
			break;
		case 'G':
			if ((active1 & 0x20000000000L) != 0x0L)
				return jjStartNfaWithStates_1(12, 105, 89);
			else if ((active4 & 0x4000L) != 0x0L)
				return jjStartNfaWithStates_1(12, 270, 89);
			return jjMoveStringLiteralDfa13_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x20000L, active5, 0x0L, active6, 0x0L, active7, 0x40000020L, active8, 0x8000000000000000L, active9, 0x400000010L, active10, 0x0L);
		case 'H':
			if ((active8 & 0x400000000000L) != 0x0L)
				return jjStartNfaWithStates_1(12, 558, 89);
			return jjMoveStringLiteralDfa13_1(active0, 0x0L, active1, 0x20000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x40000000L, active9, 0x0L, active10, 0x0L);
		case 'I':
			return jjMoveStringLiteralDfa13_1(active0, 0x1000000000L, active1, 0x10L, active2, 0x0L, active3, 0x0L, active4, 0x10000000000000L, active5, 0x0L, active6, 0x20000L, active7, 0x0L, active8, 0x20000000L, active9, 0x0L, active10, 0x0L);
		case 'L':
			if ((active9 & 0x4000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(12, 626, 89);
			return jjMoveStringLiteralDfa13_1(active0, 0x0L, active1, 0x4000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x10000L, active8, 0x0L, active9, 0x4000000000L, active10, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa13_1(active0, 0x0L, active1, 0x100000008010000L, active2, 0x0L, active3, 0x0L, active4, 0x80000000000L, active5, 0x0L, active6, 0x2L, active7, 0x40000L, active8, 0x0L, active9, 0x10000000000L, active10, 0x0L);
		case 'N':
			if ((active0 & 0x80000000L) != 0x0L)
				return jjStartNfaWithStates_1(12, 31, 89);
			else if ((active2 & 0x8000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(12, 179, 89);
			return jjMoveStringLiteralDfa13_1(active0, 0x0L, active1, 0x1L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x1000000000000L, active9, 0x0L, active10, 0x0L);
		case 'O':
			return jjMoveStringLiteralDfa13_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x1000000000000L, active4, 0x0L, active5, 0x0L, active6, 0x10000L, active7, 0x0L, active8, 0x100000000000L, active9, 0x0L, active10, 0x0L);
		case 'P':
			if ((active8 & 0x8000000000L) != 0x0L)
				return jjStartNfaWithStates_1(12, 551, 89);
			return jjMoveStringLiteralDfa13_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x10000000000000L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'R':
			if ((active9 & 0x200000L) != 0x0L)
				return jjStartNfaWithStates_1(12, 597, 89);
			return jjMoveStringLiteralDfa13_1(active0, 0x100000L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x2000000000L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'S':
			return jjMoveStringLiteralDfa13_1(active0, 0x0L, active1, 0xc00000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x80L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'T':
			return jjMoveStringLiteralDfa13_1(active0, 0x0L, active1, 0x60800eL, active2, 0x60000000000L, active3, 0x0L, active4, 0xc00000000000000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0xa00000000000L, active9, 0x0L, active10, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa13_1(active0, 0x0L, active1, 0x10000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x2400000L, active10, 0x0L);
		case 'Y':
			if ((active8 & 0x8000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(12, 563, 89);
			break;
		case '_':
			return jjMoveStringLiteralDfa13_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x4001fff0000L, active9, 0xc000000070000000L, active10, 0x3L);
		default :
			break;
		}
		return jjStartNfa_1(11, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa13_1(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_1(11, old0, old1, old2, old3, old4, old5, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_1(12, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
			return 13;
		}
		switch(curChar)
		{
		case 'A':
			if ((active1 & 0x100000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(13, 120, 89);
			else if ((active7 & 0x40000L) != 0x0L)
				return jjStartNfaWithStates_1(13, 466, 89);
			else if ((active9 & 0x10000000000L) != 0x0L)
				return jjStartNfaWithStates_1(13, 616, 89);
			return jjMoveStringLiteralDfa14_1(active0, 0x0L, active1, 0x8000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x40000000L, active9, 0x10000000L, active10, 0x0L);
		case 'B':
			return jjMoveStringLiteralDfa14_1(active0, 0x0L, active1, 0x8000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'C':
			return jjMoveStringLiteralDfa14_1(active0, 0x0L, active1, 0x10L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x38L, active7, 0x0L, active8, 0x0L, active9, 0x20000000L, active10, 0x0L);
		case 'D':
			if ((active8 & 0x1000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(13, 560, 89);
			return jjMoveStringLiteralDfa14_1(active0, 0x100000L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0xf0000L, active9, 0x0L, active10, 0x0L);
		case 'E':
			if ((active1 & 0x10000L) != 0x0L)
				return jjStartNfaWithStates_1(13, 80, 89);
			else if ((active6 & 0x1L) != 0x0L)
				return jjStartNfaWithStates_1(13, 384, 89);
			else if ((active6 & 0x2L) != 0x0L)
				return jjStartNfaWithStates_1(13, 385, 89);
			else if ((active8 & 0x200000000000L) != 0x0L)
				return jjStartNfaWithStates_1(13, 557, 89);
			return jjMoveStringLiteralDfa14_1(active0, 0x0L, active1, 0x20000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x2000000000L, active6, 0x0L, active7, 0x0L, active8, 0x800000000000L, active9, 0x400000010L, active10, 0x0L);
		case 'F':
			return jjMoveStringLiteralDfa14_1(active0, 0x0L, active1, 0x800000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'G':
			if ((active4 & 0x20000L) != 0x0L)
				return jjStartNfaWithStates_1(13, 273, 89);
			return jjMoveStringLiteralDfa14_1(active0, 0x0L, active1, 0x1L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'H':
			if ((active4 & 0x400000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(13, 314, 89);
			return jjMoveStringLiteralDfa14_1(active0, 0x0L, active1, 0x400000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x80700000L, active9, 0x0L, active10, 0x0L);
		case 'I':
			return jjMoveStringLiteralDfa14_1(active0, 0x0L, active1, 0x600000L, active2, 0x60000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x4L, active7, 0x10L, active8, 0x8000000000000000L, active9, 0x0L, active10, 0x0L);
		case 'L':
			return jjMoveStringLiteralDfa14_1(active0, 0x0L, active1, 0x10000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa14_1(active0, 0x0L, active1, 0x240000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x3800000L, active9, 0x0L, active10, 0x0L);
		case 'N':
			if ((active3 & 0x1000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(13, 240, 89);
			return jjMoveStringLiteralDfa14_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x10000L, active7, 0x0L, active8, 0x20000000L, active9, 0x2000000L, active10, 0x0L);
		case 'O':
			return jjMoveStringLiteralDfa14_1(active0, 0x1000000000L, active1, 0x4000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x10000L, active8, 0x0L, active9, 0x4000000000L, active10, 0x0L);
		case 'P':
			if ((active4 & 0x80000000000L) != 0x0L)
				return jjStartNfaWithStates_1(13, 299, 89);
			break;
		case 'R':
			return jjMoveStringLiteralDfa14_1(active0, 0x0L, active1, 0x0L, active2, 0x18L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x40000000L, active10, 0x0L);
		case 'S':
			if ((active7 & 0x40000000L) != 0x0L)
				return jjStartNfaWithStates_1(13, 478, 89);
			return jjMoveStringLiteralDfa14_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x20000L, active7, 0x0L, active8, 0x140004000000L, active9, 0x0L, active10, 0x0L);
		case 'T':
			if ((active6 & 0x10000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(13, 436, 89);
			return jjMoveStringLiteralDfa14_1(active0, 0x0L, active1, 0x400000100000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0xe0L, active8, 0x0L, active9, 0xc000000000400000L, active10, 0x3L);
		case 'X':
			if ((active6 & 0x4000000L) != 0x0L)
				return jjStartNfaWithStates_1(13, 410, 89);
			break;
		case 'Y':
			return jjMoveStringLiteralDfa14_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x18000000L, active9, 0x0L, active10, 0x0L);
		case 'Z':
			return jjMoveStringLiteralDfa14_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x10000000000000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case '_':
			return jjMoveStringLiteralDfa14_1(active0, 0x0L, active1, 0xeL, active2, 0x0L, active3, 0x0L, active4, 0x800000000000000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_1(12, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa14_1(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_1(12, old0, old1, old2, old3, old4, old5, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_1(13, active0, active1, active2, 0L, active4, active5, active6, active7, active8, active9, active10, 0L);
			return 14;
		}
		switch(curChar)
		{
		case 'A':
			return jjMoveStringLiteralDfa15_1(active0, 0x0L, active1, 0x400000100000000L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x80L, active8, 0xa00f0000L, active9, 0x0L, active10, 0x0L);
		case 'C':
			if ((active6 & 0x20000L) != 0x0L)
				return jjStartNfaWithStates_1(14, 401, 89);
			return jjMoveStringLiteralDfa15_1(active0, 0x0L, active1, 0x2L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x10000000L, active10, 0x0L);
		case 'E':
			if ((active1 & 0x40000000L) != 0x0L)
				return jjStartNfaWithStates_1(14, 94, 89);
			else if ((active1 & 0x200000000L) != 0x0L)
				return jjStartNfaWithStates_1(14, 97, 89);
			else if ((active4 & 0x10000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(14, 308, 89);
			else if ((active9 & 0x400000L) != 0x0L)
				return jjStartNfaWithStates_1(14, 598, 89);
			return jjMoveStringLiteralDfa15_1(active0, 0x0L, active1, 0x408000000L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x14001c000000L, active9, 0x0L, active10, 0x0L);
		case 'G':
			if ((active1 & 0x4000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(14, 114, 89);
			else if ((active7 & 0x10000L) != 0x0L)
				return jjStartNfaWithStates_1(14, 464, 89);
			else if ((active9 & 0x4000000000L) != 0x0L)
				return jjStartNfaWithStates_1(14, 614, 89);
			return jjMoveStringLiteralDfa15_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active5, 0x2000000000L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'H':
			if ((active7 & 0x20L) != 0x0L)
				return jjStartNfaWithStates_1(14, 453, 89);
			break;
		case 'I':
			return jjMoveStringLiteralDfa15_1(active0, 0x100000L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x38L, active7, 0x0L, active8, 0x1800000L, active9, 0x0L, active10, 0x0L);
		case 'L':
			return jjMoveStringLiteralDfa15_1(active0, 0x0L, active1, 0x8000L, active2, 0x0L, active4, 0x800000000000000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa15_1(active0, 0x0L, active1, 0x20000L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'N':
			if ((active0 & 0x1000000000L) != 0x0L)
				return jjStartNfaWithStates_1(14, 36, 89);
			else if ((active8 & 0x8000000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(14, 575, 89);
			return jjMoveStringLiteralDfa15_1(active0, 0x0L, active1, 0x4L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x4L, active7, 0x10L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'O':
			return jjMoveStringLiteralDfa15_1(active0, 0x0L, active1, 0x800000000600000L, active2, 0x60000000000L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x2700000L, active9, 0x60000000L, active10, 0x0L);
		case 'R':
			if ((active8 & 0x40000000L) != 0x0L)
				return jjStartNfaWithStates_1(14, 542, 89);
			else if ((active8 & 0x800000000000L) != 0x0L)
				return jjStartNfaWithStates_1(14, 559, 89);
			break;
		case 'S':
			if ((active1 & 0x10L) != 0x0L)
				return jjStartNfaWithStates_1(14, 68, 89);
			return jjMoveStringLiteralDfa15_1(active0, 0x0L, active1, 0x8L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'T':
			if ((active6 & 0x10000L) != 0x0L)
				return jjStartNfaWithStates_1(14, 400, 89);
			else if ((active9 & 0x2000000L) != 0x0L)
				return jjStartNfaWithStates_1(14, 601, 89);
			return jjMoveStringLiteralDfa15_1(active0, 0x0L, active1, 0x10000000000001L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'V':
			return jjMoveStringLiteralDfa15_1(active0, 0x0L, active1, 0x0L, active2, 0x18L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'X':
			if ((active9 & 0x10L) != 0x0L)
				return jjStartNfaWithStates_1(14, 580, 89);
			else if ((active9 & 0x400000000L) != 0x0L)
				return jjStartNfaWithStates_1(14, 610, 89);
			break;
		case 'Y':
			return jjMoveStringLiteralDfa15_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0xc000000000000000L, active10, 0x3L);
		case '_':
			return jjMoveStringLiteralDfa15_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x40L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_1(13, active0, active1, active2, 0L, active4, active5, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa15_1(long old0, long active0, long old1, long active1, long old2, long active2, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_1(13, old0, old1, old2, 0L, old4, old5, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_1(14, active0, active1, active2, 0L, active4, active5, active6, active7, active8, active9, active10, 0L);
			return 15;
		}
		switch(curChar)
		{
		case 'A':
			if ((active1 & 0x20000L) != 0x0L)
				return jjStartNfaWithStates_1(15, 81, 89);
			return jjMoveStringLiteralDfa16_1(active0, 0x0L, active1, 0x6L, active2, 0x18L, active4, 0x0L, active5, 0x0L, active6, 0x4L, active7, 0x10L, active8, 0x18000000L, active9, 0x0L, active10, 0x0L);
		case 'C':
			return jjMoveStringLiteralDfa16_1(active0, 0x0L, active1, 0x8L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x140004000000L, active9, 0x0L, active10, 0x0L);
		case 'E':
			return jjMoveStringLiteralDfa16_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x800000000000000L, active5, 0x2000000000L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'F':
			return jjMoveStringLiteralDfa16_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x38L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'H':
			if ((active1 & 0x1L) != 0x0L)
				return jjStartNfaWithStates_1(15, 64, 89);
			break;
		case 'L':
			return jjMoveStringLiteralDfa16_1(active0, 0x0L, active1, 0x100000000L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x40L, active8, 0x0L, active9, 0x40000000L, active10, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa16_1(active0, 0x0L, active1, 0x400000400000000L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x20000000L, active10, 0x0L);
		case 'N':
			if ((active1 & 0x200000L) != 0x0L)
			{
				jjmatchedKind = 85;
				jjmatchedPos = 15;
			}
			else if ((active2 & 0x20000000000L) != 0x0L)
			{
				jjmatchedKind = 169;
				jjmatchedPos = 15;
			}
			return jjMoveStringLiteralDfa16_1(active0, 0x100000L, active1, 0x400000L, active2, 0x40000000000L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x3800000L, active9, 0x0L, active10, 0x0L);
		case 'O':
			return jjMoveStringLiteralDfa16_1(active0, 0x0L, active1, 0x8000L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'P':
			return jjMoveStringLiteralDfa16_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0xc000000000000000L, active10, 0x3L);
		case 'R':
			if ((active1 & 0x8000000L) != 0x0L)
				return jjStartNfaWithStates_1(15, 91, 89);
			else if ((active8 & 0x80000000L) != 0x0L)
				return jjStartNfaWithStates_1(15, 543, 89);
			return jjMoveStringLiteralDfa16_1(active0, 0x0L, active1, 0x800000000000000L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x20000000L, active9, 0x0L, active10, 0x0L);
		case 'T':
			return jjMoveStringLiteralDfa16_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x80L, active8, 0x0L, active9, 0x10000000L, active10, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa16_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x700000L, active9, 0x0L, active10, 0x0L);
		case 'Y':
			if ((active8 & 0x10000L) != 0x0L)
			{
				jjmatchedKind = 528;
				jjmatchedPos = 15;
			}
			return jjMoveStringLiteralDfa16_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0xe0000L, active9, 0x0L, active10, 0x0L);
		case '_':
			return jjMoveStringLiteralDfa16_1(active0, 0x0L, active1, 0x10000000000000L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_1(14, active0, active1, active2, 0L, active4, active5, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa16_1(long old0, long active0, long old1, long active1, long old2, long active2, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_1(14, old0, old1, old2, 0L, old4, old5, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_1(15, active0, active1, active2, 0L, active4, active5, active6, active7, active8, active9, active10, 0L);
			return 16;
		}
		switch(curChar)
		{
		case 'A':
			if ((active1 & 0x400000000L) != 0x0L)
				return jjStartNfaWithStates_1(16, 98, 89);
			return jjMoveStringLiteralDfa17_1(active0, 0x100000L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'E':
			if ((active7 & 0x80L) != 0x0L)
				return jjStartNfaWithStates_1(16, 455, 89);
			return jjMoveStringLiteralDfa17_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x40L, active8, 0x0L, active9, 0xc000000000000000L, active10, 0x3L);
		case 'G':
			if ((active1 & 0x8000L) != 0x0L)
				return jjStartNfaWithStates_1(16, 79, 89);
			break;
		case 'H':
			return jjMoveStringLiteralDfa17_1(active0, 0x0L, active1, 0x8L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'I':
			return jjMoveStringLiteralDfa17_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x38L, active7, 0x0L, active8, 0x0L, active9, 0x10000000L, active10, 0x0L);
		case 'L':
			return jjMoveStringLiteralDfa17_1(active0, 0x0L, active1, 0x0L, active2, 0x18L, active4, 0x0L, active5, 0x0L, active6, 0x4L, active7, 0x10L, active8, 0x0L, active9, 0x40000000L, active10, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa17_1(active0, 0x0L, active1, 0x800000000000004L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x20000000L, active10, 0x0L);
		case 'N':
			return jjMoveStringLiteralDfa17_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x800000000000000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'O':
			return jjMoveStringLiteralDfa17_1(active0, 0x0L, active1, 0x100000000L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x140004000000L, active9, 0x0L, active10, 0x0L);
		case 'P':
			if ((active1 & 0x400000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(16, 122, 89);
			break;
		case 'R':
			if ((active8 & 0x100000L) != 0x0L)
			{
				jjmatchedKind = 532;
				jjmatchedPos = 16;
			}
			else if ((active8 & 0x8000000L) != 0x0L)
			{
				jjmatchedKind = 539;
				jjmatchedPos = 16;
			}
			return jjMoveStringLiteralDfa17_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x10600000L, active9, 0x0L, active10, 0x0L);
		case 'T':
			return jjMoveStringLiteralDfa17_1(active0, 0x0L, active1, 0x10000000000002L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x2000000L, active9, 0x0L, active10, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa17_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x1800000L, active9, 0x0L, active10, 0x0L);
		case 'X':
			if ((active5 & 0x2000000000L) != 0x0L)
				return jjStartNfaWithStates_1(16, 357, 89);
			break;
		case 'Y':
			if ((active8 & 0x20000000L) != 0x0L)
				return jjStartNfaWithStates_1(16, 541, 89);
			break;
		case '_':
			return jjMoveStringLiteralDfa17_1(active0, 0x0L, active1, 0x400000L, active2, 0x40000000000L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0xe0000L, active9, 0x0L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_1(15, active0, active1, active2, 0L, active4, active5, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa17_1(long old0, long active0, long old1, long active1, long old2, long active2, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_1(15, old0, old1, old2, 0L, old4, old5, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_1(16, active0, active1, active2, 0L, active4, 0L, active6, active7, active8, active9, active10, 0L);
			return 17;
		}
		switch(curChar)
		{
		case 'A':
			return jjMoveStringLiteralDfa18_1(active0, 0x0L, active1, 0x2L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'C':
			return jjMoveStringLiteralDfa18_1(active0, 0x0L, active1, 0x400000L, active2, 0x40000000000L, active4, 0x0L, active6, 0x38L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'E':
			if ((active1 & 0x4L) != 0x0L)
				return jjStartNfaWithStates_1(17, 66, 89);
			return jjMoveStringLiteralDfa18_1(active0, 0x0L, active1, 0x8L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x40000000L, active10, 0x0L);
		case 'G':
			if ((active1 & 0x100000000L) != 0x0L)
				return jjStartNfaWithStates_1(17, 96, 89);
			return jjMoveStringLiteralDfa18_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x800000000000000L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'H':
			if ((active8 & 0x2000000L) != 0x0L)
				return jjStartNfaWithStates_1(17, 537, 89);
			break;
		case 'I':
			return jjMoveStringLiteralDfa18_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x10L, active8, 0x0L, active9, 0x20000000L, active10, 0x0L);
		case 'L':
			return jjMoveStringLiteralDfa18_1(active0, 0x100000L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'N':
			return jjMoveStringLiteralDfa18_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x40L, active8, 0x140004000000L, active9, 0x0L, active10, 0x0L);
		case 'R':
			return jjMoveStringLiteralDfa18_1(active0, 0x0L, active1, 0x10000000000000L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'T':
			return jjMoveStringLiteralDfa18_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x18e0000L, active9, 0x0L, active10, 0x0L);
		case 'V':
			return jjMoveStringLiteralDfa18_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x10000000L, active10, 0x0L);
		case '_':
			return jjMoveStringLiteralDfa18_1(active0, 0x0L, active1, 0x800000000000000L, active2, 0x18L, active4, 0x0L, active6, 0x4L, active7, 0x0L, active8, 0x10600000L, active9, 0xc000000000000000L, active10, 0x3L);
		default :
			break;
		}
		return jjStartNfa_1(16, active0, active1, active2, 0L, active4, 0L, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa18_1(long old0, long active0, long old1, long active1, long old2, long active2, long old4, long active4, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active4 &= old4) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_1(16, old0, old1, old2, 0L, old4, 0L, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_1(17, active0, active1, active2, 0L, active4, 0L, active6, active7, active8, active9, active10, 0L);
			return 18;
		}
		switch(curChar)
		{
		case 'A':
			return jjMoveStringLiteralDfa19_1(active0, 0x0L, active1, 0x10000000000000L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'C':
			return jjMoveStringLiteralDfa19_1(active0, 0x0L, active1, 0x0L, active2, 0x8L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0xc000000000000000L, active10, 0x0L);
		case 'D':
			if ((active8 & 0x4000000L) != 0x0L)
				return jjStartNfaWithStates_1(18, 538, 89);
			else if ((active8 & 0x40000000000L) != 0x0L)
				return jjStartNfaWithStates_1(18, 554, 89);
			else if ((active8 & 0x100000000000L) != 0x0L)
				return jjStartNfaWithStates_1(18, 556, 89);
			return jjMoveStringLiteralDfa19_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x40000000L, active10, 0x0L);
		case 'E':
			if ((active8 & 0x800000L) != 0x0L)
			{
				jjmatchedKind = 535;
				jjmatchedPos = 18;
			}
			else if ((active9 & 0x10000000L) != 0x0L)
				return jjStartNfaWithStates_1(18, 604, 89);
			return jjMoveStringLiteralDfa19_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x1000000L, active9, 0x0L, active10, 0x0L);
		case 'G':
			return jjMoveStringLiteralDfa19_1(active0, 0x0L, active1, 0x800000000000000L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x40L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'I':
			return jjMoveStringLiteralDfa19_1(active0, 0x100000L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'L':
			return jjMoveStringLiteralDfa19_1(active0, 0x0L, active1, 0x2L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa19_1(active0, 0x0L, active1, 0x8L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'N':
			return jjMoveStringLiteralDfa19_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x1L);
		case 'O':
			return jjMoveStringLiteralDfa19_1(active0, 0x0L, active1, 0x400000L, active2, 0x40000000000L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0xe0000L, active9, 0x0L, active10, 0x0L);
		case 'P':
			return jjMoveStringLiteralDfa19_1(active0, 0x0L, active1, 0x0L, active2, 0x10L, active4, 0x0L, active6, 0x4L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'S':
			return jjMoveStringLiteralDfa19_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x2L);
		case 'T':
			return jjMoveStringLiteralDfa19_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x800000000000000L, active6, 0x0L, active7, 0x10L, active8, 0x10600000L, active9, 0x20000000L, active10, 0x0L);
		case '_':
			return jjMoveStringLiteralDfa19_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x38L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_1(17, active0, active1, active2, 0L, active4, 0L, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa19_1(long old0, long active0, long old1, long active1, long old2, long active2, long old4, long active4, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active4 &= old4) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_1(17, old0, old1, old2, 0L, old4, 0L, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_1(18, active0, active1, active2, 0L, active4, 0L, active6, active7, active8, active9, active10, 0L);
			return 19;
		}
		switch(curChar)
		{
		case 'A':
			if ((active1 & 0x8L) != 0x0L)
				return jjStartNfaWithStates_1(19, 67, 89);
			return jjMoveStringLiteralDfa20_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x4000000000000000L, active10, 0x1L);
		case 'C':
			return jjMoveStringLiteralDfa20_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x8L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x2L);
		case 'D':
			return jjMoveStringLiteralDfa20_1(active0, 0x0L, active1, 0x400000L, active2, 0x40000000000L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'H':
			if ((active4 & 0x800000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(19, 315, 89);
			break;
		case 'N':
			return jjMoveStringLiteralDfa20_1(active0, 0x0L, active1, 0x10000000000000L, active2, 0x0L, active4, 0x0L, active6, 0x10L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'O':
			return jjMoveStringLiteralDfa20_1(active0, 0x0L, active1, 0x2L, active2, 0x8L, active4, 0x0L, active6, 0x4L, active7, 0x0L, active8, 0x10600000L, active9, 0x8000000000000000L, active10, 0x0L);
		case 'R':
			return jjMoveStringLiteralDfa20_1(active0, 0x0L, active1, 0x800000000000000L, active2, 0x10L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'S':
			return jjMoveStringLiteralDfa20_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x20L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'T':
			return jjMoveStringLiteralDfa20_1(active0, 0x100000L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x40L, active8, 0x0L, active9, 0x20000000L, active10, 0x0L);
		case 'Y':
			if ((active7 & 0x10L) != 0x0L)
				return jjStartNfaWithStates_1(19, 452, 89);
			break;
		case '_':
			return jjMoveStringLiteralDfa20_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x10e0000L, active9, 0x40000000L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_1(18, active0, active1, active2, 0L, active4, 0L, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa20_1(long old0, long active0, long old1, long active1, long old2, long active2, long old4, long active4, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active4 &= old4) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_1(18, old0, old1, old2, 0L, old4, 0L, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_1(19, active0, active1, active2, 0L, 0L, 0L, active6, active7, active8, active9, active10, 0L);
			return 20;
		}
		switch(curChar)
		{
		case 'A':
			return jjMoveStringLiteralDfa21_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active6, 0x18L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'B':
			return jjMoveStringLiteralDfa21_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x40000000L, active10, 0x0L);
		case 'C':
			return jjMoveStringLiteralDfa21_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active6, 0x20L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'D':
			return jjMoveStringLiteralDfa21_1(active0, 0x0L, active1, 0x0L, active2, 0x8L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x8000000000000000L, active10, 0x0L);
		case 'E':
			if ((active1 & 0x400000L) != 0x0L)
				return jjStartNfaWithStates_1(20, 86, 89);
			else if ((active2 & 0x40000000000L) != 0x0L)
				return jjStartNfaWithStates_1(20, 170, 89);
			return jjMoveStringLiteralDfa21_1(active0, 0x0L, active1, 0x0L, active2, 0x10L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x20000000L, active10, 0x0L);
		case 'G':
			if ((active1 & 0x2L) != 0x0L)
				return jjStartNfaWithStates_1(20, 65, 89);
			break;
		case 'H':
			if ((active7 & 0x40L) != 0x0L)
				return jjStartNfaWithStates_1(20, 454, 89);
			return jjMoveStringLiteralDfa21_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x20000L, active9, 0x0L, active10, 0x2L);
		case 'M':
			return jjMoveStringLiteralDfa21_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x40000L, active9, 0x0L, active10, 0x1L);
		case 'O':
			return jjMoveStringLiteralDfa21_1(active0, 0x0L, active1, 0x800000000000000L, active2, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'S':
			return jjMoveStringLiteralDfa21_1(active0, 0x0L, active1, 0x10000000000000L, active2, 0x0L, active6, 0x4L, active7, 0x0L, active8, 0x80000L, active9, 0x0L, active10, 0x0L);
		case 'T':
			return jjMoveStringLiteralDfa21_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x1000000L, active9, 0x4000000000000000L, active10, 0x0L);
		case 'Y':
			if ((active0 & 0x100000L) != 0x0L)
				return jjStartNfaWithStates_1(20, 20, 89);
			break;
		case '_':
			return jjMoveStringLiteralDfa21_1(active0, 0x0L, active1, 0x0L, active2, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x10600000L, active9, 0x0L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_1(19, active0, active1, active2, 0L, 0L, 0L, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa21_1(long old0, long active0, long old1, long active1, long old2, long active2, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_1(19, old0, old1, old2, 0L, 0L, 0L, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_1(20, 0L, active1, active2, 0L, 0L, 0L, active6, 0L, active8, active9, active10, 0L);
			return 21;
		}
		switch(curChar)
		{
		case 'A':
			return jjMoveStringLiteralDfa22_1(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x0L, active9, 0x4000000040000000L, active10, 0x0L);
		case 'C':
			return jjMoveStringLiteralDfa22_1(active1, 0x0L, active2, 0x10L, active6, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'D':
			if ((active9 & 0x20000000L) != 0x0L)
				return jjStartNfaWithStates_1(21, 605, 89);
			break;
		case 'E':
			if ((active2 & 0x8L) != 0x0L)
				return jjStartNfaWithStates_1(21, 131, 89);
			else if ((active9 & 0x8000000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(21, 639, 89);
			else if ((active10 & 0x1L) != 0x0L)
				return jjStartNfaWithStates_1(21, 640, 89);
			return jjMoveStringLiteralDfa22_1(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x80000L, active9, 0x0L, active10, 0x2L);
		case 'F':
			return jjMoveStringLiteralDfa22_1(active1, 0x10000000000000L, active2, 0x0L, active6, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'H':
			return jjMoveStringLiteralDfa22_1(active1, 0x0L, active2, 0x0L, active6, 0x20L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'I':
			return jjMoveStringLiteralDfa22_1(active1, 0x0L, active2, 0x0L, active6, 0x4L, active8, 0x40000L, active9, 0x0L, active10, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa22_1(active1, 0x0L, active2, 0x0L, active6, 0x10L, active8, 0x10200000L, active9, 0x0L, active10, 0x0L);
		case 'O':
			return jjMoveStringLiteralDfa22_1(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x1020000L, active9, 0x0L, active10, 0x0L);
		case 'S':
			return jjMoveStringLiteralDfa22_1(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x400000L, active9, 0x0L, active10, 0x0L);
		case 'T':
			return jjMoveStringLiteralDfa22_1(active1, 0x0L, active2, 0x0L, active6, 0x8L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa22_1(active1, 0x800000000000000L, active2, 0x0L, active6, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_1(20, 0L, active1, active2, 0L, 0L, 0L, active6, 0L, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa22_1(long old1, long active1, long old2, long active2, long old6, long active6, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active1 &= old1) | (active2 &= old2) | (active6 &= old6) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_1(20, 0L, old1, old2, 0L, 0L, 0L, old6, 0L, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_1(21, 0L, active1, active2, 0L, 0L, 0L, active6, 0L, active8, active9, active10, 0L);
			return 22;
		}
		switch(curChar)
		{
		case 'A':
			return jjMoveStringLiteralDfa23_1(active1, 0x0L, active2, 0x0L, active6, 0x8L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'C':
			return jjMoveStringLiteralDfa23_1(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x80000L, active9, 0x40000000L, active10, 0x0L);
		case 'E':
			if ((active6 & 0x10L) != 0x0L)
				return jjStartNfaWithStates_1(22, 388, 89);
			return jjMoveStringLiteralDfa23_1(active1, 0x0L, active2, 0x0L, active6, 0x20L, active8, 0x400000L, active9, 0x0L, active10, 0x0L);
		case 'I':
			return jjMoveStringLiteralDfa23_1(active1, 0x0L, active2, 0x10L, active6, 0x0L, active8, 0x200000L, active9, 0x0L, active10, 0x0L);
		case 'L':
			return jjMoveStringLiteralDfa23_1(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x0L, active9, 0x4000000000000000L, active10, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa23_1(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x2L);
		case 'N':
			return jjMoveStringLiteralDfa23_1(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x40000L, active9, 0x0L, active10, 0x0L);
		case 'O':
			return jjMoveStringLiteralDfa23_1(active1, 0x10000000000000L, active2, 0x0L, active6, 0x0L, active8, 0x10000000L, active9, 0x0L, active10, 0x0L);
		case 'P':
			return jjMoveStringLiteralDfa23_1(active1, 0x800000000000000L, active2, 0x0L, active6, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'T':
			return jjMoveStringLiteralDfa23_1(active1, 0x0L, active2, 0x0L, active6, 0x4L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa23_1(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x20000L, active9, 0x0L, active10, 0x0L);
		case '_':
			return jjMoveStringLiteralDfa23_1(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x1000000L, active9, 0x0L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_1(21, 0L, active1, active2, 0L, 0L, 0L, active6, 0L, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa23_1(long old1, long active1, long old2, long active2, long old6, long active6, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active1 &= old1) | (active2 &= old2) | (active6 &= old6) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_1(21, 0L, old1, old2, 0L, 0L, 0L, old6, 0L, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_1(22, 0L, active1, active2, 0L, 0L, 0L, active6, 0L, active8, active9, active10, 0L);
			return 23;
		}
		switch(curChar)
		{
		case 'A':
			if ((active10 & 0x2L) != 0x0L)
				return jjStartNfaWithStates_1(23, 641, 89);
			break;
		case 'C':
			return jjMoveStringLiteralDfa24_1(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x400000L, active9, 0x0L, active10, 0x0L);
		case 'I':
			return jjMoveStringLiteralDfa24_1(active1, 0x0L, active2, 0x0L, active6, 0x4L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'K':
			if ((active9 & 0x40000000L) != 0x0L)
				return jjStartNfaWithStates_1(23, 606, 89);
			break;
		case 'L':
			return jjMoveStringLiteralDfa24_1(active1, 0x0L, active2, 0x0L, active6, 0x8L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa24_1(active1, 0x0L, active2, 0x0L, active6, 0x20L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'N':
			return jjMoveStringLiteralDfa24_1(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x10200000L, active9, 0x0L, active10, 0x0L);
		case 'O':
			return jjMoveStringLiteralDfa24_1(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x80000L, active9, 0x4000000000000000L, active10, 0x0L);
		case 'R':
			if ((active8 & 0x20000L) != 0x0L)
				return jjStartNfaWithStates_1(23, 529, 89);
			return jjMoveStringLiteralDfa24_1(active1, 0x10000000000000L, active2, 0x0L, active6, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'S':
			return jjMoveStringLiteralDfa24_1(active1, 0x0L, active2, 0x10L, active6, 0x0L, active8, 0x1000000L, active9, 0x0L, active10, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa24_1(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x40000L, active9, 0x0L, active10, 0x0L);
		case '_':
			return jjMoveStringLiteralDfa24_1(active1, 0x800000000000000L, active2, 0x0L, active6, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_1(22, 0L, active1, active2, 0L, 0L, 0L, active6, 0L, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa24_1(long old1, long active1, long old2, long active2, long old6, long active6, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active1 &= old1) | (active2 &= old2) | (active6 &= old6) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_1(22, 0L, old1, old2, 0L, 0L, 0L, old6, 0L, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_1(23, 0L, active1, active2, 0L, 0L, 0L, active6, 0L, active8, active9, 0L, 0L);
			return 24;
		}
		switch(curChar)
		{
		case 'A':
			if ((active6 & 0x20L) != 0x0L)
				return jjStartNfaWithStates_1(24, 389, 89);
			break;
		case 'E':
			return jjMoveStringLiteralDfa25_1(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x1000000L, active9, 0x0L);
		case 'F':
			return jjMoveStringLiteralDfa25_1(active1, 0x800000000000000L, active2, 0x0L, active6, 0x0L, active8, 0x0L, active9, 0x0L);
		case 'G':
			if ((active9 & 0x4000000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(24, 638, 89);
			break;
		case 'I':
			return jjMoveStringLiteralDfa25_1(active1, 0x0L, active2, 0x10L, active6, 0x0L, active8, 0x0L, active9, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa25_1(active1, 0x10000000000000L, active2, 0x0L, active6, 0x0L, active8, 0x0L, active9, 0x0L);
		case 'N':
			return jjMoveStringLiteralDfa25_1(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x80000L, active9, 0x0L);
		case 'O':
			return jjMoveStringLiteralDfa25_1(active1, 0x0L, active2, 0x0L, active6, 0xcL, active8, 0x400000L, active9, 0x0L);
		case 'T':
			return jjMoveStringLiteralDfa25_1(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x10040000L, active9, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa25_1(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x200000L, active9, 0x0L);
		default :
			break;
		}
		return jjStartNfa_1(23, 0L, active1, active2, 0L, 0L, 0L, active6, 0L, active8, active9, 0L, 0L);
	}
	private int jjMoveStringLiteralDfa25_1(long old1, long active1, long old2, long active2, long old6, long active6, long old8, long active8, long old9, long active9){
		if (((active1 &= old1) | (active2 &= old2) | (active6 &= old6) | (active8 &= old8) | (active9 &= old9)) == 0L)
			return jjStartNfa_1(23, 0L, old1, old2, 0L, 0L, 0L, old6, 0L, old8, old9, 0L, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_1(24, 0L, active1, active2, 0L, 0L, 0L, active6, 0L, active8, 0L, 0L, 0L);
			return 25;
		}
		switch(curChar)
		{
		case 'C':
			return jjMoveStringLiteralDfa26_1(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x1000000L);
		case 'D':
			if ((active8 & 0x80000L) != 0x0L)
				return jjStartNfaWithStates_1(25, 531, 89);
			break;
		case 'E':
			if ((active8 & 0x40000L) != 0x0L)
				return jjStartNfaWithStates_1(25, 530, 89);
			break;
		case 'G':
			if ((active6 & 0x8L) != 0x0L)
				return jjStartNfaWithStates_1(25, 387, 89);
			break;
		case 'H':
			if ((active8 & 0x10000000L) != 0x0L)
				return jjStartNfaWithStates_1(25, 540, 89);
			break;
		case 'N':
			if ((active6 & 0x4L) != 0x0L)
				return jjStartNfaWithStates_1(25, 386, 89);
			return jjMoveStringLiteralDfa26_1(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x400000L);
		case 'O':
			return jjMoveStringLiteralDfa26_1(active1, 0x800000000000000L, active2, 0x10L, active6, 0x0L, active8, 0x0L);
		case 'T':
			return jjMoveStringLiteralDfa26_1(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x200000L);
		case '_':
			return jjMoveStringLiteralDfa26_1(active1, 0x10000000000000L, active2, 0x0L, active6, 0x0L, active8, 0x0L);
		default :
			break;
		}
		return jjStartNfa_1(24, 0L, active1, active2, 0L, 0L, 0L, active6, 0L, active8, 0L, 0L, 0L);
	}
	private int jjMoveStringLiteralDfa26_1(long old1, long active1, long old2, long active2, long old6, long active6, long old8, long active8){
		if (((active1 &= old1) | (active2 &= old2) | (active6 &= old6) | (active8 &= old8)) == 0L)
			return jjStartNfa_1(24, 0L, old1, old2, 0L, 0L, 0L, old6, 0L, old8, 0L, 0L, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_1(25, 0L, active1, active2, 0L, 0L, 0L, 0L, 0L, active8, 0L, 0L, 0L);
			return 26;
		}
		switch(curChar)
		{
		case 'D':
			if ((active8 & 0x400000L) != 0x0L)
				return jjStartNfaWithStates_1(26, 534, 89);
			break;
		case 'E':
			if ((active8 & 0x200000L) != 0x0L)
				return jjStartNfaWithStates_1(26, 533, 89);
			break;
		case 'G':
			return jjMoveStringLiteralDfa27_1(active1, 0x10000000000000L, active2, 0x0L, active8, 0x0L);
		case 'N':
			if ((active2 & 0x10L) != 0x0L)
				return jjStartNfaWithStates_1(26, 132, 89);
			break;
		case 'O':
			return jjMoveStringLiteralDfa27_1(active1, 0x0L, active2, 0x0L, active8, 0x1000000L);
		case 'R':
			return jjMoveStringLiteralDfa27_1(active1, 0x800000000000000L, active2, 0x0L, active8, 0x0L);
		default :
			break;
		}
		return jjStartNfa_1(25, 0L, active1, active2, 0L, 0L, 0L, 0L, 0L, active8, 0L, 0L, 0L);
	}
	private int jjMoveStringLiteralDfa27_1(long old1, long active1, long old2, long active2, long old8, long active8){
		if (((active1 &= old1) | (active2 &= old2) | (active8 &= old8)) == 0L)
			return jjStartNfa_1(25, 0L, old1, old2, 0L, 0L, 0L, 0L, 0L, old8, 0L, 0L, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_1(26, 0L, active1, 0L, 0L, 0L, 0L, 0L, 0L, active8, 0L, 0L, 0L);
			return 27;
		}
		switch(curChar)
		{
		case 'N':
			return jjMoveStringLiteralDfa28_1(active1, 0x0L, active8, 0x1000000L);
		case 'R':
			return jjMoveStringLiteralDfa28_1(active1, 0x10000000000000L, active8, 0x0L);
		case '_':
			return jjMoveStringLiteralDfa28_1(active1, 0x800000000000000L, active8, 0x0L);
		default :
			break;
		}
		return jjStartNfa_1(26, 0L, active1, 0L, 0L, 0L, 0L, 0L, 0L, active8, 0L, 0L, 0L);
	}
	private int jjMoveStringLiteralDfa28_1(long old1, long active1, long old8, long active8){
		if (((active1 &= old1) | (active8 &= old8)) == 0L)
			return jjStartNfa_1(26, 0L, old1, 0L, 0L, 0L, 0L, 0L, 0L, old8, 0L, 0L, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_1(27, 0L, active1, 0L, 0L, 0L, 0L, 0L, 0L, active8, 0L, 0L, 0L);
			return 28;
		}
		switch(curChar)
		{
		case 'D':
			if ((active8 & 0x1000000L) != 0x0L)
				return jjStartNfaWithStates_1(28, 536, 89);
			break;
		case 'O':
			return jjMoveStringLiteralDfa29_1(active1, 0x10000000000000L, active8, 0x0L);
		case 'T':
			return jjMoveStringLiteralDfa29_1(active1, 0x800000000000000L, active8, 0x0L);
		default :
			break;
		}
		return jjStartNfa_1(27, 0L, active1, 0L, 0L, 0L, 0L, 0L, 0L, active8, 0L, 0L, 0L);
	}
	private int jjMoveStringLiteralDfa29_1(long old1, long active1, long old8, long active8){
		if (((active1 &= old1) | (active8 &= old8)) == 0L)
			return jjStartNfa_1(27, 0L, old1, 0L, 0L, 0L, 0L, 0L, 0L, old8, 0L, 0L, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_1(28, 0L, active1, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
			return 29;
		}
		switch(curChar)
		{
		case 'U':
			return jjMoveStringLiteralDfa30_1(active1, 0x10000000000000L);
		case 'Y':
			return jjMoveStringLiteralDfa30_1(active1, 0x800000000000000L);
		default :
			break;
		}
		return jjStartNfa_1(28, 0L, active1, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
	}
	private int jjMoveStringLiteralDfa30_1(long old1, long active1){
		if (((active1 &= old1)) == 0L)
			return jjStartNfa_1(28, 0L, old1, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_1(29, 0L, active1, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
			return 30;
		}
		switch(curChar)
		{
		case 'P':
			if ((active1 & 0x10000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(30, 116, 89);
			return jjMoveStringLiteralDfa31_1(active1, 0x800000000000000L);
		default :
			break;
		}
		return jjStartNfa_1(29, 0L, active1, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
	}
	private int jjMoveStringLiteralDfa31_1(long old1, long active1){
		if (((active1 &= old1)) == 0L)
			return jjStartNfa_1(29, 0L, old1, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_1(30, 0L, active1, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
			return 31;
		}
		switch(curChar)
		{
		case 'E':
			if ((active1 & 0x800000000000000L) != 0x0L)
				return jjStartNfaWithStates_1(31, 123, 89);
			break;
		default :
			break;
		}
		return jjStartNfa_1(30, 0L, active1, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
	}
	private int jjStartNfaWithStates_1(int pos, int kind, int state)
	{
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) { return pos + 1; }
		return jjMoveNfa_1(state, pos + 1);
	}
	private int jjMoveNfa_1(int startState, int curPos)
	{
		int startsAt = 0;
		jjnewStateCnt = 89;
		int i = 1;
		jjstateSet[0] = startState;
		int kind = 0x7fffffff;
		for (;;)
		{
			if (++jjround == 0x7fffffff)
				ReInitRounds();
			if (curChar < 64)
			{
				long l = 1L << curChar;
				do
				{
					switch(jjstateSet[--i])
					{
					case 84:
						if (curChar == 47)
						{
							if (kind > 730)
								kind = 730;
							{ jjCheckNAddStates(0, 2); }
						}
						else if (curChar == 42)
							jjstateSet[jjnewStateCnt++] = 85;
						if (curChar == 42)
							jjstateSet[jjnewStateCnt++] = 82;
						break;
					case 91:
						if ((0x7ff601000000000L & l) != 0x0L)
						{ jjCheckNAddTwoStates(27, 28); }
						else if (curChar == 39)
						{ jjCheckNAddStates(3, 5); }
						if ((0x3ff001000000000L & l) != 0x0L)
						{
							if (kind > 738)
								kind = 738;
							{ jjCheckNAdd(33); }
						}
						if ((0x3ff001000000000L & l) != 0x0L)
						{ jjCheckNAddStates(6, 8); }
						if (curChar == 36)
						{ jjCheckNAdd(29); }
						break;
					case 55:
						if ((0xffffff7fffffffffL & l) != 0x0L)
						{ jjCheckNAddStates(9, 11); }
						else if (curChar == 39)
						{
							if (kind > 681)
								kind = 681;
						}
						if ((0xfc00f7faffffc9ffL & l) != 0x0L)
							jjstateSet[jjnewStateCnt++] = 56;
						if (curChar == 39)
							jjstateSet[jjnewStateCnt++] = 52;
						break;
					case 1:
						if ((0x7ff601000000000L & l) != 0x0L)
						{ jjCheckNAddTwoStates(27, 28); }
						else if (curChar == 39)
						{ jjCheckNAddStates(12, 14); }
						if ((0x3ff001000000000L & l) != 0x0L)
						{
							if (kind > 738)
								kind = 738;
							{ jjCheckNAdd(33); }
						}
						if ((0x3ff001000000000L & l) != 0x0L)
						{ jjCheckNAddStates(6, 8); }
						if (curChar == 36)
						{ jjCheckNAdd(29); }
						break;
					case 94:
						if ((0x7ff601000000000L & l) != 0x0L)
						{ jjCheckNAddTwoStates(27, 28); }
						if (curChar == 36)
						{ jjCheckNAdd(29); }
						break;
					case 0:
						if ((0x3ff001000000000L & l) != 0x0L)
						{ jjCheckNAddStates(6, 8); }
						else if (curChar == 47)
						{ jjAddStates(15, 17); }
						else if (curChar == 39)
						{ jjCheckNAddStates(18, 21); }
						else if (curChar == 46)
						{ jjCheckNAddTwoStates(48, 49); }
						else if (curChar == 7)
						{
							if (kind > 742)
								kind = 742;
						}
						else if (curChar == 34)
						{ jjCheckNAddTwoStates(22, 24); }
						else if (curChar == 45)
							jjstateSet[jjnewStateCnt++] = 15;
						if ((0x3ff000000000000L & l) != 0x0L)
						{
							if (kind > 674)
								kind = 674;
							{ jjCheckNAddStates(22, 28); }
						}
						else if (curChar == 36)
						{
							if (kind > 738)
								kind = 738;
							{ jjCheckNAdd(33); }
						}
						break;
					case 90:
						if ((0x3ff000000000000L & l) != 0x0L)
						{
							if (kind > 676)
								kind = 676;
							{ jjCheckNAdd(49); }
						}
						if ((0x3ff000000000000L & l) != 0x0L)
						{ jjCheckNAddTwoStates(48, 38); }
						break;
					case 92:
						if (curChar == 32)
						{ jjCheckNAddTwoStates(78, 79); }
						if (curChar == 32)
						{ jjCheckNAddTwoStates(75, 76); }
						if (curChar == 32)
						{ jjCheckNAddTwoStates(73, 74); }
						if (curChar == 32)
						{ jjCheckNAddTwoStates(71, 72); }
						break;
					case 93:
						if ((0xfffffffbffffdbffL & l) != 0x0L)
						{ jjCheckNAddStates(29, 31); }
						else if (curChar == 34)
							jjstateSet[jjnewStateCnt++] = 23;
						break;
					case 58:
						if ((0x7ff601000000000L & l) != 0x0L)
						{ jjCheckNAddTwoStates(27, 28); }
						else if (curChar == 38)
							jjstateSet[jjnewStateCnt++] = 65;
						if ((0x3ff001000000000L & l) != 0x0L)
						{
							if (kind > 738)
								kind = 738;
							{ jjCheckNAdd(33); }
						}
						else if (curChar == 38)
							jjstateSet[jjnewStateCnt++] = 59;
						if ((0x3ff001000000000L & l) != 0x0L)
						{ jjCheckNAddStates(6, 8); }
						if (curChar == 36)
						{ jjCheckNAdd(29); }
						break;
					case 82:
						if (curChar == 42)
							jjstateSet[jjnewStateCnt++] = 86;
						else if (curChar == 43)
							jjstateSet[jjnewStateCnt++] = 83;
						break;
					case 89:
						if ((0x7ff601000000000L & l) != 0x0L)
						{ jjCheckNAddTwoStates(27, 28); }
						if ((0x3ff001000000000L & l) != 0x0L)
						{
							if (kind > 738)
								kind = 738;
							{ jjCheckNAdd(33); }
						}
						if ((0x3ff001000000000L & l) != 0x0L)
						{ jjCheckNAddStates(6, 8); }
						if (curChar == 36)
						{ jjCheckNAdd(29); }
						break;
					case 2:
						if ((0xffffff7fffffffffL & l) != 0x0L)
						{ jjCheckNAddStates(12, 14); }
						break;
					case 3:
						if (curChar == 39)
						{ jjCheckNAddStates(12, 14); }
						break;
					case 4:
						if (curChar == 39)
							jjstateSet[jjnewStateCnt++] = 3;
						break;
					case 5:
						if (curChar == 39 && kind > 680)
							kind = 680;
						break;
					case 7:
						if ((0x3ff000000000000L & l) != 0x0L)
						{ jjCheckNAddTwoStates(8, 9); }
						break;
					case 8:
						if ((0x7ff600000000000L & l) != 0x0L)
						{ jjCheckNAddTwoStates(8, 9); }
						break;
					case 9:
					case 11:
						if (curChar == 39)
						{ jjCheckNAddStates(3, 5); }
						break;
					case 10:
						if ((0xffffff7fffffffffL & l) != 0x0L)
						{ jjCheckNAddStates(3, 5); }
						break;
					case 12:
						if (curChar == 39)
							jjstateSet[jjnewStateCnt++] = 11;
						break;
					case 13:
						if (curChar == 39 && kind > 682)
							kind = 682;
						break;
					case 15:
						if (curChar != 45)
							break;
						if (kind > 730)
							kind = 730;
						{ jjCheckNAddStates(0, 2); }
						break;
					case 16:
						if ((0xffffffffffffdbffL & l) == 0x0L)
							break;
						if (kind > 730)
							kind = 730;
						{ jjCheckNAddStates(0, 2); }
						break;
					case 17:
						if ((0x2400L & l) != 0x0L && kind > 730)
							kind = 730;
						break;
					case 18:
						if (curChar == 10 && kind > 730)
							kind = 730;
						break;
					case 19:
						if (curChar == 13)
							jjstateSet[jjnewStateCnt++] = 18;
						break;
					case 20:
						if (curChar == 45)
							jjstateSet[jjnewStateCnt++] = 15;
						break;
					case 21:
						if (curChar == 34)
						{ jjCheckNAddTwoStates(22, 24); }
						break;
					case 22:
						if ((0xfffffffbffffdbffL & l) != 0x0L)
						{ jjCheckNAddStates(29, 31); }
						break;
					case 23:
						if (curChar == 34)
						{ jjCheckNAddStates(29, 31); }
						break;
					case 24:
						if (curChar == 34)
							jjstateSet[jjnewStateCnt++] = 23;
						break;
					case 25:
						if (curChar == 34 && kind > 735)
							kind = 735;
						break;
					case 26:
						if ((0x3ff001000000000L & l) != 0x0L)
						{ jjCheckNAddStates(6, 8); }
						break;
					case 27:
						if ((0x7ff601000000000L & l) != 0x0L)
						{ jjCheckNAddTwoStates(27, 28); }
						break;
					case 28:
						if (curChar == 36)
						{ jjCheckNAdd(29); }
						break;
					case 29:
						if (curChar != 36)
							break;
						if (kind > 737)
							kind = 737;
						{ jjCheckNAddTwoStates(29, 30); }
						break;
					case 30:
						if (curChar == 36)
						{ jjCheckNAdd(31); }
						break;
					case 31:
						if ((0x3ff001000000000L & l) == 0x0L)
							break;
						if (kind > 737)
							kind = 737;
						{ jjCheckNAdd(31); }
						break;
					case 32:
						if (curChar != 36)
							break;
						if (kind > 738)
							kind = 738;
						{ jjCheckNAdd(33); }
						break;
					case 33:
						if ((0x3ff001000000000L & l) == 0x0L)
							break;
						if (kind > 738)
							kind = 738;
						{ jjCheckNAdd(33); }
						break;
					case 34:
						if (curChar == 7 && kind > 742)
							kind = 742;
						break;
					case 35:
						if ((0x3ff000000000000L & l) == 0x0L)
							break;
						if (kind > 674)
							kind = 674;
						{ jjCheckNAddStates(22, 28); }
						break;
					case 36:
						if ((0x3ff000000000000L & l) == 0x0L)
							break;
						if (kind > 674)
							kind = 674;
						{ jjCheckNAdd(36); }
						break;
					case 37:
						if ((0x3ff000000000000L & l) != 0x0L)
						{ jjCheckNAddTwoStates(37, 38); }
						break;
					case 39:
						if ((0x280000000000L & l) != 0x0L)
						{ jjCheckNAdd(40); }
						break;
					case 40:
						if ((0x3ff000000000000L & l) == 0x0L)
							break;
						if (kind > 675)
							kind = 675;
						{ jjCheckNAdd(40); }
						break;
					case 41:
						if (curChar == 46)
						{ jjCheckNAddTwoStates(42, 38); }
						break;
					case 42:
						if ((0x3ff000000000000L & l) != 0x0L)
						{ jjCheckNAddTwoStates(42, 38); }
						break;
					case 43:
						if (curChar != 46)
							break;
						if (kind > 676)
							kind = 676;
						{ jjCheckNAdd(44); }
						break;
					case 44:
						if ((0x3ff000000000000L & l) == 0x0L)
							break;
						if (kind > 676)
							kind = 676;
						{ jjCheckNAdd(44); }
						break;
					case 45:
						if ((0x3ff000000000000L & l) == 0x0L)
							break;
						if (kind > 676)
							kind = 676;
						{ jjCheckNAddStates(32, 34); }
						break;
					case 46:
						if ((0x3ff000000000000L & l) != 0x0L)
						{ jjCheckNAddStates(35, 38); }
						break;
					case 47:
						if (curChar == 46)
						{ jjCheckNAddTwoStates(48, 49); }
						break;
					case 48:
						if ((0x3ff000000000000L & l) != 0x0L)
						{ jjCheckNAddTwoStates(48, 38); }
						break;
					case 49:
						if ((0x3ff000000000000L & l) == 0x0L)
							break;
						if (kind > 676)
							kind = 676;
						{ jjCheckNAdd(49); }
						break;
					case 50:
						if (curChar == 39)
						{ jjCheckNAddStates(18, 21); }
						break;
					case 51:
						if ((0xffffff7fffffffffL & l) != 0x0L)
						{ jjCheckNAddStates(9, 11); }
						break;
					case 52:
						if (curChar == 39)
						{ jjCheckNAddStates(9, 11); }
						break;
					case 53:
						if (curChar == 39)
							jjstateSet[jjnewStateCnt++] = 52;
						break;
					case 54:
						if (curChar == 39 && kind > 681)
							kind = 681;
						break;
					case 56:
						if (curChar == 39 && kind > 685)
							kind = 685;
						break;
					case 59:
					case 61:
						if (curChar == 39)
						{ jjCheckNAddStates(39, 41); }
						break;
					case 60:
						if ((0xffffff7fffffffffL & l) != 0x0L)
						{ jjCheckNAddStates(39, 41); }
						break;
					case 62:
						if (curChar == 39)
							jjstateSet[jjnewStateCnt++] = 61;
						break;
					case 63:
						if (curChar == 39 && kind > 683)
							kind = 683;
						break;
					case 64:
						if (curChar == 38)
							jjstateSet[jjnewStateCnt++] = 65;
						break;
					case 65:
						if (curChar == 34)
						{ jjCheckNAddTwoStates(66, 68); }
						break;
					case 66:
						if ((0xfffffffbffffdbffL & l) != 0x0L)
						{ jjCheckNAddStates(42, 44); }
						break;
					case 67:
						if (curChar == 34)
						{ jjCheckNAddStates(42, 44); }
						break;
					case 68:
						if (curChar == 34)
							jjstateSet[jjnewStateCnt++] = 67;
						break;
					case 69:
						if (curChar == 34 && kind > 739)
							kind = 739;
						break;
					case 71:
						if (curChar == 32)
						{ jjCheckNAddTwoStates(71, 72); }
						break;
					case 73:
						if (curChar == 32)
						{ jjCheckNAddTwoStates(73, 74); }
						break;
					case 75:
						if (curChar == 32)
						{ jjCheckNAddTwoStates(75, 76); }
						break;
					case 78:
						if (curChar == 32)
						{ jjCheckNAddTwoStates(78, 79); }
						break;
					case 81:
						if (curChar == 47)
						{ jjAddStates(15, 17); }
						break;
					case 83:
						if ((0xffff7fffffffffffL & l) != 0x0L && kind > 726)
							kind = 726;
						break;
					case 85:
						if (curChar == 42)
							jjstateSet[jjnewStateCnt++] = 86;
						break;
					case 86:
						if ((0xffff7fffffffffffL & l) != 0x0L && kind > 728)
							kind = 728;
						break;
					case 87:
						if (curChar == 42)
							jjstateSet[jjnewStateCnt++] = 85;
						break;
					case 88:
						if (curChar != 47)
							break;
						if (kind > 730)
							kind = 730;
						{ jjCheckNAddStates(0, 2); }
						break;
					default : break;
					}
				} while(i != startsAt);
			}
			else if (curChar < 128)
			{
				long l = 1L << (curChar & 077);
				do
				{
					switch(jjstateSet[--i])
					{
					case 91:
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{
							if (kind > 738)
								kind = 738;
							{ jjCheckNAdd(33); }
						}
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{ jjCheckNAddTwoStates(27, 28); }
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{ jjCheckNAddStates(6, 8); }
						break;
					case 55:
					{ jjCheckNAddStates(9, 11); }
					if ((0xffffff81ffffff81L & l) != 0x0L)
						jjstateSet[jjnewStateCnt++] = 56;
					break;
					case 1:
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{
							if (kind > 738)
								kind = 738;
							{ jjCheckNAdd(33); }
						}
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{ jjCheckNAddTwoStates(27, 28); }
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{ jjCheckNAddStates(6, 8); }
						break;
					case 94:
					case 27:
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{ jjCheckNAddTwoStates(27, 28); }
						break;
					case 0:
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{
							if (kind > 738)
								kind = 738;
							{ jjCheckNAdd(33); }
						}
						else if (curChar == 123)
						{ jjAddStates(45, 52); }
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{ jjCheckNAddStates(6, 8); }
						if ((0x100000001000000L & l) != 0x0L)
							jjstateSet[jjnewStateCnt++] = 1;
						else if (curChar == 85)
						{ jjAddStates(53, 54); }
						else if (curChar == 78)
						{ jjCheckNAdd(9); }
						else if (curChar == 95)
							jjstateSet[jjnewStateCnt++] = 7;
						break;
					case 92:
						if ((0x4000000040L & l) != 0x0L)
							jjstateSet[jjnewStateCnt++] = 80;
						else if ((0x10000000100000L & l) != 0x0L)
							jjstateSet[jjnewStateCnt++] = 77;
						else if ((0x1000000010L & l) != 0x0L)
						{
							if (kind > 688)
								kind = 688;
						}
						if ((0x10000000100000L & l) != 0x0L)
						{
							if (kind > 689)
								kind = 689;
						}
						break;
					case 93:
					case 22:
					{ jjCheckNAddStates(29, 31); }
					break;
					case 58:
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{
							if (kind > 738)
								kind = 738;
							{ jjCheckNAdd(33); }
						}
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{ jjCheckNAddTwoStates(27, 28); }
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{ jjCheckNAddStates(6, 8); }
						break;
					case 89:
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{
							if (kind > 738)
								kind = 738;
							{ jjCheckNAdd(33); }
						}
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{ jjCheckNAddTwoStates(27, 28); }
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{ jjCheckNAddStates(6, 8); }
						break;
					case 2:
					{ jjAddStates(12, 14); }
					break;
					case 6:
						if (curChar == 95)
							jjstateSet[jjnewStateCnt++] = 7;
						break;
					case 7:
						if ((0x7fffffe07fffffeL & l) != 0x0L)
						{ jjCheckNAddTwoStates(8, 9); }
						break;
					case 8:
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{ jjCheckNAddTwoStates(8, 9); }
						break;
					case 10:
					{ jjAddStates(3, 5); }
					break;
					case 14:
						if (curChar == 78)
						{ jjCheckNAdd(9); }
						break;
					case 16:
						if (kind > 730)
							kind = 730;
						{ jjAddStates(0, 2); }
						break;
					case 26:
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{ jjCheckNAddStates(6, 8); }
						break;
					case 29:
						if ((0x7fffffe87fffffeL & l) == 0x0L)
							break;
						if (kind > 737)
							kind = 737;
						{ jjAddStates(55, 56); }
						break;
					case 31:
						if ((0x7fffffe87fffffeL & l) == 0x0L)
							break;
						if (kind > 737)
							kind = 737;
						jjstateSet[jjnewStateCnt++] = 31;
						break;
					case 32:
						if ((0x7fffffe87fffffeL & l) == 0x0L)
							break;
						if (kind > 738)
							kind = 738;
						{ jjCheckNAdd(33); }
						break;
					case 33:
						if ((0x7fffffe87fffffeL & l) == 0x0L)
							break;
						if (kind > 738)
							kind = 738;
						{ jjCheckNAdd(33); }
						break;
					case 38:
						if ((0x2000000020L & l) != 0x0L)
						{ jjAddStates(57, 58); }
						break;
					case 51:
					{ jjCheckNAddStates(9, 11); }
					break;
					case 57:
						if (curChar == 85)
						{ jjAddStates(53, 54); }
						break;
					case 60:
					{ jjAddStates(39, 41); }
					break;
					case 66:
					{ jjAddStates(42, 44); }
					break;
					case 70:
						if (curChar == 123)
						{ jjAddStates(45, 52); }
						break;
					case 72:
						if ((0x1000000010L & l) != 0x0L && kind > 688)
							kind = 688;
						break;
					case 74:
						if ((0x10000000100000L & l) != 0x0L && kind > 689)
							kind = 689;
						break;
					case 76:
						if ((0x10000000100000L & l) != 0x0L)
							jjstateSet[jjnewStateCnt++] = 77;
						break;
					case 77:
						if ((0x8000000080000L & l) != 0x0L && kind > 690)
							kind = 690;
						break;
					case 79:
						if ((0x4000000040L & l) != 0x0L)
							jjstateSet[jjnewStateCnt++] = 80;
						break;
					case 80:
						if ((0x400000004000L & l) != 0x0L && kind > 691)
							kind = 691;
						break;
					case 83:
						if (kind > 726)
							kind = 726;
						break;
					case 86:
						if (kind > 728)
							kind = 728;
						break;
					default : break;
					}
				} while(i != startsAt);
			}
			else
			{
				int hiByte = (curChar >> 8);
				int i1 = hiByte >> 6;
				long l1 = 1L << (hiByte & 077);
				int i2 = (curChar & 0xff) >> 6;
				long l2 = 1L << (curChar & 077);
				do
				{
					switch(jjstateSet[--i])
					{
					case 91:
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{ jjCheckNAddStates(6, 8); }
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{ jjCheckNAddTwoStates(27, 28); }
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{
							if (kind > 738)
								kind = 738;
							{ jjCheckNAdd(33); }
						}
						break;
					case 55:
						if (jjCanMove_0(hiByte, i1, i2, l1, l2))
						{ jjCheckNAddStates(9, 11); }
						if (jjCanMove_0(hiByte, i1, i2, l1, l2))
							jjstateSet[jjnewStateCnt++] = 56;
						break;
					case 1:
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{ jjCheckNAddStates(6, 8); }
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{ jjCheckNAddTwoStates(27, 28); }
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{
							if (kind > 738)
								kind = 738;
							{ jjCheckNAdd(33); }
						}
						break;
					case 94:
					case 27:
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{ jjCheckNAddTwoStates(27, 28); }
						break;
					case 0:
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{ jjCheckNAddStates(6, 8); }
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{
							if (kind > 738)
								kind = 738;
							{ jjCheckNAdd(33); }
						}
						break;
					case 93:
					case 22:
						if (jjCanMove_2(hiByte, i1, i2, l1, l2))
						{ jjCheckNAddStates(29, 31); }
						break;
					case 58:
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{ jjCheckNAddStates(6, 8); }
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{ jjCheckNAddTwoStates(27, 28); }
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{
							if (kind > 738)
								kind = 738;
							{ jjCheckNAdd(33); }
						}
						break;
					case 89:
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{ jjCheckNAddStates(6, 8); }
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{ jjCheckNAddTwoStates(27, 28); }
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{
							if (kind > 738)
								kind = 738;
							{ jjCheckNAdd(33); }
						}
						break;
					case 2:
						if (jjCanMove_0(hiByte, i1, i2, l1, l2))
						{ jjAddStates(12, 14); }
						break;
					case 10:
						if (jjCanMove_0(hiByte, i1, i2, l1, l2))
						{ jjAddStates(3, 5); }
						break;
					case 16:
						if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
							break;
						if (kind > 730)
							kind = 730;
						{ jjAddStates(0, 2); }
						break;
					case 26:
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{ jjCheckNAddStates(6, 8); }
						break;
					case 29:
						if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
							break;
						if (kind > 737)
							kind = 737;
						{ jjAddStates(55, 56); }
						break;
					case 31:
						if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
							break;
						if (kind > 737)
							kind = 737;
						jjstateSet[jjnewStateCnt++] = 31;
						break;
					case 32:
						if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
							break;
						if (kind > 738)
							kind = 738;
						{ jjCheckNAdd(33); }
						break;
					case 33:
						if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
							break;
						if (kind > 738)
							kind = 738;
						{ jjCheckNAdd(33); }
						break;
					case 51:
						if (jjCanMove_0(hiByte, i1, i2, l1, l2))
						{ jjCheckNAddStates(9, 11); }
						break;
					case 60:
						if (jjCanMove_0(hiByte, i1, i2, l1, l2))
						{ jjAddStates(39, 41); }
						break;
					case 66:
						if (jjCanMove_2(hiByte, i1, i2, l1, l2))
						{ jjAddStates(42, 44); }
						break;
					case 83:
						if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 726)
							kind = 726;
						break;
					case 86:
						if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 728)
							kind = 728;
						break;
					default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
					}
				} while(i != startsAt);
			}
			if (kind != 0x7fffffff)
			{
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			i = jjnewStateCnt;
			jjnewStateCnt = startsAt;
			startsAt = 89 - jjnewStateCnt;
			if (i == startsAt)
				return curPos;
			try { curChar = input_stream.readChar(); }
			catch(java.io.IOException e) { return curPos; }
		}
	}
	private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1, long active2, long active3, long active4, long active5, long active6, long active7, long active8, long active9, long active10, long active11){
		switch (pos)
		{
		case 0:
			if ((active0 & 0xffff8001fffffffeL) != 0x0L || (active1 & 0xffffffffffffffffL) != 0x0L || (active3 & 0x7ffc000000L) != 0x0L || (active4 & 0xffffc00000f00000L) != 0x0L || (active5 & 0x1fffL) != 0x0L || (active7 & 0x8000000000000L) != 0x0L || (active11 & 0x10000L) != 0x0L)
				return 89;
			if ((active11 & 0x2000080L) != 0x0L)
				return 84;
			if ((active10 & 0x200000000000000L) != 0x0L || (active11 & 0x800L) != 0x0L)
				return 90;
			if ((active5 & 0xfffffe000L) != 0x0L)
			{
				jjmatchedKind = 738;
				return 91;
			}
			if ((active11 & 0x1000L) != 0x0L)
				return 55;
			if ((active11 & 0x20L) != 0x0L)
				return 15;
			if ((active10 & 0x10000000000000L) != 0x0L)
				return 92;
			if ((active10 & 0x20000000L) != 0x0L)
			{
				jjmatchedKind = 738;
				return 1;
			}
			if ((active0 & 0x7ffe00000000L) != 0x0L || (active2 & 0xffffffffffffffffL) != 0x0L || (active3 & 0xffffff8003ffffffL) != 0x0L || (active4 & 0x3fffff0fffffL) != 0x0L || (active5 & 0xfffffff000000000L) != 0x0L || (active6 & 0xffffffffffffffffL) != 0x0L || (active7 & 0xfff7ffffffffffffL) != 0x0L || (active8 & 0xffffffffffffffffL) != 0x0L || (active9 & 0x7fffffffffffL) != 0x0L || (active10 & 0x3dfffffc0L) != 0x0L)
			{
				jjmatchedKind = 738;
				return 89;
			}
			if ((active9 & 0xffff800000000000L) != 0x0L || (active10 & 0x3fL) != 0x0L)
			{
				jjmatchedKind = 738;
				return 58;
			}
			return -1;
		case 1:
			if ((active0 & 0x40007fe00000L) != 0x0L || (active3 & 0xfffc000300000000L) != 0x0L || (active4 & 0x100000003ffL) != 0x0L || (active5 & 0x3c73000f800000L) != 0x0L || (active9 & 0x3000000L) != 0x0L)
				return 89;
			if ((active11 & 0x2000000L) != 0x0L)
				return 82;
			if ((active0 & 0xffff3fff801ffffcL) != 0x0L || (active1 & 0xffffffffffffffffL) != 0x0L || (active2 & 0xffffffffffffffffL) != 0x0L || (active3 & 0x3fffcfbffffffL) != 0x0L || (active4 & 0xffffbeffffeffc00L) != 0x0L || (active5 & 0xffc38cfff07fffffL) != 0x0L || (active6 & 0xffffffffffffffffL) != 0x0L || (active7 & 0xffffffffffffffffL) != 0x0L || (active8 & 0xffffffffffffffffL) != 0x0L || (active9 & 0xfffffffffcffffffL) != 0x0L || (active10 & 0x3ffffffffL) != 0x0L)
			{
				if (jjmatchedPos != 1)
				{
					jjmatchedKind = 738;
					jjmatchedPos = 1;
				}
				return 89;
			}
			return -1;
		case 2:
			if ((active0 & 0x20100459cdcL) != 0x0L || (active2 & 0xf006000000f60L) != 0x0L || (active3 & 0x800000004003c003L) != 0x0L || (active4 & 0x60800002e0001fL) != 0x0L || (active5 & 0x43802400082000feL) != 0x0L || (active6 & 0x1c000009fc000L) != 0x0L || (active7 & 0xe000000780000L) != 0x0L || (active8 & 0x1fffffffffffffL) != 0x0L || (active9 & 0x40L) != 0x0L || (active10 & 0x20000000L) != 0x0L)
				return 89;
			if ((active0 & 0xffff3dfef79a6320L) != 0x0L || (active1 & 0xffffffffffffffffL) != 0x0L || (active2 & 0xfff0ff9ffffff09fL) != 0x0L || (active3 & 0x7ffbfffebbfc3ffcL) != 0x0L || (active4 & 0xff9f3efffd0fffa0L) != 0x0L || (active5 & 0xbc7bcafff75fff01L) != 0x0L || (active6 & 0xfffe3fffff603fffL) != 0x0L || (active7 & 0xfff1ffffff87ffffL) != 0x0L || (active8 & 0xffe0000000000000L) != 0x0L || (active9 & 0xfffffffffeffffbfL) != 0x0L || (active10 & 0x3dfffffffL) != 0x0L)
			{
				if (jjmatchedPos != 2)
				{
					jjmatchedKind = 738;
					jjmatchedPos = 2;
				}
				return 89;
			}
			return -1;
		case 3:
			if ((active0 & 0xe663140000000000L) != 0x0L || (active1 & 0x83000000023fL) != 0x0L || (active2 & 0x600028801e00005fL) != 0x0L || (active3 & 0xe0200e00000L) != 0x0L || (active4 & 0x63b00ffc10L) != 0x0L || (active5 & 0x3c00c803c1406400L) != 0x0L || (active6 & 0x1e0200401800L) != 0x0L || (active7 & 0x594028000401000L) != 0x0L || (active8 & 0x20000000000000L) != 0x0L || (active9 & 0xe0004e00007f8000L) != 0x0L || (active10 & 0x1c78f000bL) != 0x0L)
				return 89;
			if ((active2 & 0x2000000000000L) != 0x0L)
				return 93;
			if ((active0 & 0x199c29fef79a7b38L) != 0x0L || (active1 & 0xffff7cfffffffdc0L) != 0x0L || (active2 & 0x9ffcd71fe1fffe80L) != 0x0L || (active3 & 0x7ffbf1fcbb1fbffeL) != 0x0L || (active4 & 0xffdf3e9c4dc003afL) != 0x0L || (active5 & 0x837b02fc361f9bddL) != 0x0L || (active6 & 0xffffa1fdff3fa7ffL) != 0x0L || (active7 & 0xfa69fd7fffb7efffL) != 0x0L || (active8 & 0xffdffffffffffffeL) != 0x0L || (active9 & 0x1fffb1fffe807fbfL) != 0x0L || (active10 & 0x21870fff4L) != 0x0L)
			{
				if (jjmatchedPos != 3)
				{
					jjmatchedKind = 738;
					jjmatchedPos = 3;
				}
				return 89;
			}
			return -1;
		case 4:
			if ((active0 & 0x1000001c001a3300L) != 0x0L || (active1 & 0x8000440000001440L) != 0x0L || (active2 & 0x150400000c00000L) != 0x0L || (active3 & 0x700087c00041f60L) != 0x0L || (active4 & 0x21f2e8809000000L) != 0x0L || (active5 & 0x1180002200c5300L) != 0x0L || (active6 & 0x4000090808000000L) != 0x0L || (active7 & 0x10080001e4000800L) != 0x0L || (active8 & 0x41c0000000000000L) != 0x0L || (active9 & 0x1418001000003800L) != 0x0L || (active10 & 0x2901001f4L) != 0x0L)
				return 89;
			if ((active2 & 0x2000000000000L) != 0x0L)
				return 93;
			if ((active0 & 0xcd9e29e2f7804838L) != 0x0L || (active1 & 0x7fff3affffffe9bfL) != 0x0L || (active2 & 0xdeac971ffd3ffe9aL) != 0x0L || (active3 & 0x78fbf180bb1ba09eL) != 0x0L || (active4 & 0xfdc0105564cfe3afL) != 0x0L || (active5 & 0xba6302fd961388ddL) != 0x0L || (active6 & 0xbfffa0f5f73fa7ffL) != 0x0L || (active7 & 0xea61fd7e1bb7e7ffL) != 0x0L || (active8 & 0xbe1ffffffffffffeL) != 0x0L || (active9 & 0xcbe7b5effefc47bfL) != 0x0L || (active10 & 0xb68fe03L) != 0x0L)
			{
				if (jjmatchedPos != 4)
				{
					jjmatchedKind = 738;
					jjmatchedPos = 4;
				}
				return 89;
			}
			return -1;
		case 5:
			if ((active0 & 0x2018210004028L) != 0x0L || (active1 & 0x6000200001980000L) != 0x0L || (active2 & 0x86a00018001f0200L) != 0x0L || (active3 & 0x100220c082008084L) != 0x0L || (active4 & 0x2100000400000080L) != 0x0L || (active5 & 0x24302950000028cL) != 0x0L || (active6 & 0x4000080100L) != 0x0L || (active7 & 0x840611e1a0047fcL) != 0x0L || (active8 & 0x1200000000000000L) != 0x0L || (active9 & 0xb20200000000702L) != 0x0L || (active10 & 0x1400080L) != 0x0L)
				return 89;
			if ((active2 & 0x2000000000000L) != 0x0L)
				return 93;
			if ((active0 & 0xcd9c2878e7900810L) != 0x0L || (active1 & 0x1fff1afffe67e9bfL) != 0x0L || (active2 & 0x580c9707fd20fc9aL) != 0x0L || (active3 & 0x68f9d128391b241aL) != 0x0L || (active4 & 0xdcde1c5164cfe32fL) != 0x0L || (active5 & 0xb830006896138851L) != 0x0L || (active6 & 0xbfffa0b5f737a6ffL) != 0x0L || (active7 & 0xe2219c61c1b7a003L) != 0x0L || (active8 & 0xad1ffffffffffffeL) != 0x0L || (active9 & 0xc0c795effefc70bdL) != 0x0L || (active10 & 0xa28ff03L) != 0x0L)
			{
				if (jjmatchedPos != 5)
				{
					jjmatchedKind = 738;
					jjmatchedPos = 5;
				}
				return 89;
			}
			return -1;
		case 6:
			if ((active0 & 0xd98284000000000L) != 0x0L || (active1 & 0x1ffe008070042000L) != 0x0L || (active2 & 0x4800170001063c00L) != 0x0L || (active3 & 0xc0000808030012L) != 0x0L || (active4 & 0x6101140000121L) != 0x0L || (active5 & 0x1002000800120008L) != 0x0L || (active6 & 0xa82000848137a240L) != 0x0L || (active7 & 0x21803000878201L) != 0x0L || (active8 & 0x40L) != 0x0L || (active9 & 0xc081e000800000L) != 0x0L || (active10 & 0xa00f200L) != 0x0L)
				return 89;
			if ((active2 & 0x2000000000000L) != 0x0L)
				return 93;
			if ((active0 & 0xc0040038e7900810L) != 0x0L || (active1 & 0x40011a7f8f73c9bfL) != 0x0L || (active2 & 0x140c8007fc20c09aL) != 0x0L || (active3 & 0x6839d12031182408L) != 0x0L || (active4 & 0xdcd80c4024cfe20eL) != 0x0L || (active5 & 0xa830006096018851L) != 0x0L || (active6 & 0x17dfa031760004bfL) != 0x0L || (active7 & 0xe2005c41d13021f2L) != 0x0L || (active8 & 0xad1fffffffffffbeL) != 0x0L || (active9 & 0xc007140ffe7c76bdL) != 0x0L || (active10 & 0x280d03L) != 0x0L)
			{
				if (jjmatchedPos != 6)
				{
					jjmatchedKind = 738;
					jjmatchedPos = 6;
				}
				return 89;
			}
			return -1;
		case 7:
			if ((active0 & 0x10000000000810L) != 0x0L || (active1 & 0x6000000800L) != 0x0L || (active2 & 0x80068400a002L) != 0x0L || (active3 & 0x2000102021000008L) != 0x0L || (active4 & 0xc0000004800008L) != 0x0L || (active5 & 0x810000080010850L) != 0x0L || (active6 & 0x780000116000000L) != 0x0L || (active7 & 0xe200084000002002L) != 0x0L || (active8 & 0xd000000e84L) != 0x0L || (active9 & 0x100004000020L) != 0x0L || (active10 & 0x80500L) != 0x0L)
				return 89;
			if ((active2 & 0x2000000000000L) != 0x0L)
				return 93;
			if ((active0 & 0xc1040038e7900000L) != 0x0L || (active1 & 0x5ffd1a1fef73c1bfL) != 0x0L || (active2 & 0x140c060178204098L) != 0x0L || (active3 & 0x48b9c10010182400L) != 0x0L || (active4 & 0xdc180c40204fe206L) != 0x0L || (active5 & 0xa020006016008001L) != 0x0L || (active6 & 0x105fa030600704bfL) != 0x0L || (active7 & 0x15401d13701f0L) != 0x0L || (active8 & 0xad1fff2ffffff13aL) != 0x0L || (active9 & 0xc00705cffa7c769dL) != 0x0L || (active10 & 0x208803L) != 0x0L)
			{
				if (jjmatchedPos != 7)
				{
					jjmatchedKind = 738;
					jjmatchedPos = 7;
				}
				return 89;
			}
			return -1;
		case 8:
			if ((active0 & 0x8000002061000000L) != 0x0L || (active1 & 0x108000f03c03fL) != 0x0L || (active2 & 0x1404000000000000L) != 0x0L || (active3 & 0xb8c10010102000L) != 0x0L || (active4 & 0xc0000000206L) != 0x0L || (active5 & 0x8000000016000000L) != 0x0L || (active6 & 0x62020600000bfL) != 0x0L || (active7 & 0x40001100100L) != 0x0L || (active8 & 0x2100000300004000L) != 0x0L || (active9 & 0x10007801c4098L) != 0x0L || (active10 & 0x800L) != 0x0L)
				return 89;
			if ((active0 & 0x4104001886900000L) != 0x0L || (active1 & 0x5ffc121fe0700180L) != 0x0L || (active2 & 0x8060178204098L) != 0x0L || (active3 & 0x4801000000080400L) != 0x0L || (active4 & 0xdc180040204fe000L) != 0x0L || (active5 & 0x2020006000008001L) != 0x0L || (active6 & 0x1059801004070400L) != 0x0L || (active7 & 0xc0015001d02700f0L) != 0x0L || (active8 & 0x8c1fffacffffb13aL) != 0x0L || (active9 & 0xc00605c87a603605L) != 0x0L || (active10 & 0x208003L) != 0x0L)
			{
				if (jjmatchedPos != 8)
				{
					jjmatchedKind = 738;
					jjmatchedPos = 8;
				}
				return 89;
			}
			return -1;
		case 9:
			if ((active0 & 0x46800000L) != 0x0L || (active1 & 0x100fe00000a0L) != 0x0L || (active2 & 0x110204080L) != 0x0L || (active4 & 0x40204c6000L) != 0x0L || (active5 & 0x2020000004008001L) != 0x0L || (active6 & 0x1048801000000000L) != 0x0L || (active7 & 0x80200000L) != 0x0L || (active8 & 0x400000000002038L) != 0x0L || (active9 & 0x40100001004L) != 0x0L || (active10 & 0x8000L) != 0x0L)
				return 89;
			if ((active0 & 0x4104001880100000L) != 0x0L || (active1 & 0x5ffc02100c73811fL) != 0x0L || (active2 & 0x8060068000018L) != 0x0L || (active3 & 0x4801800000080400L) != 0x0L || (active4 & 0xdc18080000038004L) != 0x0L || (active5 & 0x6000000000L) != 0x0L || (active6 & 0x1100000407043fL) != 0x0L || (active7 & 0xc0015001500700f0L) != 0x0L || (active8 & 0x881fffacffff9102L) != 0x0L || (active9 & 0xc00601cc7a782611L) != 0x0L || (active10 & 0x200003L) != 0x0L)
			{
				if (jjmatchedPos != 9)
				{
					jjmatchedKind = 738;
					jjmatchedPos = 9;
				}
				return 89;
			}
			return -1;
		case 10:
			if ((active0 & 0x4004000800000000L) != 0x0L || (active1 & 0x4080001804100000L) != 0x0L || (active2 & 0x48000000L) != 0x0L || (active3 & 0x800800000080400L) != 0x0L || (active4 & 0xc000000000038000L) != 0x0L || (active6 & 0x1000000000400L) != 0x0L || (active7 & 0x400010000000L) != 0x0L || (active8 & 0x810030400009100L) != 0x0L || (active9 & 0x2000878002601L) != 0x0L)
				return 89;
			if ((active0 & 0x100001080100000L) != 0x0L || (active1 & 0x1f7c02074863811fL) != 0x0L || (active2 & 0x8060020000018L) != 0x0L || (active3 & 0x4001000000000000L) != 0x0L || (active4 & 0x1c18080000004004L) != 0x0L || (active5 & 0x6000000000L) != 0x0L || (active6 & 0x1000000407003fL) != 0x0L || (active7 & 0xc0011001400700f0L) != 0x0L || (active8 & 0x800ffca8ffff0002L) != 0x0L || (active9 & 0xc00401c402780010L) != 0x0L || (active10 & 0x200003L) != 0x0L)
			{
				if (jjmatchedPos != 10)
				{
					jjmatchedKind = 738;
					jjmatchedPos = 10;
				}
				return 89;
			}
			return -1;
		case 11:
			if ((active0 & 0x100000000000000L) != 0x0L || (active1 & 0x1668000000000100L) != 0x0L || (active3 & 0x4000000000000000L) != 0x0L || (active4 & 0x1008000000000004L) != 0x0L || (active5 & 0x4000000000L) != 0x0L || (active6 & 0x40000L) != 0x0L || (active7 & 0x8001100100020000L) != 0x0L || (active8 & 0x6082800000002L) != 0x0L || (active9 & 0x8000080000L) != 0x0L || (active10 & 0x200000L) != 0x0L)
				return 89;
			if ((active0 & 0x1080100000L) != 0x0L || (active1 & 0x91402074863801fL) != 0x0L || (active2 & 0x8060020000018L) != 0x0L || (active3 & 0x1000000000000L) != 0x0L || (active4 & 0xc10080000024000L) != 0x0L || (active5 & 0x2000000000L) != 0x0L || (active6 & 0x1000000403003fL) != 0x0L || (active7 & 0x40000000400500f0L) != 0x0L || (active8 & 0x8009f480ffff0000L) != 0x0L || (active9 & 0xc004014472700010L) != 0x0L || (active10 & 0x3L) != 0x0L)
			{
				if (jjmatchedPos != 11)
				{
					jjmatchedKind = 738;
					jjmatchedPos = 11;
				}
				return 89;
			}
			return -1;
		case 12:
			if ((active0 & 0x80000000L) != 0x0L || (active1 & 0x20000000000L) != 0x0L || (active2 & 0x8000020000000L) != 0x0L || (active4 & 0x4000L) != 0x0L || (active7 & 0x4000000000000000L) != 0x0L || (active8 & 0x8408000000000L) != 0x0L || (active9 & 0x4000000300000L) != 0x0L)
				return 89;
			if ((active0 & 0x1000100000L) != 0x0L || (active1 & 0xd1400074863801fL) != 0x0L || (active2 & 0x60000000018L) != 0x0L || (active3 & 0x1000000000000L) != 0x0L || (active4 & 0xc10080000020000L) != 0x0L || (active5 & 0x2000000000L) != 0x0L || (active6 & 0x1000000403003fL) != 0x0L || (active7 & 0x400500f0L) != 0x0L || (active8 & 0x8001b400ffff0000L) != 0x0L || (active9 & 0xc000014472400010L) != 0x0L || (active10 & 0x3L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 12;
				return 89;
			}
			return -1;
		case 13:
			if ((active1 & 0x100000000010000L) != 0x0L || (active3 & 0x1000000000000L) != 0x0L || (active4 & 0x400080000020000L) != 0x0L || (active6 & 0x10000004000003L) != 0x0L || (active7 & 0x40040000L) != 0x0L || (active8 & 0x1200000000000L) != 0x0L || (active9 & 0x10000000000L) != 0x0L)
				return 89;
			if ((active0 & 0x1000100000L) != 0x0L || (active1 & 0xc1400074862801fL) != 0x0L || (active2 & 0x60000000018L) != 0x0L || (active4 & 0x810000000000000L) != 0x0L || (active5 & 0x2000000000L) != 0x0L || (active6 & 0x3003cL) != 0x0L || (active7 & 0x100f0L) != 0x0L || (active8 & 0x80009400ffff0000L) != 0x0L || (active9 & 0xc000004472400010L) != 0x0L || (active10 & 0x3L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 13;
				return 89;
			}
			return -1;
		case 14:
			if ((active0 & 0x1000000000L) != 0x0L || (active1 & 0x4000240000010L) != 0x0L || (active4 & 0x10000000000000L) != 0x0L || (active6 & 0x30000L) != 0x0L || (active7 & 0x10020L) != 0x0L || (active8 & 0x8000800040000000L) != 0x0L || (active9 & 0x4402400010L) != 0x0L)
				return 89;
			if ((active0 & 0x100000L) != 0x0L || (active1 & 0xc1000050862800fL) != 0x0L || (active2 & 0x60000000018L) != 0x0L || (active4 & 0x800000000000000L) != 0x0L || (active5 & 0x2000000000L) != 0x0L || (active6 & 0x3cL) != 0x0L || (active7 & 0xd0L) != 0x0L || (active8 & 0x1400bfff0000L) != 0x0L || (active9 & 0xc000000070000000L) != 0x0L || (active10 & 0x3L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 14;
				return 89;
			}
			return -1;
		case 15:
			if ((active1 & 0x8620001L) != 0x0L || (active2 & 0x60000000000L) != 0x0L || (active8 & 0x800f0000L) != 0x0L)
				return 89;
			if ((active0 & 0x100000L) != 0x0L || (active1 & 0xc1000050000800eL) != 0x0L || (active2 & 0x18L) != 0x0L || (active4 & 0x800000000000000L) != 0x0L || (active5 & 0x2000000000L) != 0x0L || (active6 & 0x3cL) != 0x0L || (active7 & 0xd0L) != 0x0L || (active8 & 0x14003ff00000L) != 0x0L || (active9 & 0xc000000070000000L) != 0x0L || (active10 & 0x3L) != 0x0L)
			{
				if (jjmatchedPos != 15)
				{
					jjmatchedKind = 738;
					jjmatchedPos = 15;
				}
				return 89;
			}
			return -1;
		case 16:
			if ((active1 & 0x400000400008000L) != 0x0L || (active5 & 0x2000000000L) != 0x0L || (active7 & 0x80L) != 0x0L || (active8 & 0x38700000L) != 0x0L)
				return 89;
			if ((active0 & 0x100000L) != 0x0L || (active1 & 0x81000010040000eL) != 0x0L || (active2 & 0x40000000018L) != 0x0L || (active4 & 0x800000000000000L) != 0x0L || (active6 & 0x3cL) != 0x0L || (active7 & 0x50L) != 0x0L || (active8 & 0x1400078e0000L) != 0x0L || (active9 & 0xc000000070000000L) != 0x0L || (active10 & 0x3L) != 0x0L)
			{
				if (jjmatchedPos != 16)
				{
					jjmatchedKind = 738;
					jjmatchedPos = 16;
				}
				return 89;
			}
			return -1;
		case 17:
			if ((active1 & 0x100000004L) != 0x0L || (active8 & 0x2000000L) != 0x0L)
				return 89;
			if ((active0 & 0x100000L) != 0x0L || (active1 & 0x81000000040000aL) != 0x0L || (active2 & 0x40000000018L) != 0x0L || (active4 & 0x800000000000000L) != 0x0L || (active6 & 0x3cL) != 0x0L || (active7 & 0x50L) != 0x0L || (active8 & 0x140015ee0000L) != 0x0L || (active9 & 0xc000000070000000L) != 0x0L || (active10 & 0x3L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 17;
				return 89;
			}
			return -1;
		case 18:
			if ((active8 & 0x140005800000L) != 0x0L || (active9 & 0x10000000L) != 0x0L)
				return 89;
			if ((active0 & 0x100000L) != 0x0L || (active1 & 0x81000000040000aL) != 0x0L || (active2 & 0x40000000018L) != 0x0L || (active4 & 0x800000000000000L) != 0x0L || (active6 & 0x3cL) != 0x0L || (active7 & 0x50L) != 0x0L || (active8 & 0x106e0000L) != 0x0L || (active9 & 0xc000000060000000L) != 0x0L || (active10 & 0x3L) != 0x0L)
			{
				if (jjmatchedPos != 18)
				{
					jjmatchedKind = 738;
					jjmatchedPos = 18;
				}
				return 89;
			}
			return -1;
		case 19:
			if ((active1 & 0x8L) != 0x0L || (active4 & 0x800000000000000L) != 0x0L || (active7 & 0x10L) != 0x0L)
				return 89;
			if ((active0 & 0x100000L) != 0x0L || (active1 & 0x810000000400002L) != 0x0L || (active2 & 0x40000000018L) != 0x0L || (active6 & 0x3cL) != 0x0L || (active7 & 0x40L) != 0x0L || (active8 & 0x116e0000L) != 0x0L || (active9 & 0xc000000060000000L) != 0x0L || (active10 & 0x3L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 19;
				return 89;
			}
			return -1;
		case 20:
			if ((active0 & 0x100000L) != 0x0L || (active1 & 0x400002L) != 0x0L || (active2 & 0x40000000000L) != 0x0L || (active7 & 0x40L) != 0x0L)
				return 89;
			if ((active1 & 0x810000000000000L) != 0x0L || (active2 & 0x18L) != 0x0L || (active6 & 0x3cL) != 0x0L || (active8 & 0x116e0000L) != 0x0L || (active9 & 0xc000000060000000L) != 0x0L || (active10 & 0x3L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 20;
				return 89;
			}
			return -1;
		case 21:
			if ((active2 & 0x8L) != 0x0L || (active9 & 0x8000000020000000L) != 0x0L || (active10 & 0x1L) != 0x0L)
				return 89;
			if ((active1 & 0x810000000000000L) != 0x0L || (active2 & 0x10L) != 0x0L || (active6 & 0x3cL) != 0x0L || (active8 & 0x116e0000L) != 0x0L || (active9 & 0x4000000040000000L) != 0x0L || (active10 & 0x2L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 21;
				return 89;
			}
			return -1;
		case 22:
			if ((active6 & 0x10L) != 0x0L)
				return 89;
			if ((active1 & 0x810000000000000L) != 0x0L || (active2 & 0x10L) != 0x0L || (active6 & 0x2cL) != 0x0L || (active8 & 0x116e0000L) != 0x0L || (active9 & 0x4000000040000000L) != 0x0L || (active10 & 0x2L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 22;
				return 89;
			}
			return -1;
		case 23:
			if ((active8 & 0x20000L) != 0x0L || (active9 & 0x40000000L) != 0x0L || (active10 & 0x2L) != 0x0L)
				return 89;
			if ((active1 & 0x810000000000000L) != 0x0L || (active2 & 0x10L) != 0x0L || (active6 & 0x2cL) != 0x0L || (active8 & 0x116c0000L) != 0x0L || (active9 & 0x4000000000000000L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 23;
				return 89;
			}
			return -1;
		case 24:
			if ((active6 & 0x20L) != 0x0L || (active9 & 0x4000000000000000L) != 0x0L)
				return 89;
			if ((active1 & 0x810000000000000L) != 0x0L || (active2 & 0x10L) != 0x0L || (active6 & 0xcL) != 0x0L || (active8 & 0x116c0000L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 24;
				return 89;
			}
			return -1;
		case 25:
			if ((active6 & 0xcL) != 0x0L || (active8 & 0x100c0000L) != 0x0L)
				return 89;
			if ((active1 & 0x810000000000000L) != 0x0L || (active2 & 0x10L) != 0x0L || (active8 & 0x1600000L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 25;
				return 89;
			}
			return -1;
		case 26:
			if ((active2 & 0x10L) != 0x0L || (active8 & 0x600000L) != 0x0L)
				return 89;
			if ((active1 & 0x810000000000000L) != 0x0L || (active8 & 0x1000000L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 26;
				return 89;
			}
			return -1;
		case 27:
			if ((active1 & 0x810000000000000L) != 0x0L || (active8 & 0x1000000L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 27;
				return 89;
			}
			return -1;
		case 28:
			if ((active8 & 0x1000000L) != 0x0L)
				return 89;
			if ((active1 & 0x810000000000000L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 28;
				return 89;
			}
			return -1;
		case 29:
			if ((active1 & 0x810000000000000L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 29;
				return 89;
			}
			return -1;
		case 30:
			if ((active1 & 0x10000000000000L) != 0x0L)
				return 89;
			if ((active1 & 0x800000000000000L) != 0x0L)
			{
				jjmatchedKind = 738;
				jjmatchedPos = 30;
				return 89;
			}
			return -1;
		default :
			return -1;
		}
	}
	private final int jjStartNfa_2(int pos, long active0, long active1, long active2, long active3, long active4, long active5, long active6, long active7, long active8, long active9, long active10, long active11){
		return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, active11), pos + 1);
	}
	private int jjMoveStringLiteralDfa0_2(){
		switch(curChar)
		{
		case '!':
			return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x8L);
		case '"':
			return jjStopAtPos(0, 717);
		case '$':
			return jjStartNfaWithStates_2(0, 720, 89);
		case '%':
			return jjStopAtPos(0, 712);
		case '\'':
			return jjStartNfaWithStates_2(0, 716, 55);
		case '(':
			return jjStopAtPos(0, 686);
		case ')':
			return jjStopAtPos(0, 687);
		case '*':
			jjmatchedKind = 710;
			return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x800000L);
		case '+':
			return jjStopAtPos(0, 708);
		case ',':
			return jjStopAtPos(0, 698);
		case '-':
			return jjStartNfaWithStates_2(0, 709, 15);
		case '.':
			jjmatchedKind = 697;
			return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x800L);
		case '/':
			jjmatchedKind = 711;
			return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x2000000L);
		case ':':
			return jjStopAtPos(0, 703);
		case ';':
			return jjStopAtPos(0, 696);
		case '<':
			jjmatchedKind = 701;
			return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x5L);
		case '=':
			jjmatchedKind = 699;
			return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x400L);
		case '>':
			jjmatchedKind = 700;
			return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x2L);
		case '?':
			return jjStopAtPos(0, 702);
		case 'A':
			jjmatchedKind = 1;
			return jjMoveStringLiteralDfa1_2(0x1fffffffcL, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'B':
			return jjMoveStringLiteralDfa1_2(0x7ffe00000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'C':
			jjmatchedKind = 47;
			return jjMoveStringLiteralDfa1_2(0xffff000000000000L, 0xffffffffffffffffL, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'D':
			return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x7ffffffffffL, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x200000000L, 0x0L);
		case 'E':
			return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0xfffff80000000000L, 0x1fL, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'F':
			return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x3ffffe0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'G':
			jjmatchedKind = 218;
			return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x7ff8000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'H':
			return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0xf8000000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'I':
			return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0xfffff00000000000L, 0x3ffL, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'J':
			return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x0L, 0xffc00L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'K':
			jjmatchedKind = 276;
			return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x0L, 0xe00000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'L':
			return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x0L, 0x3fffff000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'M':
			jjmatchedKind = 302;
			return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x0L, 0xffff800000000000L, 0x1fffL, 0x0L, 0x8000000000000L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'N':
			return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0xfffffe000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'O':
			return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x3ffffff000000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'P':
			return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0xc000000000000000L, 0x7fffffffffL, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'Q':
			return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x8000000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'R':
			return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0xffffff0000000000L, 0xffffffL, 0x0L, 0x0L, 0x0L, 0x0L);
		case 'S':
			return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0xfff7ffffff000000L, 0xffffffffffffffffL, 0x7ffL, 0x0L, 0x0L);
		case 'T':
			return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x7ffffffff800L, 0x0L, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0xffff800000000000L, 0x3fL, 0x0L);
		case 'V':
			return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x1ffc0L, 0x0L);
		case 'W':
			return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x1ffe0000L, 0x0L);
		case 'X':
			return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x20000000L, 0x0L);
		case 'Y':
			return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0xc0000000L, 0x0L);
		case 'Z':
			return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x100000000L, 0x0L);
		case '[':
			return jjStopAtPos(0, 694);
		case ']':
			return jjStopAtPos(0, 695);
		case '^':
			return jjStopAtPos(0, 719);
		case '{':
			return jjStartNfaWithStates_2(0, 692, 92);
		case '|':
			jjmatchedKind = 718;
			return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x200L);
		case '}':
			return jjStopAtPos(0, 693);
		default :
			return jjMoveNfa_2(0, 0);
		}
	}
	private int jjMoveStringLiteralDfa1_2(long active0, long active1, long active2, long active3, long active4, long active5, long active6, long active7, long active8, long active9, long active10, long active11){
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_2(0, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, active11);
			return 1;
		}
		switch(curChar)
		{
		case '*':
			if ((active11 & 0x2000000L) != 0x0L)
				return jjStartNfaWithStates_2(1, 729, 82);
			break;
		case '.':
			if ((active11 & 0x800L) != 0x0L)
				return jjStopAtPos(1, 715);
			break;
		case '/':
			if ((active11 & 0x800000L) != 0x0L)
				return jjStopAtPos(1, 727);
			break;
		case '=':
			if ((active11 & 0x1L) != 0x0L)
				return jjStopAtPos(1, 704);
			else if ((active11 & 0x2L) != 0x0L)
				return jjStopAtPos(1, 705);
			else if ((active11 & 0x8L) != 0x0L)
				return jjStopAtPos(1, 707);
			break;
		case '>':
			if ((active11 & 0x4L) != 0x0L)
				return jjStopAtPos(1, 706);
			else if ((active11 & 0x400L) != 0x0L)
				return jjStopAtPos(1, 714);
			break;
		case 'A':
			return jjMoveStringLiteralDfa2_2(active0, 0x1ff000000000000L, active1, 0x0L, active2, 0x8000000007fL, active3, 0x8000000020L, active4, 0x7f80007f000400L, active5, 0xc00000000003e000L, active6, 0x30000003fffL, active7, 0x1000000L, active8, 0x0L, active9, 0x3800L, active10, 0x3fc0L, active11, 0x0L);
		case 'B':
			return jjMoveStringLiteralDfa2_2(active0, 0x1cL, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x1000000000L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L, active11, 0x0L);
		case 'C':
			return jjMoveStringLiteralDfa2_2(active0, 0x20L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0xe0000c0000L, active6, 0x0L, active7, 0x3fe000000L, active8, 0x0L, active9, 0x0L, active10, 0x0L, active11, 0x0L);
		case 'D':
			return jjMoveStringLiteralDfa2_2(active0, 0x1c0L, active1, 0x0L, active2, 0x0L, active3, 0x100000000000L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L, active11, 0x0L);
		case 'E':
			return jjMoveStringLiteralDfa2_2(active0, 0xe00007e00000000L, active1, 0x0L, active2, 0x3fffff80L, active3, 0x78000040L, active4, 0x3f80000f80e00000L, active5, 0x700000L, active6, 0xfffffc00001fc000L, active7, 0x7fffc000007ffL, active8, 0x0L, active9, 0x800000004000L, active10, 0x2c002c000L, active11, 0x0L);
		case 'F':
			if ((active5 & 0x10000000000L) != 0x0L)
			{
				jjmatchedKind = 360;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_2(active0, 0x200L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x20000000000L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L, active11, 0x0L);
		case 'G':
			return jjMoveStringLiteralDfa2_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x200000000000L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L, active11, 0x0L);
		case 'H':
			return jjMoveStringLiteralDfa2_2(active0, 0xf000000000000000L, active1, 0x7fL, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x10000000000000L, active8, 0x0L, active9, 0x8000L, active10, 0x1c0000L, active11, 0x0L);
		case 'I':
			return jjMoveStringLiteralDfa2_2(active0, 0x38000000000L, active1, 0x0L, active2, 0x7c0000000L, active3, 0x10000000780L, active4, 0xc00000f000000000L, active5, 0x1fL, active6, 0x0L, active7, 0xe8000000000800L, active8, 0x0L, active9, 0xff0000L, active10, 0x3e10000L, active11, 0x0L);
		case 'K':
			return jjMoveStringLiteralDfa2_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x100000000000000L, active8, 0x0L, active9, 0x0L, active10, 0x0L, active11, 0x0L);
		case 'L':
			return jjMoveStringLiteralDfa2_2(active0, 0x40000007c00L, active1, 0x780L, active2, 0x300000000000L, active3, 0x80001800L, active4, 0x0L, active5, 0x40000000000L, active6, 0xe00000L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L, active11, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa2_2(active0, 0x0L, active1, 0x0L, active2, 0x400000000000L, active3, 0x3c00000000000L, active4, 0x0L, active5, 0x80000000000L, active6, 0x0L, active7, 0x200000000000000L, active8, 0x0L, active9, 0x0L, active10, 0x20000000L, active11, 0x0L);
		case 'N':
			if ((active3 & 0x4000000000000L) != 0x0L)
			{
				jjmatchedKind = 242;
				jjmatchedPos = 1;
			}
			else if ((active4 & 0x10000000000L) != 0x0L)
				return jjStartNfaWithStates_2(1, 296, 89);
			else if ((active5 & 0x100000000000L) != 0x0L)
			{
				jjmatchedKind = 364;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_2(active0, 0x18000L, active1, 0x0L, active2, 0xf800000000000L, active3, 0xfff8000000000000L, active4, 0x3fL, active5, 0x600000000000L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x1ff000000000000L, active10, 0x0L, active11, 0x0L);
		case 'O':
			if ((active3 & 0x100000000L) != 0x0L)
			{
				jjmatchedKind = 224;
				jjmatchedPos = 1;
			}
			else if ((active5 & 0x800000L) != 0x0L)
			{
				jjmatchedKind = 343;
				jjmatchedPos = 1;
			}
			else if ((active9 & 0x1000000L) != 0x0L)
			{
				jjmatchedKind = 600;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_2(active0, 0x180000000000L, active1, 0x1ffffffff800L, active2, 0x7800000000L, active3, 0xe020007e000L, active4, 0x3e0000000800L, active5, 0xf0007e0L, active6, 0xf000000L, active7, 0xc000000007ff000L, active8, 0x0L, active9, 0x2000000L, active10, 0x104000000L, active11, 0x0L);
		case 'P':
			return jjMoveStringLiteralDfa2_2(active0, 0x20000L, active1, 0x0L, active2, 0x10000000000000L, active3, 0x0L, active4, 0x0L, active5, 0x3800000000000L, active6, 0x0L, active7, 0xf000000000000000L, active8, 0x0L, active9, 0xe00000000000000L, active10, 0x0L, active11, 0x0L);
		case 'Q':
			return jjMoveStringLiteralDfa2_2(active0, 0x0L, active1, 0x0L, active2, 0x20000000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x3fffffffffffffL, active9, 0x0L, active10, 0x0L, active11, 0x0L);
		case 'R':
			if ((active5 & 0x4000000000000L) != 0x0L)
			{
				jjmatchedKind = 370;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_2(active0, 0x2000001c0000L, active1, 0x600000000000L, active2, 0x40008000000000L, active3, 0x7c00780000L, active4, 0x0L, active5, 0x38000000000000L, active6, 0x3ff0000000L, active7, 0x0L, active8, 0x0L, active9, 0x1ffffc000000L, active10, 0x18000000L, active11, 0x0L);
		case 'S':
			if ((active0 & 0x200000L) != 0x0L)
			{
				jjmatchedKind = 21;
				jjmatchedPos = 1;
			}
			else if ((active4 & 0x40L) != 0x0L)
			{
				jjmatchedKind = 262;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_2(active0, 0x7c00000L, active1, 0x0L, active2, 0x80000000000000L, active3, 0x0L, active4, 0xff380L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0xf000000000000000L, active10, 0x7L, active11, 0x0L);
		case 'T':
			if ((active0 & 0x8000000L) != 0x0L)
			{
				jjmatchedKind = 27;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_2(active0, 0x70000000L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x40000030000000L, active6, 0x0L, active7, 0x0L, active8, 0x7fc0000000000000L, active9, 0x0L, active10, 0x38L, active11, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa2_2(active0, 0x80000000L, active1, 0x7fff800000000000L, active2, 0x0L, active3, 0x3800000L, active4, 0x0L, active5, 0x380000fc0001800L, active6, 0xc000000000L, active7, 0x800000L, active8, 0x8000000000000000L, active9, 0x20000000007fL, active10, 0x0L, active11, 0x0L);
		case 'V':
			return jjMoveStringLiteralDfa2_2(active0, 0x100000000L, active1, 0x0L, active2, 0x100000000000000L, active3, 0x0L, active4, 0x0L, active5, 0x3c00000000000000L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L, active11, 0x0L);
		case 'X':
			return jjMoveStringLiteralDfa2_2(active0, 0x0L, active1, 0x0L, active2, 0xfe00000000000000L, active3, 0x1fL, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L, active11, 0x0L);
		case 'Y':
			if ((active0 & 0x400000000000L) != 0x0L)
				return jjStartNfaWithStates_2(1, 46, 89);
			return jjMoveStringLiteralDfa2_2(active0, 0x0L, active1, 0x8000000000000000L, active2, 0x70000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x400000000780L, active10, 0x0L, active11, 0x0L);
		case '|':
			if ((active11 & 0x200L) != 0x0L)
				return jjStopAtPos(1, 713);
			break;
		default :
			break;
		}
		return jjStartNfa_2(0, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, active11);
	}
	private int jjMoveStringLiteralDfa2_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10, long old11, long active11){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10) | (active11 &= old11)) == 0L)
			return jjStartNfa_2(0, old0, old1, old2, old3, old4, old5, old6, old7, old8, old9, old10, old11);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_2(1, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
			return 2;
		}
		switch(curChar)
		{
		case 'A':
			if ((active0 & 0x40L) != 0x0L)
				return jjStartNfaWithStates_2(2, 6, 89);
			return jjMoveStringLiteralDfa3_2(active0, 0xf000000000000000L, active1, 0x9bfL, active2, 0x40000080L, active3, 0xc00180000L, active4, 0x80000180000000L, active5, 0x0L, active6, 0x1c8000600000L, active7, 0x1200000406000000L, active8, 0x3c0000000000000L, active9, 0x1000000ffc000000L, active10, 0xc8000000L);
		case 'B':
			return jjMoveStringLiteralDfa3_2(active0, 0x0L, active1, 0x800000001000L, active2, 0x0L, active3, 0x0L, active4, 0x1001000000L, active5, 0x0L, active6, 0x4000000000L, active7, 0x0L, active8, 0x8000000000000000L, active9, 0x100000000381fL, active10, 0x0L);
		case 'C':
			if ((active0 & 0x400000L) != 0x0L)
				return jjStartNfaWithStates_2(2, 22, 89);
			else if ((active2 & 0x100L) != 0x0L)
			{
				jjmatchedKind = 136;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_2(active0, 0x0L, active1, 0x8000000000000000L, active2, 0x1e80880000000e00L, active3, 0x18000000000000L, active4, 0x40001e0000000000L, active5, 0x2000000000L, active6, 0x200000000000L, active7, 0x7800000000L, active8, 0x0L, active9, 0x6000000000020L, active10, 0x0L);
		case 'D':
			if ((active0 & 0x80L) != 0x0L)
				return jjStartNfaWithStates_2(2, 7, 89);
			else if ((active0 & 0x8000L) != 0x0L)
				return jjStartNfaWithStates_2(2, 15, 89);
			else if ((active2 & 0x1000000000000L) != 0x0L)
			{
				jjmatchedKind = 176;
				jjmatchedPos = 2;
			}
			else if ((active5 & 0x20L) != 0x0L)
			{
				jjmatchedKind = 325;
				jjmatchedPos = 2;
			}
			else if ((active5 & 0x40000000000L) != 0x0L)
				return jjStartNfaWithStates_2(2, 362, 89);
			else if ((active5 & 0x4000000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(2, 382, 89);
			return jjMoveStringLiteralDfa3_2(active0, 0x0L, active1, 0x0L, active2, 0xe000000000000L, active3, 0x20000000000000L, active4, 0x0L, active5, 0x380000000000c0L, active6, 0x0L, active7, 0x0L, active8, 0xc00000000000000L, active9, 0x208000000000000L, active10, 0x200200000L);
		case 'E':
			if ((active0 & 0x40000L) != 0x0L)
				return jjStartNfaWithStates_2(2, 18, 89);
			else if ((active5 & 0x200000000000L) != 0x0L)
				return jjStartNfaWithStates_2(2, 365, 89);
			return jjMoveStringLiteralDfa3_2(active0, 0x200000800000L, active1, 0x200000000040L, active2, 0x6100100000000000L, active3, 0x110000200000L, active4, 0x0L, active5, 0x3c00800000000000L, active6, 0x3f0000000L, active7, 0xe000008000000000L, active8, 0x0L, active9, 0xe000001000018000L, active10, 0x1f0003L);
		case 'F':
			if ((active6 & 0x400000000000L) != 0x0L)
			{
				jjmatchedKind = 430;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_2(active0, 0x200000000L, active1, 0x0L, active2, 0x7f000L, active3, 0x0L, active4, 0x200000000L, active5, 0x20000000000L, active6, 0x1800000000000L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x38L);
		case 'G':
			if ((active0 & 0x100000000L) != 0x0L)
				return jjStartNfaWithStates_2(2, 32, 89);
			else if ((active4 & 0x2000000L) != 0x0L)
				return jjStartNfaWithStates_2(2, 281, 89);
			return jjMoveStringLiteralDfa3_2(active0, 0x9c00000000L, active1, 0x0L, active2, 0x80000L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x3fe000000000000L, active7, 0x800L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'H':
			return jjMoveStringLiteralDfa3_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x40000010040000L, active6, 0x0L, active7, 0x18000000L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'I':
			if ((active6 & 0x800000L) != 0x0L)
				return jjStartNfaWithStates_2(2, 407, 89);
			return jjMoveStringLiteralDfa3_2(active0, 0x600000000000000L, active1, 0x0L, active2, 0x8000000000000000L, active3, 0xc0000000000000L, active4, 0x800L, active5, 0x80020000000L, active6, 0x1c00000000L, active7, 0x100000000000000L, active8, 0x0L, active9, 0x3007e000000000L, active10, 0x10000004L);
		case 'J':
			return jjMoveStringLiteralDfa3_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x1000000000L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'K':
			return jjMoveStringLiteralDfa3_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x6000000000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x40000000000000L, active10, 0x0L);
		case 'L':
			if ((active0 & 0x400L) != 0x0L)
			{
				jjmatchedKind = 10;
				jjmatchedPos = 2;
			}
			else if ((active8 & 0x1L) != 0x0L)
			{
				jjmatchedKind = 512;
				jjmatchedPos = 2;
			}
			else if ((active10 & 0x20000000L) != 0x0L)
				return jjStartNfaWithStates_2(2, 669, 89);
			return jjMoveStringLiteralDfa3_2(active0, 0x3000000001800L, active1, 0x1fe000L, active2, 0x100000L, active3, 0x200008020a0L, active4, 0x8000000000000000L, active5, 0x4003c0080801L, active6, 0xc00000000000000L, active7, 0x30000007000L, active8, 0x1ffffffffffffeL, active9, 0x0L, active10, 0x1c0L);
		case 'M':
			if ((active9 & 0x40L) != 0x0L)
				return jjStartNfaWithStates_2(2, 582, 89);
			return jjMoveStringLiteralDfa3_2(active0, 0x100L, active1, 0x1000001e00000L, active2, 0x800000000L, active3, 0xc00000000000L, active4, 0x100008000000000L, active5, 0xc00007000L, active6, 0x0L, active7, 0x460000000000000L, active8, 0x0L, active9, 0x2000007e4080L, active10, 0x0L);
		case 'N':
			if ((active5 & 0x2L) != 0x0L)
			{
				jjmatchedKind = 321;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_2(active0, 0x800010000000000L, active1, 0xfffe000000L, active2, 0x70000200000L, active3, 0x100200019000100L, active4, 0x404000000L, active5, 0x100831cL, active6, 0x30000000000L, active7, 0x8040000800000L, active8, 0x0L, active9, 0x180000000800000L, active10, 0x100400000L);
		case 'O':
			return jjMoveStringLiteralDfa3_2(active0, 0xc0010000000L, active1, 0x400000000600L, active2, 0x10008000000000L, active3, 0x2000070a0401800L, active4, 0xff380L, active5, 0x0L, active6, 0x2000000000L, active7, 0x100001e0000000L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'P':
			if ((active3 & 0x1L) != 0x0L)
			{
				jjmatchedKind = 192;
				jjmatchedPos = 2;
			}
			else if ((active4 & 0x800000000000L) != 0x0L)
				return jjStartNfaWithStates_2(2, 303, 89);
			return jjMoveStringLiteralDfa3_2(active0, 0x20000L, active1, 0x0L, active2, 0x400000400000L, active3, 0x403000000000002L, active4, 0x0L, active5, 0x0L, active6, 0x3000000000000000L, active7, 0x0L, active8, 0x0L, active9, 0x400400002000000L, active10, 0x0L);
		case 'Q':
			return jjMoveStringLiteralDfa3_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x80000000000L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'R':
			if ((active3 & 0x4000L) != 0x0L)
			{
				jjmatchedKind = 206;
				jjmatchedPos = 2;
			}
			else if ((active6 & 0x4000L) != 0x0L)
			{
				jjmatchedKind = 398;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_2(active0, 0x4002000180000L, active1, 0x7ffe030000000000L, active2, 0x40000001800000L, active3, 0x38600L, active4, 0x200000008000000L, active5, 0x8000000006000400L, active6, 0x11f80ffL, active7, 0x700200000000L, active8, 0x3020000000000000L, active9, 0x0L, active10, 0x400fe00L);
		case 'S':
			if ((active0 & 0x4L) != 0x0L)
			{
				jjmatchedKind = 2;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_2(active0, 0x78000003000018L, active1, 0x0L, active2, 0x20079e000000L, active3, 0x7800000002000000L, active4, 0x1c00000030000000L, active5, 0x100000L, active6, 0xc000000006000f00L, active7, 0x1800000000007L, active8, 0x0L, active9, 0x800800000000700L, active10, 0x0L);
		case 'T':
			if ((active0 & 0x20000000000L) != 0x0L)
				return jjStartNfaWithStates_2(2, 41, 89);
			else if ((active3 & 0x40000000L) != 0x0L)
				return jjStartNfaWithStates_2(2, 222, 89);
			else if ((active3 & 0x8000000000000000L) != 0x0L)
			{
				jjmatchedKind = 255;
				jjmatchedPos = 2;
			}
			else if ((active5 & 0x8000000L) != 0x0L)
				return jjStartNfaWithStates_2(2, 347, 89);
			else if ((active5 & 0x80000000000000L) != 0x0L)
			{
				jjmatchedKind = 375;
				jjmatchedPos = 2;
			}
			else if ((active7 & 0x2000000000000L) != 0x0L)
			{
				jjmatchedKind = 497;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_2(active0, 0x1801040e0002220L, active1, 0x0L, active2, 0x2000001fL, active3, 0x20000005cL, active4, 0x201f00004000001fL, active5, 0x30300c000030000L, active6, 0x3000L, active7, 0x40000000003f8L, active8, 0x0L, active9, 0x0L, active10, 0x3800000L);
		case 'U':
			return jjMoveStringLiteralDfa3_2(active0, 0x0L, active1, 0x40000000000L, active2, 0x20001000000000L, active3, 0xc0000040000L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x800000000078000L, active8, 0x0L, active9, 0x180000000000L, active10, 0x0L);
		case 'V':
			return jjMoveStringLiteralDfa3_2(active0, 0x0L, active1, 0x180000000000L, active2, 0x0L, active3, 0x8000000000L, active4, 0x800000420L, active5, 0x0L, active6, 0x0L, active7, 0x1000400L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'W':
			if ((active2 & 0x2000000000L) != 0x0L)
				return jjStartNfaWithStates_2(2, 165, 89);
			else if ((active5 & 0x200000L) != 0x0L)
				return jjStartNfaWithStates_2(2, 341, 89);
			else if ((active7 & 0x80000L) != 0x0L)
			{
				jjmatchedKind = 467;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_2(active0, 0x4000L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x200000000000L, active5, 0x0L, active6, 0x8000000L, active7, 0x700000L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'X':
			if ((active4 & 0x20000000000000L) != 0x0L)
			{
				jjmatchedKind = 309;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x40000000000000L, active5, 0x400000L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'Y':
			if ((active0 & 0x10000L) != 0x0L)
				return jjStartNfaWithStates_2(2, 16, 89);
			else if ((active2 & 0x20L) != 0x0L)
			{
				jjmatchedKind = 133;
				jjmatchedPos = 2;
			}
			else if ((active2 & 0x4000000000L) != 0x0L)
				return jjStartNfaWithStates_2(2, 166, 89);
			else if ((active4 & 0x200000L) != 0x0L)
			{
				jjmatchedKind = 277;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_2(active0, 0x4000000L, active1, 0x0L, active2, 0x40L, active3, 0x0L, active4, 0xc00000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x4000000000000000L, active9, 0x0L, active10, 0x0L);
		case 'Z':
			return jjMoveStringLiteralDfa3_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x80000000000000L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_2(1, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa3_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_2(1, old0, old1, old2, old3, old4, old5, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_2(2, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
			return 3;
		}
		switch(curChar)
		{
		case '-':
			return jjMoveStringLiteralDfa4_2(active0, 0x0L, active1, 0x0L, active2, 0x2000000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case '1':
			return jjMoveStringLiteralDfa4_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x10L);
		case '3':
			return jjMoveStringLiteralDfa4_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x20L);
		case '8':
			if ((active10 & 0x8L) != 0x0L)
				return jjStartNfaWithStates_2(3, 643, 89);
			break;
		case 'A':
			if ((active2 & 0x1L) != 0x0L)
			{
				jjmatchedKind = 128;
				jjmatchedPos = 3;
			}
			else if ((active4 & 0x400L) != 0x0L)
				return jjStartNfaWithStates_2(3, 266, 89);
			return jjMoveStringLiteralDfa4_2(active0, 0x180210000184000L, active1, 0x380000000000L, active2, 0xa0070880003202L, active3, 0x900L, active4, 0x1e0000000000L, active5, 0x8000000000040000L, active6, 0x40000000000003fL, active7, 0x0L, active8, 0x0L, active9, 0x280001000000000L, active10, 0x0L);
		case 'B':
			if ((active0 & 0x40000000000L) != 0x0L)
				return jjStartNfaWithStates_2(3, 42, 89);
			else if ((active1 & 0x200L) != 0x0L)
				return jjStartNfaWithStates_2(3, 73, 89);
			return jjMoveStringLiteralDfa4_2(active0, 0x0L, active1, 0x0L, active2, 0x1000000000L, active3, 0x80000000L, active4, 0x100000000000000L, active5, 0x400000000L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x200000000000L, active10, 0x800L);
		case 'C':
			if ((active2 & 0x2000000L) != 0x0L)
			{
				jjmatchedKind = 153;
				jjmatchedPos = 3;
			}
			else if ((active2 & 0x2000000000000000L) != 0x0L)
			{
				jjmatchedKind = 189;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_2(active0, 0x18000000000000L, active1, 0x40L, active2, 0x401000011c000000L, active3, 0x1080040L, active4, 0x1f000000000000L, active5, 0x0L, active6, 0x2070278100L, active7, 0xf000000000000000L, active8, 0x8000000000000000L, active9, 0x800000000020L, active10, 0x1000L);
		case 'D':
			if ((active3 & 0x20000000000L) != 0x0L)
				return jjStartNfaWithStates_2(3, 233, 89);
			else if ((active4 & 0x80000000L) != 0x0L)
			{
				jjmatchedKind = 287;
				jjmatchedPos = 3;
			}
			else if ((active6 & 0x40000000000L) != 0x0L)
			{
				jjmatchedKind = 426;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_2(active0, 0x4000000000000L, active1, 0xe000000L, active2, 0x0L, active3, 0x0L, active4, 0x100000080L, active5, 0x0L, active6, 0x80000000000L, active7, 0x0L, active8, 0xc00000000000000L, active9, 0x0L, active10, 0x400000L);
		case 'E':
			if ((active0 & 0x20000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(3, 53, 89);
			else if ((active1 & 0x800000000000L) != 0x0L)
				return jjStartNfaWithStates_2(3, 111, 89);
			else if ((active2 & 0x4L) != 0x0L)
			{
				jjmatchedKind = 130;
				jjmatchedPos = 3;
			}
			else if ((active2 & 0x200000000000L) != 0x0L)
				return jjStartNfaWithStates_2(3, 173, 89);
			else if ((active3 & 0x200000L) != 0x0L)
				return jjStartNfaWithStates_2(3, 213, 89);
			else if ((active4 & 0x2000000000L) != 0x0L)
			{
				jjmatchedKind = 293;
				jjmatchedPos = 3;
			}
			else if ((active5 & 0x400L) != 0x0L)
				return jjStartNfaWithStates_2(3, 330, 89);
			else if ((active5 & 0x2000L) != 0x0L)
			{
				jjmatchedKind = 333;
				jjmatchedPos = 3;
			}
			else if ((active5 & 0x1000000L) != 0x0L)
				return jjStartNfaWithStates_2(3, 344, 89);
			else if ((active7 & 0x1000L) != 0x0L)
				return jjStartNfaWithStates_2(3, 460, 89);
			else if ((active7 & 0x80000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(3, 503, 89);
			else if ((active7 & 0x400000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(3, 506, 89);
			else if ((active9 & 0x20000L) != 0x0L)
			{
				jjmatchedKind = 593;
				jjmatchedPos = 3;
			}
			else if ((active9 & 0x80000000000L) != 0x0L)
				return jjStartNfaWithStates_2(3, 619, 89);
			else if ((active9 & 0x400000000000L) != 0x0L)
				return jjStartNfaWithStates_2(3, 622, 89);
			else if ((active10 & 0x100000000L) != 0x0L)
				return jjStartNfaWithStates_2(3, 672, 89);
			return jjMoveStringLiteralDfa4_2(active0, 0x1002208L, active1, 0x1000000000000L, active2, 0x60000002090c018L, active3, 0x1900c0001801000cL, active4, 0x20484100000fL, active5, 0x15800d800004000L, active6, 0x5801800008000000L, active7, 0x10019000000L, active8, 0x1000000000000002L, active9, 0xd080000007c0000L, active10, 0x0L);
		case 'F':
			if ((active7 & 0x20000000000L) != 0x0L)
				return jjStartNfaWithStates_2(3, 489, 89);
			break;
		case 'G':
			return jjMoveStringLiteralDfa4_2(active0, 0x0L, active1, 0x0L, active2, 0x40000000L, active3, 0x0L, active4, 0x20000040c000000L, active5, 0x0L, active6, 0x10000000000L, active7, 0x0L, active8, 0x0L, active9, 0x100001e000000000L, active10, 0x0L);
		case 'H':
			if ((active0 & 0x100000000000L) != 0x0L)
				return jjStartNfaWithStates_2(3, 44, 89);
			else if ((active2 & 0x80000000000L) != 0x0L)
				return jjStartNfaWithStates_2(3, 171, 89);
			else if ((active6 & 0x1000L) != 0x0L)
				return jjStartNfaWithStates_2(3, 396, 89);
			else if ((active10 & 0x800000L) != 0x0L)
			{
				jjmatchedKind = 663;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_2(active0, 0x80000000L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x2000000000000000L, active5, 0x0L, active6, 0x0L, active7, 0x800L, active8, 0x0L, active9, 0x0L, active10, 0x3000000L);
		case 'I':
			return jjMoveStringLiteralDfa4_2(active0, 0x1000009c02000120L, active1, 0x0L, active2, 0x1070400L, active3, 0x20008002000000L, active4, 0x8000000000L, active5, 0x23000000010040L, active6, 0x6080000L, active7, 0x20100000000000L, active8, 0x0L, active9, 0x4000000L, active10, 0x0L);
		case 'K':
			if ((active6 & 0x20000000000L) != 0x0L)
				return jjStartNfaWithStates_2(3, 425, 89);
			else if ((active7 & 0x8000000000L) != 0x0L)
				return jjStartNfaWithStates_2(3, 487, 89);
			else if ((active10 & 0x20000L) != 0x0L)
				return jjStartNfaWithStates_2(3, 657, 89);
			else if ((active10 & 0x4000000L) != 0x0L)
				return jjStartNfaWithStates_2(3, 666, 89);
			break;
		case 'L':
			if ((active0 & 0x1000000000000L) != 0x0L)
			{
				jjmatchedKind = 48;
				jjmatchedPos = 3;
			}
			else if ((active0 & 0x200000000000000L) != 0x0L)
			{
				jjmatchedKind = 57;
				jjmatchedPos = 3;
			}
			else if ((active3 & 0x800000L) != 0x0L)
				return jjStartNfaWithStates_2(3, 215, 89);
			else if ((active5 & 0x40000000L) != 0x0L)
			{
				jjmatchedKind = 350;
				jjmatchedPos = 3;
			}
			else if ((active6 & 0x100000000000L) != 0x0L)
				return jjStartNfaWithStates_2(3, 428, 89);
			return jjMoveStringLiteralDfa4_2(active0, 0x402080000020000L, active1, 0x800000000007e800L, active2, 0x1800000000000880L, active3, 0x9000000002002L, active4, 0x8000000000000200L, active5, 0x3a0000001L, active6, 0x2000004000000000L, active7, 0x200000006006000L, active8, 0x4000000000000000L, active9, 0x3800L, active10, 0x0L);
		case 'M':
			if ((active3 & 0x400000L) != 0x0L)
				return jjStartNfaWithStates_2(3, 214, 89);
			else if ((active9 & 0x20000000000L) != 0x0L)
			{
				jjmatchedKind = 617;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_2(active0, 0x14000000L, active1, 0x1e00000L, active2, 0x100000000000L, active3, 0x20108000L, active4, 0x0L, active5, 0x6000000L, active6, 0x400100000L, active7, 0x0L, active8, 0x0L, active9, 0x40000000081L, active10, 0x0L);
		case 'N':
			if ((active4 & 0x800L) != 0x0L)
				return jjStartNfaWithStates_2(3, 267, 89);
			else if ((active4 & 0x1000L) != 0x0L)
			{
				jjmatchedKind = 268;
				jjmatchedPos = 3;
			}
			else if ((active5 & 0x800000000000L) != 0x0L)
				return jjStartNfaWithStates_2(3, 367, 89);
			else if ((active6 & 0x400000L) != 0x0L)
				return jjStartNfaWithStates_2(3, 406, 89);
			else if ((active9 & 0x8000L) != 0x0L)
				return jjStartNfaWithStates_2(3, 591, 89);
			else if ((active10 & 0x40000L) != 0x0L)
			{
				jjmatchedKind = 658;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_2(active0, 0x2000800000L, active1, 0x40070000000L, active2, 0x0L, active3, 0x100c00040000L, active4, 0xfe000L, active5, 0x0L, active6, 0x0L, active7, 0x800000L, active8, 0x0L, active9, 0x40100ff8000000L, active10, 0x80004L);
		case 'O':
			if ((active3 & 0x200000000L) != 0x0L)
				return jjStartNfaWithStates_2(3, 225, 89);
			else if ((active4 & 0x10L) != 0x0L)
				return jjStartNfaWithStates_2(3, 260, 89);
			return jjMoveStringLiteralDfa4_2(active0, 0x200001810L, active1, 0x1000L, active2, 0x40800000000000L, active3, 0x2200000001000L, active4, 0x20L, active5, 0x88000L, active6, 0x800000000L, active7, 0x1a00000400L, active8, 0x0L, active9, 0x17000000000000L, active10, 0x0L);
		case 'P':
			if ((active2 & 0x8000000000L) != 0x0L)
				return jjStartNfaWithStates_2(3, 167, 89);
			else if ((active7 & 0x100000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(3, 504, 89);
			return jjMoveStringLiteralDfa4_2(active0, 0x0L, active1, 0x0L, active2, 0x200000000L, active3, 0x0L, active4, 0x0L, active5, 0x200000000001000L, active6, 0x8000000080000000L, active7, 0x400001e0000000L, active8, 0x0L, active9, 0x4000L, active10, 0x8000000L);
		case 'Q':
			return jjMoveStringLiteralDfa4_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x20000000000000L, active10, 0x0L);
		case 'R':
			if ((active0 & 0x2000000000000000L) != 0x0L)
			{
				jjmatchedKind = 61;
				jjmatchedPos = 3;
			}
			else if ((active1 & 0x10000000000L) != 0x0L)
			{
				jjmatchedKind = 104;
				jjmatchedPos = 3;
			}
			else if ((active3 & 0x40000000000L) != 0x0L)
			{
				jjmatchedKind = 234;
				jjmatchedPos = 3;
			}
			else if ((active5 & 0x400000000000000L) != 0x0L)
			{
				jjmatchedKind = 378;
				jjmatchedPos = 3;
			}
			else if ((active9 & 0x2000000000000000L) != 0x0L)
			{
				jjmatchedKind = 637;
				jjmatchedPos = 3;
			}
			else if ((active10 & 0x40000000L) != 0x0L)
			{
				jjmatchedKind = 670;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_2(active0, 0xc000000060000000L, active1, 0x1ffe02000000003fL, active2, 0x100000000080000L, active3, 0x10090000000010L, active4, 0x4000001000000000L, active5, 0x3800000000000000L, active6, 0x3fe008000000000L, active7, 0x800000400000000L, active8, 0x40000000000000L, active9, 0xc000000000000000L, active10, 0x80100003L);
		case 'S':
			if ((active2 & 0x40L) != 0x0L)
				return jjStartNfaWithStates_2(3, 134, 89);
			else if ((active7 & 0x400000L) != 0x0L)
				return jjStartNfaWithStates_2(3, 470, 89);
			else if ((active7 & 0x4000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(3, 498, 89);
			else if ((active9 & 0x10000L) != 0x0L)
				return jjStartNfaWithStates_2(3, 592, 89);
			return jjMoveStringLiteralDfa4_2(active0, 0x0L, active1, 0x6000401f80000580L, active2, 0x8000000000200000L, active3, 0x620L, active4, 0x1c80000000000000L, active5, 0x20000000000L, active6, 0x100000600L, active7, 0x1840000000000L, active8, 0x4L, active9, 0x1eL, active10, 0xc000L);
		case 'T':
			if ((active0 & 0x40000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(3, 54, 89);
			else if ((active4 & 0x10000000L) != 0x0L)
			{
				jjmatchedKind = 284;
				jjmatchedPos = 3;
			}
			else if ((active4 & 0x200000000L) != 0x0L)
				return jjStartNfaWithStates_2(3, 289, 89);
			else if ((active5 & 0x400000L) != 0x0L)
				return jjStartNfaWithStates_2(3, 342, 89);
			else if ((active5 & 0x80000000000L) != 0x0L)
				return jjStartNfaWithStates_2(3, 363, 89);
			else if ((active6 & 0x800L) != 0x0L)
				return jjStartNfaWithStates_2(3, 395, 89);
			else if ((active8 & 0x20000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(3, 565, 89);
			return jjMoveStringLiteralDfa4_2(active0, 0x800000000000000L, active1, 0x6000000000L, active2, 0x400400400000L, active3, 0x60c0000000020080L, active4, 0x20000000L, active5, 0x100b00L, active6, 0x10020c0L, active7, 0x2000078003L, active8, 0x380000000000000L, active9, 0x700L, active10, 0x10200000L);
		case 'U':
			return jjMoveStringLiteralDfa4_2(active0, 0x0L, active1, 0x180000L, active2, 0x0L, active3, 0x600007000000000L, active4, 0x0L, active5, 0x200002008cL, active6, 0x200000000000L, active7, 0x80840000003fcL, active8, 0x2000000000000000L, active9, 0x0L, active10, 0x2000001c0L);
		case 'V':
			if ((active6 & 0x200000000L) != 0x0L)
				return jjStartNfaWithStates_2(3, 417, 89);
			return jjMoveStringLiteralDfa4_2(active0, 0x0L, active1, 0x8000000000L, active2, 0x0L, active3, 0x0L, active4, 0x40000000000000L, active5, 0x10L, active6, 0x1000000000L, active7, 0x600000000000L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'W':
			if ((active7 & 0x10000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(3, 500, 89);
			else if ((active10 & 0x10000L) != 0x0L)
				return jjStartNfaWithStates_2(3, 656, 89);
			return jjMoveStringLiteralDfa4_2(active0, 0x4000000000L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x8L, active9, 0x0L, active10, 0x0L);
		case 'Y':
			if ((active5 & 0x400000000000L) != 0x0L)
				return jjStartNfaWithStates_2(3, 366, 89);
			return jjMoveStringLiteralDfa4_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x100L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x800000L, active10, 0x2000L);
		case '_':
			return jjMoveStringLiteralDfa4_2(active0, 0x0L, active1, 0x0L, active2, 0xc000000000000L, active3, 0x0L, active4, 0xc00000L, active5, 0x10000000L, active6, 0x0L, active7, 0x300000L, active8, 0x1ffffffffffff0L, active9, 0x2000000L, active10, 0x600L);
		default :
			break;
		}
		return jjStartNfa_2(2, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa4_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_2(2, old0, old1, old2, old3, old4, old5, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_2(3, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
			return 4;
		}
		switch(curChar)
		{
		case '2':
			if ((active10 & 0x20L) != 0x0L)
				return jjStartNfaWithStates_2(4, 645, 89);
			break;
		case '6':
			if ((active10 & 0x10L) != 0x0L)
				return jjStartNfaWithStates_2(4, 644, 89);
			break;
		case 'A':
			return jjMoveStringLiteralDfa5_2(active0, 0x8018000000000000L, active1, 0x200063e03fL, active2, 0x200000800L, active3, 0x6000010080008012L, active4, 0x1c40001000000200L, active5, 0x86000010L, active6, 0x3800000480000100L, active7, 0x100002000001L, active8, 0x1000000000000008L, active9, 0x800000000000L, active10, 0x0L);
		case 'B':
			if ((active5 & 0x80000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 339, 89);
			return jjMoveStringLiteralDfa5_2(active0, 0x0L, active1, 0x0L, active2, 0x2L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x2000L, active8, 0x1f0L, active9, 0x0L, active10, 0x0L);
		case 'C':
			return jjMoveStringLiteralDfa5_2(active0, 0x800L, active1, 0x0L, active2, 0x0L, active3, 0x20000000000000L, active4, 0x0L, active5, 0x1000000000L, active6, 0x0L, active7, 0x800010400100000L, active8, 0x2000000000000600L, active9, 0x100000000000L, active10, 0x0L);
		case 'D':
			if ((active3 & 0x40000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 210, 89);
			return jjMoveStringLiteralDfa5_2(active0, 0x200000000000L, active1, 0x0L, active2, 0x800000000200L, active3, 0xc00000000000L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x3800L, active9, 0x0L, active10, 0x0L);
		case 'E':
			if ((active1 & 0x400L) != 0x0L)
				return jjStartNfaWithStates_2(4, 74, 89);
			else if ((active1 & 0x8000000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 127, 89);
			else if ((active3 & 0x20L) != 0x0L)
				return jjStartNfaWithStates_2(4, 197, 89);
			else if ((active4 & 0x8000000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 283, 89);
			else if ((active4 & 0x200000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 313, 89);
			else if ((active5 & 0x20000000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 349, 89);
			else if ((active6 & 0x10000000000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 424, 89);
			else if ((active7 & 0x4000000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 474, 89);
			else if ((active7 & 0x20000000L) != 0x0L)
			{
				jjmatchedKind = 477;
				jjmatchedPos = 4;
			}
			else if ((active7 & 0x1000000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 508, 89);
			else if ((active8 & 0x80000000000000L) != 0x0L)
			{
				jjmatchedKind = 567;
				jjmatchedPos = 4;
			}
			else if ((active8 & 0x4000000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 574, 89);
			else if ((active9 & 0x800L) != 0x0L)
			{
				jjmatchedKind = 587;
				jjmatchedPos = 4;
			}
			else if ((active9 & 0x1000000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 636, 89);
			else if ((active10 & 0x40L) != 0x0L)
			{
				jjmatchedKind = 646;
				jjmatchedPos = 4;
			}
			else if ((active10 & 0x100000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 660, 89);
			else if ((active10 & 0x10000000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 668, 89);
			return jjMoveStringLiteralDfa5_2(active0, 0x2084000000000L, active1, 0x1ffe028070040800L, active2, 0x2100000280000L, active3, 0x11000020100080L, active4, 0x100000000000100L, active5, 0x20400000001L, active6, 0x800000213007a000L, active7, 0x6801c0000000L, active8, 0xd00000000000000L, active9, 0x37a2L, active10, 0x80180L);
		case 'F':
			if ((active2 & 0x800000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 151, 89);
			return jjMoveStringLiteralDfa5_2(active0, 0x0L, active1, 0x0L, active2, 0x4000000000000L, active3, 0x0L, active4, 0x0L, active5, 0x40L, active6, 0x0L, active7, 0x0L, active8, 0x4000L, active9, 0x0L, active10, 0x0L);
		case 'G':
			if ((active10 & 0x4L) != 0x0L)
				return jjStartNfaWithStates_2(4, 642, 89);
			return jjMoveStringLiteralDfa5_2(active0, 0x2000000L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x1L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x1e000000000L, active10, 0x0L);
		case 'H':
			if ((active2 & 0x400000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 150, 89);
			else if ((active2 & 0x10000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 180, 89);
			else if ((active3 & 0x40L) != 0x0L)
				return jjStartNfaWithStates_2(4, 198, 89);
			else if ((active4 & 0x1000000000000L) != 0x0L)
			{
				jjmatchedKind = 304;
				jjmatchedPos = 4;
			}
			else if ((active5 & 0x100L) != 0x0L)
			{
				jjmatchedKind = 328;
				jjmatchedPos = 4;
			}
			return jjMoveStringLiteralDfa5_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x1e000000000000L, active5, 0x200L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x201000L);
		case 'I':
			return jjMoveStringLiteralDfa5_2(active0, 0x404000070000000L, active1, 0x400f800000L, active2, 0xc00000000L, active3, 0xc0000000010000L, active4, 0x8000000100000000L, active5, 0x100100800L, active6, 0x50412002c0L, active7, 0xe001842000878000L, active8, 0x20000001fff8000L, active9, 0x800000L, active10, 0x100e800L);
		case 'K':
			if ((active1 & 0x40L) != 0x0L)
				return jjStartNfaWithStates_2(4, 70, 89);
			return jjMoveStringLiteralDfa5_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x20L, active5, 0x0L, active6, 0x0L, active7, 0x400L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'L':
			if ((active1 & 0x1000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 76, 89);
			else if ((active3 & 0x100L) != 0x0L)
				return jjStartNfaWithStates_2(4, 200, 89);
			else if ((active4 & 0x1000000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 280, 89);
			else if ((active4 & 0x800000000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 291, 89);
			else if ((active4 & 0x20000000000L) != 0x0L)
			{
				jjmatchedKind = 297;
				jjmatchedPos = 4;
			}
			return jjMoveStringLiteralDfa5_2(active0, 0x180000000000010L, active1, 0x0L, active2, 0x20001080000080L, active3, 0x0L, active4, 0xc0000000000L, active5, 0x1800000000000080L, active6, 0x0L, active7, 0x260000200000004L, active8, 0x80000000e0000000L, active9, 0x200006000000L, active10, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa5_2(active0, 0x4000000L, active1, 0x180000L, active2, 0x70000000400L, active3, 0x0L, active4, 0x400000L, active5, 0x8000000000000000L, active6, 0x3fL, active7, 0x18000000L, active8, 0x0L, active9, 0x82000000000000L, active10, 0x0L);
		case 'N':
			if ((active0 & 0x100L) != 0x0L)
				return jjStartNfaWithStates_2(4, 8, 89);
			else if ((active0 & 0x400000000L) != 0x0L)
			{
				jjmatchedKind = 34;
				jjmatchedPos = 4;
			}
			else if ((active0 & 0x1000000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 60, 89);
			else if ((active9 & 0x10000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 628, 89);
			return jjMoveStringLiteralDfa5_2(active0, 0x9800000008L, active1, 0x0L, active2, 0x40070000L, active3, 0x800008000000004L, active4, 0x0L, active5, 0x20000000000000L, active6, 0x0L, active7, 0x1800200000L, active8, 0xf00000000L, active9, 0x4000000000000L, active10, 0x0L);
		case 'O':
			return jjMoveStringLiteralDfa5_2(active0, 0x2080000020L, active1, 0x6000000000000000L, active2, 0x100000000L, active3, 0x2002000L, active4, 0x6000000000000080L, active5, 0x3000000010000L, active6, 0x80000L, active7, 0x0L, active8, 0x0L, active9, 0x40000000004000L, active10, 0x2400000L);
		case 'P':
			if ((active3 & 0x1000000000L) != 0x0L)
			{
				jjmatchedKind = 228;
				jjmatchedPos = 4;
			}
			else if ((active10 & 0x200000000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 673, 89);
			return jjMoveStringLiteralDfa5_2(active0, 0x0L, active1, 0x0L, active2, 0x688000000000000L, active3, 0x6000000000L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x1000000L, active8, 0x0L, active9, 0x0L, active10, 0x8000200L);
		case 'R':
			if ((active0 & 0x200L) != 0x0L)
				return jjStartNfaWithStates_2(4, 9, 89);
			else if ((active0 & 0x2000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 13, 89);
			else if ((active2 & 0x40000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 182, 89);
			else if ((active3 & 0x1000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 204, 89);
			else if ((active3 & 0x100000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 248, 89);
			else if ((active4 & 0x200000000000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 301, 89);
			else if ((active5 & 0x40000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 338, 89);
			else if ((active5 & 0x8000000000000L) != 0x0L)
			{
				jjmatchedKind = 371;
				jjmatchedPos = 4;
			}
			else if ((active5 & 0x100000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 376, 89);
			else if ((active6 & 0x8000000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 411, 89);
			else if ((active6 & 0x800000000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 419, 89);
			else if ((active9 & 0x8000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 627, 89);
			else if ((active9 & 0x400000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 634, 89);
			return jjMoveStringLiteralDfa5_2(active0, 0x10201000000L, active1, 0x180000000000L, active2, 0x3c00c000L, active3, 0x1002200018020008L, active4, 0x4000000eL, active5, 0x2050002800020000L, active6, 0x1a00000000000L, active7, 0x40000003faL, active8, 0x1000000000L, active9, 0x800000000000000L, active10, 0x0L);
		case 'S':
			if ((active1 & 0x400000000000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 110, 89);
			else if ((active3 & 0x80000000000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 235, 89);
			else if ((active5 & 0x1000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 332, 89);
			else if ((active5 & 0x4000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 334, 89);
			else if ((active5 & 0x200000000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 353, 89);
			else if ((active6 & 0x80000000000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 427, 89);
			else if ((active7 & 0x8000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 499, 89);
			else if ((active10 & 0x80000000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 671, 89);
			return jjMoveStringLiteralDfa5_2(active0, 0x800000L, active1, 0x180L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x8000L, active6, 0x0L, active7, 0x0L, active8, 0x2000000000L, active9, 0x100000ff81c0000L, active10, 0x400L);
		case 'T':
			if ((active1 & 0x40000000000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 106, 89);
			else if ((active3 & 0x200L) != 0x0L)
			{
				jjmatchedKind = 201;
				jjmatchedPos = 4;
			}
			else if ((active3 & 0x800L) != 0x0L)
				return jjStartNfaWithStates_2(4, 203, 89);
			else if ((active3 & 0x400000000L) != 0x0L)
			{
				jjmatchedKind = 226;
				jjmatchedPos = 4;
			}
			else if ((active3 & 0x200000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 249, 89);
			else if ((active3 & 0x400000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 250, 89);
			else if ((active4 & 0x8000000000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 295, 89);
			else if ((active6 & 0x4000000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 446, 89);
			else if ((active7 & 0x800L) != 0x0L)
				return jjStartNfaWithStates_2(4, 459, 89);
			else if ((active8 & 0x40000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 566, 89);
			else if ((active9 & 0x1000000000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 612, 89);
			return jjMoveStringLiteralDfa5_2(active0, 0x0L, active1, 0x201f80000000L, active2, 0x8000000000100018L, active3, 0x100801000400L, active4, 0x100400800000L, active5, 0xc00000000cL, active6, 0x400008006000400L, active7, 0x0L, active8, 0x7ffc000000004L, active9, 0x20000000000001cL, active10, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa5_2(active0, 0x800000000000000L, active1, 0x0L, active2, 0x5800000000003000L, active3, 0x8000000000000L, active4, 0x80000004000000L, active5, 0x200000000000000L, active6, 0x100000L, active7, 0x4000L, active8, 0x0L, active9, 0x21000000000001L, active10, 0x0L);
		case 'V':
			return jjMoveStringLiteralDfa5_2(active0, 0x0L, active1, 0x0L, active2, 0x1000000L, active3, 0x0L, active4, 0x0L, active5, 0x10000000L, active6, 0x0L, active7, 0x0L, active8, 0x18000000000000L, active9, 0x0L, active10, 0x0L);
		case 'W':
			if ((active0 & 0x1000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 12, 89);
			break;
		case 'X':
			return jjMoveStringLiteralDfa5_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x2L, active9, 0x0L, active10, 0x0L);
		case 'Y':
			if ((active0 & 0x20000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 17, 89);
			else if ((active0 & 0x80000L) != 0x0L)
			{
				jjmatchedKind = 19;
				jjmatchedPos = 4;
			}
			else if ((active2 & 0x400000000000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 174, 89);
			else if ((active2 & 0x100000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(4, 184, 89);
			return jjMoveStringLiteralDfa5_2(active0, 0x104000L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'Z':
			return jjMoveStringLiteralDfa5_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x600000L, active10, 0x0L);
		case '_':
			return jjMoveStringLiteralDfa5_2(active0, 0x4000000000000000L, active1, 0x1000000000000L, active2, 0x0L, active3, 0x80000L, active4, 0x40200fe000L, active5, 0x0L, active6, 0x3fe000000000000L, active7, 0x0L, active8, 0x0L, active9, 0xc000040000000000L, active10, 0x3L);
		default :
			break;
		}
		return jjStartNfa_2(3, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa5_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_2(3, old0, old1, old2, old3, old4, old5, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_2(4, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
			return 5;
		}
		switch(curChar)
		{
		case 'A':
			if ((active7 & 0x8000000L) != 0x0L)
			{
				jjmatchedKind = 475;
				jjmatchedPos = 5;
			}
			return jjMoveStringLiteralDfa6_2(active0, 0x80000000800L, active1, 0x0L, active2, 0x8000000000402L, active3, 0xe0000018020000L, active4, 0x44006100L, active5, 0x1820000010020000L, active6, 0x6000000000040L, active7, 0x20000010002000L, active8, 0x8018000000000804L, active9, 0x140078000000L, active10, 0x1400L);
		case 'B':
			return jjMoveStringLiteralDfa6_2(active0, 0x60000000L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x80000000L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'C':
			if ((active0 & 0x10000000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 28, 89);
			else if ((active6 & 0x4000000000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 422, 89);
			else if ((active8 & 0x200000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 569, 89);
			return jjMoveStringLiteralDfa6_2(active0, 0x8000000000000000L, active1, 0x7004003fL, active2, 0x0L, active3, 0x10L, active4, 0x0L, active5, 0x0L, active6, 0xa008000000000000L, active7, 0x0L, active8, 0x300000002L, active9, 0x0L, active10, 0x0L);
		case 'D':
			if ((active0 & 0x2000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 49, 89);
			else if ((active3 & 0x4L) != 0x0L)
				return jjStartNfaWithStates_2(5, 194, 89);
			else if ((active4 & 0x2000000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 317, 89);
			else if ((active6 & 0x80000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 403, 89);
			else if ((active7 & 0x800000000L) != 0x0L)
			{
				jjmatchedKind = 483;
				jjmatchedPos = 5;
			}
			return jjMoveStringLiteralDfa6_2(active0, 0x18000000000000L, active1, 0x1000000000000L, active2, 0x1800000000000000L, active3, 0x8000000000000L, active4, 0x0L, active5, 0x0L, active6, 0x2030000000L, active7, 0x1000000000L, active8, 0x0L, active9, 0xc004000000000000L, active10, 0x3L);
		case 'E':
			if ((active0 & 0x200000000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 33, 89);
			else if ((active1 & 0x200000000000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 109, 89);
			else if ((active2 & 0x200L) != 0x0L)
				return jjStartNfaWithStates_2(5, 137, 89);
			else if ((active2 & 0x10000L) != 0x0L)
			{
				jjmatchedKind = 144;
				jjmatchedPos = 5;
			}
			else if ((active2 & 0x80000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 147, 89);
			else if ((active2 & 0x100000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 148, 89);
			else if ((active2 & 0x1000000000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 164, 89);
			else if ((active2 & 0x80000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 183, 89);
			else if ((active3 & 0x200000000000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 237, 89);
			else if ((active5 & 0x4L) != 0x0L)
			{
				jjmatchedKind = 322;
				jjmatchedPos = 5;
			}
			else if ((active5 & 0x80L) != 0x0L)
				return jjStartNfaWithStates_2(5, 327, 89);
			else if ((active7 & 0x400L) != 0x0L)
				return jjStartNfaWithStates_2(5, 458, 89);
			else if ((active7 & 0x40000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 502, 89);
			else if ((active7 & 0x800000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 507, 89);
			else if ((active9 & 0x200000000000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 621, 89);
			else if ((active9 & 0x20000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 629, 89);
			else if ((active9 & 0x200000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 633, 89);
			return jjMoveStringLiteralDfa6_2(active0, 0x4004000000L, active1, 0x0L, active2, 0x1060000L, active3, 0x800000000L, active4, 0x6000000408021L, active5, 0x8000000000008008L, active6, 0x180800000003fL, active7, 0x0L, active8, 0x1000001000L, active9, 0x8001e002000020L, active10, 0x8000000L);
		case 'F':
			if ((active5 & 0x100000000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 352, 89);
			return jjMoveStringLiteralDfa6_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0xe000000000000000L, active8, 0x0L, active9, 0x180000000L, active10, 0x0L);
		case 'G':
			if ((active3 & 0x8000000000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 231, 89);
			return jjMoveStringLiteralDfa6_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x10000L, active4, 0x1c00000000000000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'H':
			if ((active4 & 0x400000000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 290, 89);
			else if ((active7 & 0x400000000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 482, 89);
			return jjMoveStringLiteralDfa6_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x400L, active7, 0x0L, active8, 0x200L, active9, 0x0L, active10, 0x0L);
		case 'I':
			return jjMoveStringLiteralDfa6_2(active0, 0x800000L, active1, 0x2000000080L, active2, 0x87001c000018L, active3, 0xd02001000002L, active4, 0x0L, active5, 0x2010000800000040L, active6, 0x410000006000000L, active7, 0x200004000000002L, active8, 0x1c000000070L, active9, 0x4000004L, active10, 0x0L);
		case 'L':
			if ((active3 & 0x80000000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 223, 89);
			else if ((active6 & 0x100L) != 0x0L)
				return jjStartNfaWithStates_2(5, 392, 89);
			else if ((active7 & 0x200000000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 481, 89);
			return jjMoveStringLiteralDfa6_2(active0, 0x4000000000000000L, active1, 0x0L, active2, 0x80003000L, active3, 0x0L, active4, 0x40000000000000L, active5, 0x6000010L, active6, 0x1000000000L, active7, 0x100000000000L, active8, 0x4480L, active9, 0xe00000001L, active10, 0x0L);
		case 'M':
			if ((active8 & 0x1000000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 572, 89);
			else if ((active9 & 0x100L) != 0x0L)
			{
				jjmatchedKind = 584;
				jjmatchedPos = 5;
			}
			return jjMoveStringLiteralDfa6_2(active0, 0x0L, active1, 0x0L, active2, 0x20000000L, active3, 0x11000000000000L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x100002000000000L, active9, 0x2000000000600L, active10, 0x0L);
		case 'N':
			if ((active0 & 0x20L) != 0x0L)
				return jjStartNfaWithStates_2(5, 5, 89);
			else if ((active1 & 0x80000L) != 0x0L)
			{
				jjmatchedKind = 83;
				jjmatchedPos = 5;
			}
			else if ((active2 & 0x800000000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 163, 89);
			else if ((active3 & 0x2000000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 217, 89);
			else if ((active5 & 0x1000000000000L) != 0x0L)
			{
				jjmatchedKind = 368;
				jjmatchedPos = 5;
			}
			else if ((active7 & 0x8L) != 0x0L)
			{
				jjmatchedKind = 451;
				jjmatchedPos = 5;
			}
			else if ((active10 & 0x1000000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 664, 89);
			return jjMoveStringLiteralDfa6_2(active0, 0x404000002000000L, active1, 0x1ffe004000700000L, active2, 0x100500000000L, active3, 0x6000000000000008L, active4, 0x100000000L, active5, 0x2000000110001L, active6, 0x278200L, active7, 0x800008783f0L, active8, 0x1fff8000L, active9, 0x1000000800000L, active10, 0x2800L);
		case 'O':
			return jjMoveStringLiteralDfa6_2(active0, 0x180000000000000L, active1, 0x0L, active2, 0x40000080L, active3, 0x0L, active4, 0x100000030000L, active5, 0x0L, active6, 0x1000000L, active7, 0x1802001100000L, active8, 0xe0002100L, active9, 0x600000L, active10, 0xc200L);
		case 'P':
			if ((active7 & 0x4000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 462, 89);
			return jjMoveStringLiteralDfa6_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x800000000000L, active10, 0x0L);
		case 'Q':
			return jjMoveStringLiteralDfa6_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x40000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'R':
			if ((active1 & 0x2000000000000000L) != 0x0L)
			{
				jjmatchedKind = 125;
				jjmatchedPos = 5;
			}
			else if ((active3 & 0x80L) != 0x0L)
				return jjStartNfaWithStates_2(5, 199, 89);
			else if ((active4 & 0x100000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 312, 89);
			else if ((active5 & 0x400000000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 354, 89);
			else if ((active7 & 0x2000000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 473, 89);
			else if ((active7 & 0x200000000000L) != 0x0L)
			{
				jjmatchedKind = 493;
				jjmatchedPos = 5;
			}
			return jjMoveStringLiteralDfa6_2(active0, 0x800000080000000L, active1, 0x4000009f80000000L, active2, 0x400000000c800L, active3, 0x10000000000L, active4, 0x80005000000000L, active5, 0x2000000000L, active6, 0x20000580002000L, active7, 0x400000000001L, active8, 0x8L, active9, 0x4018L, active10, 0x0L);
		case 'S':
			if ((active0 & 0x4000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 14, 89);
			else if ((active2 & 0x20000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 181, 89);
			else if ((active2 & 0x8000000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 191, 89);
			else if ((active3 & 0x4000000000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 230, 89);
			else if ((active5 & 0x200L) != 0x0L)
				return jjStartNfaWithStates_2(5, 329, 89);
			else if ((active5 & 0x8000000000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 359, 89);
			else if ((active5 & 0x40000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 374, 89);
			else if ((active10 & 0x80L) != 0x0L)
				return jjStartNfaWithStates_2(5, 647, 89);
			return jjMoveStringLiteralDfa6_2(active0, 0x0L, active1, 0x20000000800L, active2, 0x0L, active3, 0x800000000080000L, active4, 0xc000000000000006L, active5, 0x800L, active6, 0xbc0200040000000L, active7, 0x0L, active8, 0x7fe0000000000L, active9, 0x2000L, active10, 0x0L);
		case 'T':
			if ((active0 & 0x8L) != 0x0L)
				return jjStartNfaWithStates_2(5, 3, 89);
			else if ((active0 & 0x8000000000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 39, 89);
			else if ((active1 & 0x800000L) != 0x0L)
			{
				jjmatchedKind = 87;
				jjmatchedPos = 5;
			}
			else if ((active2 & 0x200000000000000L) != 0x0L)
			{
				jjmatchedKind = 185;
				jjmatchedPos = 5;
			}
			else if ((active3 & 0x8000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 207, 89);
			else if ((active3 & 0x2000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 241, 89);
			else if ((active3 & 0x1000000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 252, 89);
			else if ((active5 & 0x1000000000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 356, 89);
			else if ((active5 & 0x20000000000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 361, 89);
			else if ((active5 & 0x200000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 377, 89);
			else if ((active7 & 0x4L) != 0x0L)
				return jjStartNfaWithStates_2(5, 450, 89);
			else if ((active7 & 0x10000000000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 488, 89);
			else if ((active9 & 0x2L) != 0x0L)
				return jjStartNfaWithStates_2(5, 577, 89);
			else if ((active9 & 0x100000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 632, 89);
			else if ((active9 & 0x800000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 635, 89);
			return jjMoveStringLiteralDfa6_2(active0, 0x200001000000L, active1, 0xf03e000L, active2, 0x4400000200000000L, active3, 0x20000000L, active4, 0xc0000000200L, active5, 0x0L, active6, 0x1000000000100080L, active7, 0x40000000000L, active8, 0x2000000000000000L, active9, 0x1c0080L, active10, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa6_2(active0, 0x2000000010L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x200000L, active8, 0x400000000L, active9, 0x0L, active10, 0x2000000L);
		case 'V':
			return jjMoveStringLiteralDfa6_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x20080008L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0xc00000800000000L, active9, 0x0L, active10, 0x80000L);
		case 'W':
			if ((active4 & 0x80L) != 0x0L)
				return jjStartNfaWithStates_2(5, 263, 89);
			else if ((active10 & 0x400000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 662, 89);
			return jjMoveStringLiteralDfa6_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x2000L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x40000000000000L, active10, 0x0L);
		case 'X':
			return jjMoveStringLiteralDfa6_2(active0, 0x0L, active1, 0x0L, active2, 0x2000000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'Y':
			if ((active0 & 0x10000000000L) != 0x0L)
				return jjStartNfaWithStates_2(5, 40, 89);
			return jjMoveStringLiteralDfa6_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x800000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case '_':
			return jjMoveStringLiteralDfa6_2(active0, 0x1800100000L, active1, 0x180000000100L, active2, 0x200000L, active3, 0x100400L, active4, 0x18000000000000L, active5, 0x4000000000L, active6, 0x0L, active7, 0x1c0000000L, active8, 0x0L, active9, 0x1000L, active10, 0x200100L);
		default :
			break;
		}
		return jjStartNfa_2(4, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa6_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_2(4, old0, old1, old2, old3, old4, old5, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_2(5, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
			return 6;
		}
		switch(curChar)
		{
		case '2':
			if ((active6 & 0x20000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 437, 89);
			break;
		case 'A':
			return jjMoveStringLiteralDfa7_2(active0, 0x4000000000000L, active1, 0xf80000000L, active2, 0x4000000004000L, active3, 0xc00000000008L, active4, 0x20080008L, active5, 0x10000L, active6, 0x1000000000000000L, active7, 0x0L, active8, 0x3800000200L, active9, 0xe001c6000L, active10, 0x800L);
		case 'B':
			return jjMoveStringLiteralDfa7_2(active0, 0x0L, active1, 0x0L, active2, 0x4000000L, active3, 0x0L, active4, 0x30000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x200000L);
		case 'C':
			if ((active2 & 0x10000000000L) != 0x0L)
			{
				jjmatchedKind = 168;
				jjmatchedPos = 6;
			}
			else if ((active5 & 0x800000000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 355, 89);
			return jjMoveStringLiteralDfa7_2(active0, 0x0L, active1, 0x800L, active2, 0x60600000080L, active3, 0x2000010000000000L, active4, 0x0L, active5, 0x8000L, active6, 0x0L, active7, 0x80040002002L, active8, 0x1000L, active9, 0x78000000L, active10, 0x0L);
		case 'D':
			if ((active2 & 0x20000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 145, 89);
			else if ((active2 & 0x1000000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 152, 89);
			else if ((active3 & 0x800000000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 227, 89);
			else if ((active4 & 0x2000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 305, 89);
			else if ((active9 & 0x80000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 631, 89);
			return jjMoveStringLiteralDfa7_2(active0, 0x0L, active1, 0x600000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x2000000000000000L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x1000000000020L, active10, 0x0L);
		case 'E':
			if ((active0 & 0x8000000000000L) != 0x0L)
			{
				jjmatchedKind = 51;
				jjmatchedPos = 6;
			}
			else if ((active1 & 0x2000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 77, 89);
			else if ((active2 & 0x800L) != 0x0L)
				return jjStartNfaWithStates_2(6, 139, 89);
			else if ((active2 & 0x800000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 187, 89);
			else if ((active2 & 0x4000000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 190, 89);
			else if ((active6 & 0x100000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 404, 89);
			else if ((active6 & 0x80000000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 415, 89);
			else if ((active6 & 0x800000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 443, 89);
			else if ((active6 & 0x2000000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 445, 89);
			else if ((active7 & 0x8000L) != 0x0L)
			{
				jjmatchedKind = 463;
				jjmatchedPos = 6;
			}
			else if ((active9 & 0x800000000000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 623, 89);
			return jjMoveStringLiteralDfa7_2(active0, 0x4010000000000000L, active1, 0x0L, active2, 0x2000000008000L, active3, 0x11000000080000L, active4, 0xdc80004000000006L, active5, 0x2000000840L, active6, 0x1010000000L, active7, 0x700f0L, active8, 0x100000000000002L, active9, 0xc000000000000000L, active10, 0x80003L);
		case 'F':
			return jjMoveStringLiteralDfa7_2(active0, 0x800000000L, active1, 0x80L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'G':
			if ((active0 & 0x80000000000000L) != 0x0L)
			{
				jjmatchedKind = 55;
				jjmatchedPos = 6;
			}
			else if ((active0 & 0x400000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 58, 89);
			else if ((active4 & 0x100000000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 288, 89);
			else if ((active5 & 0x100000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 340, 89);
			else if ((active6 & 0x200L) != 0x0L)
				return jjStartNfaWithStates_2(6, 393, 89);
			else if ((active6 & 0x200000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 405, 89);
			else if ((active7 & 0x800000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 471, 89);
			else if ((active10 & 0x2000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 653, 89);
			return jjMoveStringLiteralDfa7_2(active0, 0x100000000000000L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x4000000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x10L, active9, 0x0L, active10, 0x0L);
		case 'H':
			if ((active0 & 0x200000000000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 45, 89);
			return jjMoveStringLiteralDfa7_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x100000000L, active9, 0x0L, active10, 0x0L);
		case 'I':
			return jjMoveStringLiteralDfa7_2(active0, 0x81000000L, active1, 0x100000e03c000L, active2, 0x1400000020000000L, active3, 0x808000000002000L, active4, 0xc0000000200L, active5, 0x6000000L, active6, 0x200060000080L, active7, 0xe000140001000100L, active8, 0x7fe0000000000L, active9, 0x6000000000018L, active10, 0x0L);
		case 'L':
			if ((active2 & 0x400L) != 0x0L)
				return jjStartNfaWithStates_2(6, 138, 89);
			else if ((active3 & 0x8000000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 219, 89);
			else if ((active3 & 0x40000000000000L) != 0x0L)
			{
				jjmatchedKind = 246;
				jjmatchedPos = 6;
			}
			else if ((active4 & 0x40000000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 286, 89);
			else if ((active5 & 0x20000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 337, 89);
			else if ((active6 & 0x40L) != 0x0L)
				return jjStartNfaWithStates_2(6, 390, 89);
			return jjMoveStringLiteralDfa7_2(active0, 0x2000000000L, active1, 0x0L, active2, 0x0L, active3, 0x80000000000000L, active4, 0x0L, active5, 0x20004090000000L, active6, 0x40000000000000L, active7, 0x0L, active8, 0x200000000L, active9, 0x0L, active10, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa7_2(active0, 0x2100000L, active1, 0x0L, active2, 0x18L, active3, 0x0L, active4, 0x400000L, active5, 0x0L, active6, 0x0L, active7, 0x200000L, active8, 0xc400000000L, active9, 0x0L, active10, 0x400L);
		case 'N':
			if ((active0 & 0x4000000000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 38, 89);
			else if ((active0 & 0x80000000000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 43, 89);
			else if ((active3 & 0x2L) != 0x0L)
				return jjStartNfaWithStates_2(6, 193, 89);
			else if ((active3 & 0x10000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 208, 89);
			else if ((active3 & 0x20000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 209, 89);
			else if ((active6 & 0x2000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 397, 89);
			else if ((active6 & 0x1000000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 408, 89);
			else if ((active7 & 0x2000000000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 485, 89);
			else if ((active7 & 0x800000000000L) != 0x0L)
			{
				jjmatchedKind = 495;
				jjmatchedPos = 6;
			}
			else if ((active9 & 0x40000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 630, 89);
			else if ((active10 & 0x4000L) != 0x0L)
			{
				jjmatchedKind = 654;
				jjmatchedPos = 6;
			}
			return jjMoveStringLiteralDfa7_2(active0, 0x0L, active1, 0x2000000000L, active2, 0x800100000000L, active3, 0x2000000000L, active4, 0x8000000000000L, active5, 0x10000000000001L, active6, 0x11800000000000L, active7, 0x201000080000000L, active8, 0x100e0000028L, active9, 0x4601000L, active10, 0x8000L);
		case 'O':
			return jjMoveStringLiteralDfa7_2(active0, 0x0L, active1, 0x100L, active2, 0x80000000L, active3, 0x1000000L, active4, 0x0L, active5, 0x0L, active6, 0x8000006000000L, active7, 0x0L, active8, 0x4580L, active9, 0x180000000L, active10, 0x100L);
		case 'P':
			if ((active10 & 0x200L) != 0x0L)
				return jjStartNfaWithStates_2(6, 649, 89);
			return jjMoveStringLiteralDfa7_2(active0, 0x1000000000L, active1, 0xa0000000000L, active2, 0x18000000L, active3, 0x0L, active4, 0x800000L, active5, 0x800000000000000L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'R':
			if ((active2 & 0x40000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 146, 89);
			else if ((active4 & 0x1L) != 0x0L)
				return jjStartNfaWithStates_2(6, 256, 89);
			else if ((active4 & 0x20L) != 0x0L)
				return jjStartNfaWithStates_2(6, 261, 89);
			else if ((active4 & 0x100L) != 0x0L)
				return jjStartNfaWithStates_2(6, 264, 89);
			else if ((active4 & 0x100000000000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 300, 89);
			else if ((active6 & 0x8000000000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 423, 89);
			else if ((active7 & 0x20000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 501, 89);
			else if ((active9 & 0x2000000000L) != 0x0L)
			{
				jjmatchedKind = 613;
				jjmatchedPos = 6;
			}
			else if ((active10 & 0x1000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 652, 89);
			else if ((active10 & 0x8000000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 667, 89);
			return jjMoveStringLiteralDfa7_2(active0, 0x0L, active1, 0x0L, active2, 0x8000000200000L, active3, 0x20100000L, active4, 0x10000000006000L, active5, 0x0L, active6, 0x400L, active7, 0x0L, active8, 0x18000000000000L, active9, 0x5c000000080L, active10, 0x0L);
		case 'S':
			if ((active4 & 0x4000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 306, 89);
			else if ((active5 & 0x8L) != 0x0L)
				return jjStartNfaWithStates_2(6, 323, 89);
			else if ((active5 & 0x2000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 369, 89);
			else if ((active7 & 0x200L) != 0x0L)
				return jjStartNfaWithStates_2(6, 457, 89);
			else if ((active7 & 0x1000000000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 484, 89);
			return jjMoveStringLiteralDfa7_2(active0, 0x0L, active1, 0x100000000000L, active2, 0x40000002L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x100000000L, active8, 0x8000000000000000L, active9, 0x0L, active10, 0x0L);
		case 'T':
			if ((active1 & 0x40000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 82, 89);
			else if ((active1 & 0x10000000L) != 0x0L)
			{
				jjmatchedKind = 92;
				jjmatchedPos = 6;
			}
			else if ((active1 & 0x8000000000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 103, 89);
			else if ((active1 & 0x2000000000000L) != 0x0L)
			{
				jjmatchedKind = 113;
				jjmatchedPos = 6;
			}
			else if ((active2 & 0x1000L) != 0x0L)
			{
				jjmatchedKind = 140;
				jjmatchedPos = 6;
			}
			else if ((active2 & 0x100000000000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 172, 89);
			else if ((active3 & 0x10L) != 0x0L)
				return jjStartNfaWithStates_2(6, 196, 89);
			else if ((active6 & 0x8000L) != 0x0L)
			{
				jjmatchedKind = 399;
				jjmatchedPos = 6;
			}
			else if ((active6 & 0x8000000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 447, 89);
			else if ((active7 & 0x1L) != 0x0L)
				return jjStartNfaWithStates_2(6, 448, 89);
			else if ((active8 & 0x40L) != 0x0L)
				return jjStartNfaWithStates_2(6, 518, 89);
			else if ((active9 & 0x800000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 599, 89);
			else if ((active10 & 0x2000000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 665, 89);
			return jjMoveStringLiteralDfa7_2(active0, 0x8000000004800810L, active1, 0x1ffc00006100003fL, active2, 0x2000L, active3, 0x4020100010000000L, active4, 0x0L, active5, 0x8000000000000000L, active6, 0x7003fL, active7, 0x4000000000L, active8, 0x1fff8804L, active9, 0x100000000005L, active10, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa7_2(active0, 0x60000000L, active1, 0x5000000000L, active2, 0x0L, active3, 0x0L, active4, 0x40000000040000L, active5, 0x10L, active6, 0x2000000000L, active7, 0x100000L, active8, 0x2000000000002000L, active9, 0x0L, active10, 0x0L);
		case 'V':
			return jjMoveStringLiteralDfa7_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x400L, active4, 0x0L, active5, 0x0L, active6, 0x406000100000000L, active7, 0x0L, active8, 0x0L, active9, 0x2000000L, active10, 0x0L);
		case 'X':
			return jjMoveStringLiteralDfa7_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x8000L, active5, 0x0L, active6, 0x180000000000000L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'Y':
			if ((active0 & 0x800000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 59, 89);
			else if ((active4 & 0x1000000000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 292, 89);
			else if ((active5 & 0x1000000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 380, 89);
			else if ((active6 & 0x400000000L) != 0x0L)
				return jjStartNfaWithStates_2(6, 418, 89);
			return jjMoveStringLiteralDfa7_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x200000000000000L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case '_':
			return jjMoveStringLiteralDfa7_2(active0, 0x0L, active1, 0x4000000000100000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x400010000000L, active8, 0xc00000000000000L, active9, 0x600L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_2(5, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa7_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_2(5, old0, old1, old2, old3, old4, old5, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_2(6, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
			return 7;
		}
		switch(curChar)
		{
		case 'A':
			return jjMoveStringLiteralDfa8_2(active0, 0x1000100000L, active1, 0x100000000000L, active2, 0x200080L, active3, 0x400L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0xc0000000L, active8, 0x100004020L, active9, 0x1000L, active10, 0x0L);
		case 'B':
			if ((active8 & 0x80L) != 0x0L)
				return jjStartNfaWithStates_2(7, 519, 89);
			else if ((active8 & 0x400L) != 0x0L)
				return jjStartNfaWithStates_2(7, 522, 89);
			return jjMoveStringLiteralDfa8_2(active0, 0x0L, active1, 0x0L, active2, 0x4000L, active3, 0x0L, active4, 0x400000L, active5, 0x0L, active6, 0x1000000000000000L, active7, 0x200000L, active8, 0x8000000002000L, active9, 0x0L, active10, 0x0L);
		case 'C':
			if ((active2 & 0x2000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(7, 177, 93);
			else if ((active7 & 0x2000000000000000L) != 0x0L)
			{
				jjmatchedKind = 509;
				jjmatchedPos = 7;
			}
			return jjMoveStringLiteralDfa8_2(active0, 0x0L, active1, 0x1000000000L, active2, 0x0L, active3, 0x80000L, active4, 0xc000000000000006L, active5, 0x0L, active6, 0x1800000000000L, active7, 0xc000000100000000L, active8, 0x10000000000000L, active9, 0x0L, active10, 0x0L);
		case 'D':
			if ((active0 & 0x10000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(7, 52, 89);
			else if ((active2 & 0x8000L) != 0x0L)
				return jjStartNfaWithStates_2(7, 143, 89);
			return jjMoveStringLiteralDfa8_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0xf0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'E':
			if ((active0 & 0x10L) != 0x0L)
				return jjStartNfaWithStates_2(7, 4, 89);
			else if ((active0 & 0x800L) != 0x0L)
				return jjStartNfaWithStates_2(7, 11, 89);
			else if ((active1 & 0x800L) != 0x0L)
				return jjStartNfaWithStates_2(7, 75, 89);
			else if ((active1 & 0x4000000000L) != 0x0L)
				return jjStartNfaWithStates_2(7, 102, 89);
			else if ((active2 & 0x2L) != 0x0L)
				return jjStartNfaWithStates_2(7, 129, 89);
			else if ((active2 & 0x4000000L) != 0x0L)
				return jjStartNfaWithStates_2(7, 154, 89);
			else if ((active3 & 0x2000000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(7, 253, 89);
			else if ((active4 & 0x800000L) != 0x0L)
				return jjStartNfaWithStates_2(7, 279, 89);
			else if ((active4 & 0x4000000L) != 0x0L)
				return jjStartNfaWithStates_2(7, 282, 89);
			else if ((active4 & 0x40000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(7, 310, 89);
			else if ((active5 & 0x10L) != 0x0L)
				return jjStartNfaWithStates_2(7, 324, 89);
			else if ((active5 & 0x80000000L) != 0x0L)
				return jjStartNfaWithStates_2(7, 351, 89);
			else if ((active6 & 0x100000000L) != 0x0L)
				return jjStartNfaWithStates_2(7, 416, 89);
			else if ((active6 & 0x400000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(7, 442, 89);
			else if ((active7 & 0x80000000000L) != 0x0L)
				return jjStartNfaWithStates_2(7, 491, 89);
			else if ((active8 & 0x4L) != 0x0L)
				return jjStartNfaWithStates_2(7, 514, 89);
			else if ((active8 & 0x800L) != 0x0L)
				return jjStartNfaWithStates_2(7, 523, 89);
			else if ((active8 & 0x4000000000L) != 0x0L)
			{
				jjmatchedKind = 550;
				jjmatchedPos = 7;
			}
			else if ((active9 & 0x100000000000L) != 0x0L)
				return jjStartNfaWithStates_2(7, 620, 89);
			return jjMoveStringLiteralDfa8_2(active0, 0x8000000002000000L, active1, 0x100003fL, active2, 0x100000018L, active3, 0x10000000L, active4, 0x10000000040000L, active5, 0x8000004000000000L, active6, 0x3fL, active7, 0x0L, active8, 0x841fff8000L, active9, 0x1000002600000L, active10, 0x0L);
		case 'F':
			if ((active10 & 0x100L) != 0x0L)
				return jjStartNfaWithStates_2(7, 648, 89);
			return jjMoveStringLiteralDfa8_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0xc000000000000000L, active10, 0x3L);
		case 'G':
			if ((active2 & 0x800000000000L) != 0x0L)
				return jjStartNfaWithStates_2(7, 175, 89);
			else if ((active3 & 0x2000000000L) != 0x0L)
				return jjStartNfaWithStates_2(7, 229, 89);
			else if ((active5 & 0x10000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(7, 372, 89);
			else if ((active9 & 0x4000000L) != 0x0L)
				return jjStartNfaWithStates_2(7, 602, 89);
			return jjMoveStringLiteralDfa8_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x4000000000L, active5, 0x0L, active6, 0x6001000000000L, active7, 0x0L, active8, 0xe0000000L, active9, 0x0L, active10, 0x0L);
		case 'H':
			if ((active2 & 0x200000000L) != 0x0L)
				return jjStartNfaWithStates_2(7, 161, 89);
			return jjMoveStringLiteralDfa8_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x10000000000L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'I':
			return jjMoveStringLiteralDfa8_2(active0, 0x800000L, active1, 0xfe0000080L, active2, 0x0L, active3, 0x4000000000000000L, active4, 0x8000L, active5, 0x2020000000000001L, active6, 0x30000L, active7, 0x0L, active8, 0x1018L, active9, 0x81L, active10, 0x8000L);
		case 'J':
			return jjMoveStringLiteralDfa8_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x30000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'K':
			if ((active7 & 0x2000L) != 0x0L)
				return jjStartNfaWithStates_2(7, 461, 89);
			break;
		case 'L':
			if ((active3 & 0x8L) != 0x0L)
				return jjStartNfaWithStates_2(7, 195, 89);
			else if ((active4 & 0x8L) != 0x0L)
				return jjStartNfaWithStates_2(7, 259, 89);
			else if ((active5 & 0x10000L) != 0x0L)
				return jjStartNfaWithStates_2(7, 336, 89);
			else if ((active8 & 0x1000000000L) != 0x0L)
				return jjStartNfaWithStates_2(7, 548, 89);
			return jjMoveStringLiteralDfa8_2(active0, 0x4002000000000L, active1, 0x0L, active2, 0x0L, active3, 0x80000000000000L, active4, 0x20080000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x2000000100L, active9, 0x0L, active10, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa8_2(active0, 0x0L, active1, 0x0L, active2, 0x4000000000000L, active3, 0x0L, active4, 0xc0000000000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x1c2000L, active10, 0x0L);
		case 'N':
			if ((active3 & 0x1000000L) != 0x0L)
				return jjStartNfaWithStates_2(7, 216, 89);
			else if ((active6 & 0x2000000L) != 0x0L)
			{
				jjmatchedKind = 409;
				jjmatchedPos = 7;
			}
			return jjMoveStringLiteralDfa8_2(active0, 0x4000000000000000L, active1, 0x4000000000100000L, active2, 0x1000000020000000L, active3, 0x19000000002000L, active4, 0x0L, active5, 0x2000000000L, active6, 0x24000000L, active7, 0x400011100100L, active8, 0x100000000000000L, active9, 0x18L, active10, 0x0L);
		case 'O':
			return jjMoveStringLiteralDfa8_2(active0, 0x1000000L, active1, 0xa000e03c000L, active2, 0x400000000000000L, active3, 0x20000000100000L, active4, 0x200L, active5, 0x8000L, active6, 0x40000040000480L, active7, 0x0L, active8, 0x200000000L, active9, 0x0L, active10, 0x0L);
		case 'P':
			if ((active10 & 0x400L) != 0x0L)
				return jjStartNfaWithStates_2(7, 650, 89);
			return jjMoveStringLiteralDfa8_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x400000000000002L, active9, 0x0L, active10, 0x0L);
		case 'R':
			if ((active8 & 0x200L) != 0x0L)
				return jjStartNfaWithStates_2(7, 521, 89);
			else if ((active10 & 0x80000L) != 0x0L)
				return jjStartNfaWithStates_2(7, 659, 89);
			return jjMoveStringLiteralDfa8_2(active0, 0x804000000L, active1, 0x100L, active2, 0x0L, active3, 0x0L, active4, 0x6000L, active5, 0x0L, active6, 0x2000000000L, active7, 0x0L, active8, 0x2000000800000000L, active9, 0x40180004000L, active10, 0x800L);
		case 'S':
			if ((active1 & 0x2000000000L) != 0x0L)
				return jjStartNfaWithStates_2(7, 101, 89);
			else if ((active2 & 0x2000L) != 0x0L)
				return jjStartNfaWithStates_2(7, 141, 89);
			else if ((active4 & 0x80000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(7, 311, 89);
			else if ((active5 & 0x40L) != 0x0L)
				return jjStartNfaWithStates_2(7, 326, 89);
			else if ((active5 & 0x800000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(7, 379, 89);
			else if ((active6 & 0x10000000L) != 0x0L)
				return jjStartNfaWithStates_2(7, 412, 89);
			else if ((active9 & 0x20L) != 0x0L)
				return jjStartNfaWithStates_2(7, 581, 89);
			return jjMoveStringLiteralDfa8_2(active0, 0x0L, active1, 0x1000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x8800000000000000L, active9, 0x0L, active10, 0x0L);
		case 'T':
			if ((active2 & 0x400000000L) != 0x0L)
				return jjStartNfaWithStates_2(7, 162, 89);
			else if ((active5 & 0x800L) != 0x0L)
				return jjStartNfaWithStates_2(7, 331, 89);
			else if ((active7 & 0x2L) != 0x0L)
				return jjStartNfaWithStates_2(7, 449, 89);
			else if ((active7 & 0x200000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(7, 505, 89);
			return jjMoveStringLiteralDfa8_2(active0, 0x60000000L, active1, 0x0L, active2, 0x8000058000000L, active3, 0x800c00000000000L, active4, 0x0L, active5, 0x0L, active6, 0x10000000000000L, active7, 0x0L, active8, 0x0L, active9, 0x6000e78000200L, active10, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa8_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x8000000000000L, active5, 0x10000000L, active6, 0x8000000000000L, active7, 0x0L, active8, 0x0L, active9, 0x404L, active10, 0x200000L);
		case 'V':
			return jjMoveStringLiteralDfa8_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x200000000000L, active7, 0x40000000000L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'W':
			if ((active2 & 0x80000000L) != 0x0L)
				return jjStartNfaWithStates_2(7, 159, 89);
			break;
		case 'X':
			if ((active6 & 0x80000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(7, 439, 89);
			break;
		case 'Y':
			if ((active3 & 0x20000000L) != 0x0L)
				return jjStartNfaWithStates_2(7, 221, 89);
			else if ((active3 & 0x100000000000L) != 0x0L)
				return jjStartNfaWithStates_2(7, 236, 89);
			else if ((active6 & 0x100000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(7, 440, 89);
			else if ((active6 & 0x200000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(7, 441, 89);
			else if ((active7 & 0x4000000000L) != 0x0L)
				return jjStartNfaWithStates_2(7, 486, 89);
			return jjMoveStringLiteralDfa8_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x10000000000L, active9, 0x0L, active10, 0x0L);
		case 'Z':
			return jjMoveStringLiteralDfa8_2(active0, 0x80000000L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x6000000L, active6, 0x0L, active7, 0x100000000000L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case '_':
			return jjMoveStringLiteralDfa8_2(active0, 0x100000000000000L, active1, 0x1ffc000000600000L, active2, 0x60000000000L, active3, 0x0L, active4, 0x1c00000000000000L, active5, 0x0L, active6, 0x40000L, active7, 0x1000000070000L, active8, 0x7fe0000000000L, active9, 0x1c000000000L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_2(6, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa8_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_2(6, old0, old1, old2, old3, old4, old5, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_2(7, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
			return 8;
		}
		switch(curChar)
		{
		case 'A':
			return jjMoveStringLiteralDfa9_2(active0, 0x880000000L, active1, 0x4000000000100000L, active2, 0x0L, active3, 0x4000000000000000L, active4, 0x6000L, active5, 0x0L, active6, 0x0L, active7, 0x500010000000L, active8, 0x800000000000000L, active9, 0x40000000000L, active10, 0x0L);
		case 'B':
			if ((active8 & 0x200000000L) != 0x0L)
				return jjStartNfaWithStates_2(8, 545, 89);
			break;
		case 'C':
			if ((active9 & 0x80L) != 0x0L)
				return jjStartNfaWithStates_2(8, 583, 89);
			return jjMoveStringLiteralDfa9_2(active0, 0x0L, active1, 0x4000000000000L, active2, 0x100000000L, active3, 0x0L, active4, 0x10000000000000L, active5, 0x2000000000L, active6, 0x0L, active7, 0x10000L, active8, 0x800000000L, active9, 0x4000000000L, active10, 0x200000L);
		case 'D':
			if ((active1 & 0x1000000L) != 0x0L)
				return jjStartNfaWithStates_2(8, 88, 89);
			else if ((active3 & 0x10000000L) != 0x0L)
				return jjStartNfaWithStates_2(8, 220, 89);
			else if ((active9 & 0x1000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(8, 624, 89);
			return jjMoveStringLiteralDfa9_2(active0, 0x0L, active1, 0x18000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x20000000000L, active9, 0x0L, active10, 0x0L);
		case 'E':
			if ((active0 & 0x20000000L) != 0x0L)
			{
				jjmatchedKind = 29;
				jjmatchedPos = 8;
			}
			else if ((active2 & 0x4000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(8, 178, 89);
			else if ((active3 & 0x400000000000L) != 0x0L)
			{
				jjmatchedKind = 238;
				jjmatchedPos = 8;
			}
			else if ((active4 & 0x40000000000L) != 0x0L)
			{
				jjmatchedKind = 298;
				jjmatchedPos = 8;
			}
			else if ((active5 & 0x2000000L) != 0x0L)
			{
				jjmatchedKind = 345;
				jjmatchedPos = 8;
			}
			else if ((active5 & 0x10000000L) != 0x0L)
				return jjStartNfaWithStates_2(8, 348, 89);
			else if ((active6 & 0x2000000000L) != 0x0L)
				return jjStartNfaWithStates_2(8, 421, 89);
			else if ((active6 & 0x200000000000L) != 0x0L)
				return jjStartNfaWithStates_2(8, 429, 89);
			else if ((active7 & 0x40000000000L) != 0x0L)
				return jjStartNfaWithStates_2(8, 490, 89);
			else if ((active8 & 0x2000000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(8, 573, 89);
			else if ((active9 & 0x200000000L) != 0x0L)
			{
				jjmatchedKind = 609;
				jjmatchedPos = 8;
			}
			return jjMoveStringLiteralDfa9_2(active0, 0x40000000L, active1, 0x80L, active2, 0x0L, active3, 0x800000000000L, active4, 0x84000430000L, active5, 0x4000000L, active6, 0x10801000000000L, active7, 0x200000L, active8, 0x100L, active9, 0x400000000L, active10, 0x0L);
		case 'F':
			return jjMoveStringLiteralDfa9_2(active0, 0x0L, active1, 0x600000L, active2, 0x60000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x40000000000L, active9, 0x0L, active10, 0x0L);
		case 'G':
			if ((active2 & 0x1000000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(8, 188, 89);
			else if ((active3 & 0x2000L) != 0x0L)
				return jjStartNfaWithStates_2(8, 205, 89);
			else if ((active3 & 0x8000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(8, 243, 89);
			else if ((active6 & 0x20000000L) != 0x0L)
				return jjStartNfaWithStates_2(8, 413, 89);
			else if ((active7 & 0x100L) != 0x0L)
				return jjStartNfaWithStates_2(8, 456, 89);
			else if ((active9 & 0x8L) != 0x0L)
			{
				jjmatchedKind = 579;
				jjmatchedPos = 8;
			}
			return jjMoveStringLiteralDfa9_2(active0, 0x4000000000000000L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x8000L, active9, 0x10L, active10, 0x0L);
		case 'H':
			return jjMoveStringLiteralDfa9_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x100000000L, active8, 0x10080000000000L, active9, 0x0L, active10, 0x0L);
		case 'I':
			if ((active0 & 0x2000000000L) != 0x0L)
				return jjStartNfaWithStates_2(8, 37, 89);
			return jjMoveStringLiteralDfa9_2(active0, 0x4000004000000L, active1, 0x100L, active2, 0x8000068000000L, active3, 0x800000000000000L, active4, 0x0L, active5, 0x0L, active6, 0x1000000000000L, active7, 0x0L, active8, 0x8010000000000L, active9, 0xc004000878000200L, active10, 0x3L);
		case 'L':
			return jjMoveStringLiteralDfa9_2(active0, 0x0L, active1, 0x0L, active2, 0x4000L, active3, 0x400L, active4, 0x400000000000000L, active5, 0x0L, active6, 0x1000000000030000L, active7, 0x0L, active8, 0x2000002000L, active9, 0x2000000L, active10, 0x0L);
		case 'M':
			if ((active9 & 0x80000000L) != 0x0L)
			{
				jjmatchedKind = 607;
				jjmatchedPos = 8;
			}
			return jjMoveStringLiteralDfa9_2(active0, 0x0L, active1, 0x100000000000L, active2, 0x0L, active3, 0x0L, active4, 0x8000000000000L, active5, 0x0L, active6, 0x0L, active7, 0x80000000L, active8, 0x700000001000L, active9, 0x100001000L, active10, 0x0L);
		case 'N':
			if ((active0 & 0x1000000L) != 0x0L)
				return jjStartNfaWithStates_2(8, 24, 89);
			else if ((active1 & 0x4000L) != 0x0L)
			{
				jjmatchedKind = 78;
				jjmatchedPos = 8;
			}
			else if ((active1 & 0x2000000L) != 0x0L)
			{
				jjmatchedKind = 89;
				jjmatchedPos = 8;
			}
			else if ((active2 & 0x400000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(8, 186, 89);
			else if ((active4 & 0x200L) != 0x0L)
				return jjStartNfaWithStates_2(8, 265, 89);
			else if ((active6 & 0x80L) != 0x0L)
				return jjStartNfaWithStates_2(8, 391, 89);
			else if ((active6 & 0x40000000L) != 0x0L)
				return jjStartNfaWithStates_2(8, 414, 89);
			return jjMoveStringLiteralDfa9_2(active0, 0x100000002000000L, active1, 0x20f8c038000L, active2, 0x200000L, active3, 0x0L, active4, 0x0L, active5, 0x2000004000008000L, active6, 0x8000000000000L, active7, 0x20000L, active8, 0x18L, active9, 0x8000000000L, active10, 0x8000L);
		case 'O':
			return jjMoveStringLiteralDfa9_2(active0, 0x0L, active1, 0x60000000L, active2, 0x10000000L, active3, 0x80000L, active4, 0xc800000000000000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x400000000000000L, active9, 0x0L, active10, 0x0L);
		case 'P':
			if ((active1 & 0x80000000000L) != 0x0L)
				return jjStartNfaWithStates_2(8, 107, 89);
			else if ((active9 & 0x40000L) != 0x0L)
			{
				jjmatchedKind = 594;
				jjmatchedPos = 8;
			}
			return jjMoveStringLiteralDfa9_2(active0, 0x0L, active1, 0x20000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x40000000000000L, active7, 0x0L, active8, 0x0L, active9, 0x182000L, active10, 0x0L);
		case 'Q':
			return jjMoveStringLiteralDfa9_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x800000000000L, active9, 0x0L, active10, 0x0L);
		case 'R':
			if ((active0 & 0x8000000000000000L) != 0x0L)
			{
				jjmatchedKind = 63;
				jjmatchedPos = 8;
			}
			else if ((active3 & 0x20000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(8, 245, 89);
			else if ((active5 & 0x8000000000000000L) != 0x0L)
			{
				jjmatchedKind = 383;
				jjmatchedPos = 8;
			}
			else if ((active8 & 0x100000000L) != 0x0L)
				return jjStartNfaWithStates_2(8, 544, 89);
			return jjMoveStringLiteralDfa9_2(active0, 0x1000000000L, active1, 0xc000000000003fL, active2, 0x0L, active3, 0x0L, active4, 0x40000L, active5, 0x0L, active6, 0x4003fL, active7, 0x0L, active8, 0x41fff0020L, active9, 0x0L, active10, 0x0L);
		case 'S':
			return jjMoveStringLiteralDfa9_2(active0, 0x0L, active1, 0x100000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x8000L, active5, 0x0L, active6, 0x0L, active7, 0x40000L, active8, 0x1008000000000L, active9, 0x10000000401L, active10, 0x0L);
		case 'T':
			if ((active1 & 0x1000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(8, 112, 89);
			else if ((active3 & 0x10000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(8, 244, 89);
			else if ((active4 & 0x2L) != 0x0L)
			{
				jjmatchedKind = 257;
				jjmatchedPos = 8;
			}
			else if ((active7 & 0x100000L) != 0x0L)
				return jjStartNfaWithStates_2(8, 468, 89);
			else if ((active7 & 0x1000000L) != 0x0L)
				return jjStartNfaWithStates_2(8, 472, 89);
			else if ((active8 & 0x4000L) != 0x0L)
				return jjStartNfaWithStates_2(8, 526, 89);
			else if ((active8 & 0x100000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(8, 568, 89);
			return jjMoveStringLiteralDfa9_2(active0, 0x0L, active1, 0xe00001000000000L, active2, 0x80L, active3, 0x1000000000000L, active4, 0x1000000000000004L, active5, 0x20000000000000L, active6, 0x0L, active7, 0x8000000040000000L, active8, 0x2L, active9, 0x2000000000004L, active10, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa9_2(active0, 0x0L, active1, 0x1000000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x20080000L, active5, 0x1L, active6, 0x400L, active7, 0x1000000000000L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'V':
			return jjMoveStringLiteralDfa9_2(active0, 0x800000L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0xe0000000L, active9, 0x0L, active10, 0x0L);
		case 'W':
			if ((active3 & 0x100000L) != 0x0L)
				return jjStartNfaWithStates_2(8, 212, 89);
			return jjMoveStringLiteralDfa9_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x2000000000000L, active9, 0x0L, active10, 0x0L);
		case 'X':
			if ((active6 & 0x2000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(8, 433, 89);
			return jjMoveStringLiteralDfa9_2(active0, 0x100000L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'Y':
			if ((active3 & 0x10000000000L) != 0x0L)
				return jjStartNfaWithStates_2(8, 232, 89);
			else if ((active3 & 0x80000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(8, 247, 89);
			else if ((active6 & 0x4000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(8, 434, 89);
			else if ((active9 & 0x4000L) != 0x0L)
				return jjStartNfaWithStates_2(8, 590, 89);
			else if ((active10 & 0x800L) != 0x0L)
				return jjStartNfaWithStates_2(8, 651, 89);
			return jjMoveStringLiteralDfa9_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x4000000000000L, active9, 0x0L, active10, 0x0L);
		case '_':
			return jjMoveStringLiteralDfa9_2(active0, 0x0L, active1, 0x0L, active2, 0x18L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x4000000L, active7, 0x40000000000000f0L, active8, 0x8000000000000000L, active9, 0x600000L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_2(7, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa9_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_2(7, old0, old1, old2, old3, old4, old5, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_2(8, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
			return 9;
		}
		switch(curChar)
		{
		case 'A':
			return jjMoveStringLiteralDfa10_2(active0, 0x100000000000000L, active1, 0x2c000004000000L, active2, 0x0L, active3, 0x1000000000000L, active4, 0x0L, active5, 0x0L, active6, 0x40000L, active7, 0x40030000L, active8, 0x100200e0001100L, active9, 0xc000080000L, active10, 0x0L);
		case 'B':
			return jjMoveStringLiteralDfa10_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x4000000000000000L, active4, 0x8000000000000L, active5, 0x0L, active6, 0x0L, active7, 0x100000000000L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'C':
			if ((active0 & 0x4000000L) != 0x0L)
				return jjStartNfaWithStates_2(9, 26, 89);
			return jjMoveStringLiteralDfa10_2(active0, 0x0L, active1, 0x100000000000000L, active2, 0x40000000L, active3, 0x0L, active4, 0x800000000030000L, active5, 0x0L, active6, 0x0L, active7, 0x40010L, active8, 0x0L, active9, 0x10000000000L, active10, 0x0L);
		case 'D':
			if ((active5 & 0x8000L) != 0x0L)
				return jjStartNfaWithStates_2(9, 335, 89);
			else if ((active5 & 0x4000000L) != 0x0L)
				return jjStartNfaWithStates_2(9, 346, 89);
			return jjMoveStringLiteralDfa10_2(active0, 0x0L, active1, 0x20000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x100000L, active10, 0x0L);
		case 'E':
			if ((active0 & 0x800000L) != 0x0L)
				return jjStartNfaWithStates_2(9, 23, 89);
			else if ((active2 & 0x80L) != 0x0L)
				return jjStartNfaWithStates_2(9, 135, 89);
			else if ((active2 & 0x4000L) != 0x0L)
				return jjStartNfaWithStates_2(9, 142, 89);
			else if ((active4 & 0x80000L) != 0x0L)
				return jjStartNfaWithStates_2(9, 275, 89);
			else if ((active4 & 0x20000000L) != 0x0L)
				return jjStartNfaWithStates_2(9, 285, 89);
			else if ((active6 & 0x40000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(9, 438, 89);
			else if ((active6 & 0x1000000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(9, 444, 89);
			else if ((active7 & 0x80000000L) != 0x0L)
				return jjStartNfaWithStates_2(9, 479, 89);
			else if ((active8 & 0x2000L) != 0x0L)
				return jjStartNfaWithStates_2(9, 525, 89);
			else if ((active9 & 0x4L) != 0x0L)
				return jjStartNfaWithStates_2(9, 578, 89);
			else if ((active9 & 0x1000L) != 0x0L)
				return jjStartNfaWithStates_2(9, 588, 89);
			return jjMoveStringLiteralDfa10_2(active0, 0x0L, active1, 0x10000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x1400000000000000L, active5, 0x2000000000L, active6, 0x30000L, active7, 0x100000000L, active8, 0x7000000008000L, active9, 0x2000000000401L, active10, 0x0L);
		case 'G':
			if ((active5 & 0x2000000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(9, 381, 89);
			else if ((active8 & 0x8L) != 0x0L)
				return jjStartNfaWithStates_2(9, 515, 89);
			else if ((active10 & 0x8000L) != 0x0L)
				return jjStartNfaWithStates_2(9, 655, 89);
			return jjMoveStringLiteralDfa10_2(active0, 0x0L, active1, 0x100L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x4000000000L, active6, 0x400L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'H':
			return jjMoveStringLiteralDfa10_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x800000000L, active9, 0x200000L, active10, 0x0L);
		case 'I':
			return jjMoveStringLiteralDfa10_2(active0, 0x0L, active1, 0x600000000000010L, active2, 0x18L, active3, 0x0L, active4, 0x4L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x302400000002L, active9, 0x0L, active10, 0x0L);
		case 'K':
			if ((active2 & 0x200000L) != 0x0L)
				return jjStartNfaWithStates_2(9, 149, 89);
			return jjMoveStringLiteralDfa10_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x200000L);
		case 'L':
			return jjMoveStringLiteralDfa10_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x800000000000L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x20L, active8, 0x0L, active9, 0x2000L, active10, 0x0L);
		case 'M':
			if ((active5 & 0x1L) != 0x0L)
				return jjStartNfaWithStates_2(9, 320, 89);
			return jjMoveStringLiteralDfa10_2(active0, 0x800000000L, active1, 0x4000000000100000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x400010000000L, active8, 0x800000000000000L, active9, 0x400200L, active10, 0x0L);
		case 'N':
			if ((active1 & 0x20000000L) != 0x0L)
			{
				jjmatchedKind = 93;
				jjmatchedPos = 9;
			}
			return jjMoveStringLiteralDfa10_2(active0, 0x0L, active1, 0x40000000L, active2, 0x0L, active3, 0x80000L, active4, 0xc000000000000000L, active5, 0x0L, active6, 0x1000000000000L, active7, 0x4000000000000000L, active8, 0x8010000000000L, active9, 0xc000000000000000L, active10, 0x3L);
		case 'O':
			return jjMoveStringLiteralDfa10_2(active0, 0x0L, active1, 0xc0001000000000L, active2, 0x8000000L, active3, 0x0L, active4, 0x10000000000000L, active5, 0x0L, active6, 0x0L, active7, 0x40L, active8, 0x8000480000000000L, active9, 0x4000878000000L, active10, 0x0L);
		case 'P':
			if ((active1 & 0x100000000000L) != 0x0L)
				return jjStartNfaWithStates_2(9, 108, 89);
			else if ((active8 & 0x400000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(9, 570, 89);
			break;
		case 'R':
			if ((active1 & 0x80L) != 0x0L)
				return jjStartNfaWithStates_2(9, 71, 89);
			else if ((active2 & 0x10000000L) != 0x0L)
				return jjStartNfaWithStates_2(9, 156, 89);
			else if ((active4 & 0x400000L) != 0x0L)
				return jjStartNfaWithStates_2(9, 278, 89);
			else if ((active7 & 0x200000L) != 0x0L)
				return jjStartNfaWithStates_2(9, 469, 89);
			return jjMoveStringLiteralDfa10_2(active0, 0x0L, active1, 0x800000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x10000004000000L, active7, 0x0L, active8, 0x40000000000L, active9, 0x0L, active10, 0x0L);
		case 'S':
			if ((active0 & 0x40000000L) != 0x0L)
				return jjStartNfaWithStates_2(9, 30, 89);
			else if ((active1 & 0x20L) != 0x0L)
				return jjStartNfaWithStates_2(9, 69, 89);
			else if ((active6 & 0x1000000000L) != 0x0L)
				return jjStartNfaWithStates_2(9, 420, 89);
			else if ((active6 & 0x800000000000L) != 0x0L)
				return jjStartNfaWithStates_2(9, 431, 89);
			else if ((active9 & 0x100000000L) != 0x0L)
				return jjStartNfaWithStates_2(9, 608, 89);
			return jjMoveStringLiteralDfa10_2(active0, 0x0L, active1, 0x1000000000000000L, active2, 0x20000000L, active3, 0x0L, active4, 0x80000000000L, active5, 0x0L, active6, 0x0L, active7, 0x1000000000080L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'T':
			if ((active0 & 0x2000000L) != 0x0L)
				return jjStartNfaWithStates_2(9, 25, 89);
			else if ((active1 & 0x80000000L) != 0x0L)
			{
				jjmatchedKind = 95;
				jjmatchedPos = 9;
			}
			else if ((active2 & 0x100000000L) != 0x0L)
				return jjStartNfaWithStates_2(9, 160, 89);
			else if ((active6 & 0x8000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(9, 435, 89);
			else if ((active8 & 0x10L) != 0x0L)
				return jjStartNfaWithStates_2(9, 516, 89);
			return jjMoveStringLiteralDfa10_2(active0, 0x4004001080000000L, active1, 0xf00000000L, active2, 0x8000000000000L, active3, 0x0L, active4, 0x8000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x8000000000L, active9, 0x0L, active10, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa10_2(active0, 0x0L, active1, 0x600000L, active2, 0x60000000000L, active3, 0x400L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x800000000000L, active9, 0x0L, active10, 0x0L);
		case 'V':
			return jjMoveStringLiteralDfa10_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x800000000000000L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x1fff0000L, active9, 0x0L, active10, 0x0L);
		case 'X':
			if ((active4 & 0x4000000000L) != 0x0L)
				return jjStartNfaWithStates_2(9, 294, 89);
			break;
		case 'Y':
			if ((active4 & 0x2000L) != 0x0L)
			{
				jjmatchedKind = 269;
				jjmatchedPos = 9;
			}
			else if ((active4 & 0x40000L) != 0x0L)
				return jjStartNfaWithStates_2(9, 274, 89);
			else if ((active5 & 0x20000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(9, 373, 89);
			else if ((active8 & 0x20L) != 0x0L)
				return jjStartNfaWithStates_2(9, 517, 89);
			else if ((active9 & 0x40000000000L) != 0x0L)
				return jjStartNfaWithStates_2(9, 618, 89);
			return jjMoveStringLiteralDfa10_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x4000L, active5, 0x0L, active6, 0x0L, active7, 0x8000000000000000L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case '_':
			return jjMoveStringLiteralDfa10_2(active0, 0x100000L, active1, 0x803800fL, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x3fL, active7, 0x0L, active8, 0x0L, active9, 0x402000010L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_2(8, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa10_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_2(8, old0, old1, old2, old3, old4, old5, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_2(9, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
			return 10;
		}
		switch(curChar)
		{
		case 'A':
			return jjMoveStringLiteralDfa11_2(active0, 0x0L, active1, 0x800000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x4000L, active5, 0x0L, active6, 0x0L, active7, 0x4000000000000010L, active8, 0xc84881fff0000L, active9, 0x0L, active10, 0x0L);
		case 'C':
			if ((active8 & 0x400000000L) != 0x0L)
				return jjStartNfaWithStates_2(10, 546, 89);
			return jjMoveStringLiteralDfa11_2(active0, 0x100000L, active1, 0x8000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x10000000000000L, active7, 0x40L, active8, 0x1100000000000L, active9, 0x2000000L, active10, 0x0L);
		case 'D':
			if ((active3 & 0x80000L) != 0x0L)
				return jjStartNfaWithStates_2(10, 211, 89);
			else if ((active4 & 0x4000000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(10, 318, 89);
			else if ((active4 & 0x8000000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(10, 319, 89);
			else if ((active9 & 0x2000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(10, 625, 89);
			return jjMoveStringLiteralDfa11_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x80000L, active10, 0x0L);
		case 'E':
			if ((active0 & 0x800000000L) != 0x0L)
				return jjStartNfaWithStates_2(10, 35, 89);
			else if ((active1 & 0x100000L) != 0x0L)
				return jjStartNfaWithStates_2(10, 84, 89);
			else if ((active1 & 0x4000000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(10, 126, 89);
			else if ((active3 & 0x400L) != 0x0L)
				return jjStartNfaWithStates_2(10, 202, 89);
			else if ((active3 & 0x800000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(10, 251, 89);
			else if ((active7 & 0x10000000L) != 0x0L)
				return jjStartNfaWithStates_2(10, 476, 89);
			else if ((active7 & 0x400000000000L) != 0x0L)
				return jjStartNfaWithStates_2(10, 494, 89);
			else if ((active9 & 0x200L) != 0x0L)
				return jjStartNfaWithStates_2(10, 585, 89);
			else if ((active9 & 0x2000L) != 0x0L)
				return jjStartNfaWithStates_2(10, 589, 89);
			return jjMoveStringLiteralDfa11_2(active0, 0x0L, active1, 0x1000000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x8000000000000L, active5, 0x0L, active6, 0x4000000L, active7, 0x1000000000020L, active8, 0x2000000000000L, active9, 0xc000000000000000L, active10, 0x200003L);
		case 'F':
			return jjMoveStringLiteralDfa11_2(active0, 0x0L, active1, 0x10000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'G':
			if ((active6 & 0x1000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(10, 432, 89);
			return jjMoveStringLiteralDfa11_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x10000000000000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'H':
			if ((active0 & 0x4000000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(10, 62, 89);
			else if ((active6 & 0x400L) != 0x0L)
				return jjStartNfaWithStates_2(10, 394, 89);
			return jjMoveStringLiteralDfa11_2(active0, 0x0L, active1, 0x100000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x40000L, active8, 0x0L, active9, 0x10000000000L, active10, 0x0L);
		case 'I':
			return jjMoveStringLiteralDfa11_2(active0, 0x1080000000L, active1, 0x20000000100L, active2, 0x8000000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x500000L, active10, 0x0L);
		case 'L':
			if ((active1 & 0x4000000L) != 0x0L)
				return jjStartNfaWithStates_2(10, 90, 89);
			else if ((active8 & 0x1000L) != 0x0L)
				return jjStartNfaWithStates_2(10, 524, 89);
			return jjMoveStringLiteralDfa11_2(active0, 0x0L, active1, 0x40000000000001L, active2, 0x0L, active3, 0x4000000000000000L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x100040000000L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa11_2(active0, 0x100000000000000L, active1, 0x600000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x1L, active7, 0x100020000L, active8, 0x0L, active9, 0x8000000000L, active10, 0x0L);
		case 'N':
			if ((active2 & 0x8000000L) != 0x0L)
				return jjStartNfaWithStates_2(10, 155, 89);
			else if ((active8 & 0x100L) != 0x0L)
				return jjStartNfaWithStates_2(10, 520, 89);
			else if ((active9 & 0x8000000L) != 0x0L)
			{
				jjmatchedKind = 603;
				jjmatchedPos = 10;
			}
			else if ((active9 & 0x800000000L) != 0x0L)
				return jjStartNfaWithStates_2(10, 611, 89);
			return jjMoveStringLiteralDfa11_2(active0, 0x0L, active1, 0x8610000L, active2, 0x60000000018L, active3, 0x0L, active4, 0x400000000000000L, active5, 0x0L, active6, 0x40002L, active7, 0x0L, active8, 0x602000000000L, active9, 0x4000070000000L, active10, 0x0L);
		case 'O':
			return jjMoveStringLiteralDfa11_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x4L, active5, 0x0L, active6, 0x4L, active7, 0x0L, active8, 0x2L, active9, 0x200000L, active10, 0x0L);
		case 'P':
			if ((active8 & 0x800000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(10, 571, 89);
			return jjMoveStringLiteralDfa11_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x8000000000000000L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'Q':
			return jjMoveStringLiteralDfa11_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x80L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'R':
			if ((active1 & 0x1000000000L) != 0x0L)
				return jjStartNfaWithStates_2(10, 100, 89);
			else if ((active8 & 0x8000L) != 0x0L)
				return jjStartNfaWithStates_2(10, 527, 89);
			else if ((active8 & 0x10000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(10, 564, 89);
			else if ((active9 & 0x400L) != 0x0L)
				return jjStartNfaWithStates_2(10, 586, 89);
			return jjMoveStringLiteralDfa11_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x80000000e0000000L, active9, 0x400000010L, active10, 0x0L);
		case 'S':
			if ((active1 & 0x800000000L) != 0x0L)
				return jjStartNfaWithStates_2(10, 99, 89);
			else if ((active2 & 0x40000000L) != 0x0L)
				return jjStartNfaWithStates_2(10, 158, 89);
			else if ((active4 & 0x8000L) != 0x0L)
				return jjStartNfaWithStates_2(10, 271, 89);
			return jjMoveStringLiteralDfa11_2(active0, 0x0L, active1, 0x2001eL, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x2000000000L, active6, 0x38L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'T':
			if ((active4 & 0x10000L) != 0x0L)
			{
				jjmatchedKind = 272;
				jjmatchedPos = 10;
			}
			else if ((active8 & 0x10000000000L) != 0x0L)
				return jjStartNfaWithStates_2(10, 552, 89);
			else if ((active9 & 0x1L) != 0x0L)
				return jjStartNfaWithStates_2(10, 576, 89);
			return jjMoveStringLiteralDfa11_2(active0, 0x0L, active1, 0x2c000000000000L, active2, 0x20000000L, active3, 0x1000000000000L, active4, 0x800080000020000L, active5, 0x4000000000L, active6, 0x0L, active7, 0x10000L, active8, 0x0L, active9, 0x4000000000L, active10, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa11_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x80000000000L, active9, 0x0L, active10, 0x0L);
		case 'W':
			if ((active1 & 0x80000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(10, 119, 89);
			break;
		case 'X':
			return jjMoveStringLiteralDfa11_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x1000000000000000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'Y':
			if ((active0 & 0x4000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(10, 50, 89);
			else if ((active3 & 0x800000000000L) != 0x0L)
				return jjStartNfaWithStates_2(10, 239, 89);
			else if ((active8 & 0x20000000000L) != 0x0L)
				return jjStartNfaWithStates_2(10, 553, 89);
			break;
		case '_':
			return jjMoveStringLiteralDfa11_2(active0, 0x0L, active1, 0x740000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x30000L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_2(9, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa11_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_2(9, old0, old1, old2, old3, old4, old5, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_2(10, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
			return 11;
		}
		switch(curChar)
		{
		case 'A':
			if ((active7 & 0x100000000L) != 0x0L)
				return jjStartNfaWithStates_2(11, 480, 89);
			return jjMoveStringLiteralDfa12_2(active0, 0x100000L, active1, 0x14000000018000L, active2, 0x0L, active3, 0x0L, active4, 0x80000020000L, active5, 0x0L, active6, 0x2L, active7, 0x10000L, active8, 0x0L, active9, 0x4004000000000L, active10, 0x0L);
		case 'B':
			return jjMoveStringLiteralDfa12_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x20000000L, active9, 0x0L, active10, 0x0L);
		case 'C':
			return jjMoveStringLiteralDfa12_2(active0, 0x0L, active1, 0x100620000L, active2, 0x60000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x10000L, active7, 0x0L, active8, 0x40040000000L, active9, 0x0L, active10, 0x0L);
		case 'D':
			if ((active9 & 0x80000L) != 0x0L)
				return jjStartNfaWithStates_2(11, 595, 89);
			return jjMoveStringLiteralDfa12_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x20000L, active7, 0x0L, active8, 0x0L, active9, 0xc000000000000000L, active10, 0x3L);
		case 'E':
			if ((active0 & 0x100000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(11, 56, 89);
			else if ((active1 & 0x8000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(11, 115, 89);
			else if ((active1 & 0x40000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(11, 118, 89);
			else if ((active1 & 0x200000000000000L) != 0x0L)
			{
				jjmatchedKind = 121;
				jjmatchedPos = 11;
			}
			else if ((active3 & 0x4000000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(11, 254, 89);
			else if ((active7 & 0x20000L) != 0x0L)
				return jjStartNfaWithStates_2(11, 465, 89);
			else if ((active7 & 0x100000000000L) != 0x0L)
				return jjStartNfaWithStates_2(11, 492, 89);
			else if ((active7 & 0x8000000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(11, 511, 89);
			else if ((active9 & 0x8000000000L) != 0x0L)
				return jjStartNfaWithStates_2(11, 615, 89);
			return jjMoveStringLiteralDfa12_2(active0, 0x0L, active1, 0x50000000000000fL, active2, 0x0L, active3, 0x0L, active4, 0x800000000000000L, active5, 0x0L, active6, 0x10000000000000L, active7, 0x40000L, active8, 0x0L, active9, 0x10400000010L, active10, 0x0L);
		case 'F':
			return jjMoveStringLiteralDfa12_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x100000L, active10, 0x0L);
		case 'G':
			return jjMoveStringLiteralDfa12_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x400000000004000L, active5, 0x0L, active6, 0x4000000L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'H':
			if ((active1 & 0x20000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(11, 117, 89);
			else if ((active5 & 0x4000000000L) != 0x0L)
				return jjStartNfaWithStates_2(11, 358, 89);
			break;
		case 'I':
			return jjMoveStringLiteralDfa12_2(active0, 0x0L, active1, 0x0L, active2, 0x20000000L, active3, 0x1000000000000L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x8000000000000000L, active9, 0x0L, active10, 0x0L);
		case 'K':
			if ((active6 & 0x40000L) != 0x0L)
				return jjStartNfaWithStates_2(11, 402, 89);
			else if ((active8 & 0x2000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(11, 561, 89);
			break;
		case 'L':
			return jjMoveStringLiteralDfa12_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x80L, active8, 0x1fff0000L, active9, 0x0L, active10, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa12_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x4000000000000000L, active8, 0x8000000000L, active9, 0x0L, active10, 0x0L);
		case 'N':
			if ((active1 & 0x100L) != 0x0L)
				return jjStartNfaWithStates_2(11, 72, 89);
			else if ((active4 & 0x4L) != 0x0L)
				return jjStartNfaWithStates_2(11, 258, 89);
			else if ((active8 & 0x2L) != 0x0L)
				return jjStartNfaWithStates_2(11, 513, 89);
			return jjMoveStringLiteralDfa12_2(active0, 0x0L, active1, 0x800020240000000L, active2, 0x0L, active3, 0x0L, active4, 0x10000000000000L, active5, 0x0L, active6, 0x0L, active7, 0x20L, active8, 0x80000000L, active9, 0x400000L, active10, 0x0L);
		case 'O':
			return jjMoveStringLiteralDfa12_2(active0, 0x80000000L, active1, 0x0L, active2, 0x8000000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x1L, active7, 0x40000000L, active8, 0x1000000000000L, active9, 0x2000000L, active10, 0x0L);
		case 'P':
			return jjMoveStringLiteralDfa12_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x38L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'R':
			if ((active1 & 0x1000000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(11, 124, 89);
			else if ((active4 & 0x8000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(11, 307, 89);
			else if ((active7 & 0x1000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(11, 496, 89);
			else if ((active8 & 0x800000000L) != 0x0L)
				return jjStartNfaWithStates_2(11, 547, 89);
			else if ((active8 & 0x80000000000L) != 0x0L)
				return jjStartNfaWithStates_2(11, 555, 89);
			else if ((active8 & 0x4000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(11, 562, 89);
			return jjMoveStringLiteralDfa12_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x4L, active7, 0x10L, active8, 0x8900000000000L, active9, 0x0L, active10, 0x0L);
		case 'S':
			return jjMoveStringLiteralDfa12_2(active0, 0x0L, active1, 0x400000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x70000000L, active10, 0x0L);
		case 'T':
			if ((active4 & 0x1000000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(11, 316, 89);
			else if ((active8 & 0x2000000000L) != 0x0L)
				return jjStartNfaWithStates_2(11, 549, 89);
			else if ((active10 & 0x200000L) != 0x0L)
				return jjStartNfaWithStates_2(11, 661, 89);
			return jjMoveStringLiteralDfa12_2(active0, 0x1000000000L, active1, 0x10L, active2, 0x18L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x40L, active8, 0x400000000000L, active9, 0x0L, active10, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa12_2(active0, 0x0L, active1, 0x8000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x200000000000L, active9, 0x200000L, active10, 0x0L);
		case '_':
			return jjMoveStringLiteralDfa12_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x2000000000L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_2(10, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa12_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_2(10, old0, old1, old2, old3, old4, old5, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_2(11, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
			return 12;
		}
		switch(curChar)
		{
		case 'A':
			return jjMoveStringLiteralDfa13_2(active0, 0x0L, active1, 0x340000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'C':
			if ((active2 & 0x20000000L) != 0x0L)
				return jjStartNfaWithStates_2(12, 157, 89);
			return jjMoveStringLiteralDfa13_2(active0, 0x0L, active1, 0x400000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x80000000L, active9, 0x0L, active10, 0x0L);
		case 'D':
			return jjMoveStringLiteralDfa13_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x5L, active7, 0x10L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'E':
			if ((active7 & 0x4000000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(12, 510, 89);
			return jjMoveStringLiteralDfa13_2(active0, 0x0L, active1, 0x0L, active2, 0x18L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x4000038L, active7, 0x40L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'F':
			if ((active9 & 0x100000L) != 0x0L)
				return jjStartNfaWithStates_2(12, 596, 89);
			break;
		case 'G':
			if ((active1 & 0x20000000000L) != 0x0L)
				return jjStartNfaWithStates_2(12, 105, 89);
			else if ((active4 & 0x4000L) != 0x0L)
				return jjStartNfaWithStates_2(12, 270, 89);
			return jjMoveStringLiteralDfa13_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x20000L, active5, 0x0L, active6, 0x0L, active7, 0x40000020L, active8, 0x8000000000000000L, active9, 0x400000010L, active10, 0x0L);
		case 'H':
			if ((active8 & 0x400000000000L) != 0x0L)
				return jjStartNfaWithStates_2(12, 558, 89);
			return jjMoveStringLiteralDfa13_2(active0, 0x0L, active1, 0x20000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x40000000L, active9, 0x0L, active10, 0x0L);
		case 'I':
			return jjMoveStringLiteralDfa13_2(active0, 0x1000000000L, active1, 0x10L, active2, 0x0L, active3, 0x0L, active4, 0x10000000000000L, active5, 0x0L, active6, 0x20000L, active7, 0x0L, active8, 0x20000000L, active9, 0x0L, active10, 0x0L);
		case 'L':
			if ((active9 & 0x4000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(12, 626, 89);
			return jjMoveStringLiteralDfa13_2(active0, 0x0L, active1, 0x4000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x10000L, active8, 0x0L, active9, 0x4000000000L, active10, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa13_2(active0, 0x0L, active1, 0x100000008010000L, active2, 0x0L, active3, 0x0L, active4, 0x80000000000L, active5, 0x0L, active6, 0x2L, active7, 0x40000L, active8, 0x0L, active9, 0x10000000000L, active10, 0x0L);
		case 'N':
			if ((active0 & 0x80000000L) != 0x0L)
				return jjStartNfaWithStates_2(12, 31, 89);
			else if ((active2 & 0x8000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(12, 179, 89);
			return jjMoveStringLiteralDfa13_2(active0, 0x0L, active1, 0x1L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x1000000000000L, active9, 0x0L, active10, 0x0L);
		case 'O':
			return jjMoveStringLiteralDfa13_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x1000000000000L, active4, 0x0L, active5, 0x0L, active6, 0x10000L, active7, 0x0L, active8, 0x100000000000L, active9, 0x0L, active10, 0x0L);
		case 'P':
			if ((active8 & 0x8000000000L) != 0x0L)
				return jjStartNfaWithStates_2(12, 551, 89);
			return jjMoveStringLiteralDfa13_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x10000000000000L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'R':
			if ((active9 & 0x200000L) != 0x0L)
				return jjStartNfaWithStates_2(12, 597, 89);
			return jjMoveStringLiteralDfa13_2(active0, 0x100000L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x2000000000L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'S':
			return jjMoveStringLiteralDfa13_2(active0, 0x0L, active1, 0xc00000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x80L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'T':
			return jjMoveStringLiteralDfa13_2(active0, 0x0L, active1, 0x60800eL, active2, 0x60000000000L, active3, 0x0L, active4, 0xc00000000000000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0xa00000000000L, active9, 0x0L, active10, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa13_2(active0, 0x0L, active1, 0x10000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x2400000L, active10, 0x0L);
		case 'Y':
			if ((active8 & 0x8000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(12, 563, 89);
			break;
		case '_':
			return jjMoveStringLiteralDfa13_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x4001fff0000L, active9, 0xc000000070000000L, active10, 0x3L);
		default :
			break;
		}
		return jjStartNfa_2(11, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa13_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_2(11, old0, old1, old2, old3, old4, old5, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_2(12, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
			return 13;
		}
		switch(curChar)
		{
		case 'A':
			if ((active1 & 0x100000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(13, 120, 89);
			else if ((active7 & 0x40000L) != 0x0L)
				return jjStartNfaWithStates_2(13, 466, 89);
			else if ((active9 & 0x10000000000L) != 0x0L)
				return jjStartNfaWithStates_2(13, 616, 89);
			return jjMoveStringLiteralDfa14_2(active0, 0x0L, active1, 0x8000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x40000000L, active9, 0x10000000L, active10, 0x0L);
		case 'B':
			return jjMoveStringLiteralDfa14_2(active0, 0x0L, active1, 0x8000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'C':
			return jjMoveStringLiteralDfa14_2(active0, 0x0L, active1, 0x10L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x38L, active7, 0x0L, active8, 0x0L, active9, 0x20000000L, active10, 0x0L);
		case 'D':
			if ((active8 & 0x1000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(13, 560, 89);
			return jjMoveStringLiteralDfa14_2(active0, 0x100000L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0xf0000L, active9, 0x0L, active10, 0x0L);
		case 'E':
			if ((active1 & 0x10000L) != 0x0L)
				return jjStartNfaWithStates_2(13, 80, 89);
			else if ((active6 & 0x1L) != 0x0L)
				return jjStartNfaWithStates_2(13, 384, 89);
			else if ((active6 & 0x2L) != 0x0L)
				return jjStartNfaWithStates_2(13, 385, 89);
			else if ((active8 & 0x200000000000L) != 0x0L)
				return jjStartNfaWithStates_2(13, 557, 89);
			return jjMoveStringLiteralDfa14_2(active0, 0x0L, active1, 0x20000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x2000000000L, active6, 0x0L, active7, 0x0L, active8, 0x800000000000L, active9, 0x400000010L, active10, 0x0L);
		case 'F':
			return jjMoveStringLiteralDfa14_2(active0, 0x0L, active1, 0x800000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'G':
			if ((active4 & 0x20000L) != 0x0L)
				return jjStartNfaWithStates_2(13, 273, 89);
			return jjMoveStringLiteralDfa14_2(active0, 0x0L, active1, 0x1L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'H':
			if ((active4 & 0x400000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(13, 314, 89);
			return jjMoveStringLiteralDfa14_2(active0, 0x0L, active1, 0x400000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x80700000L, active9, 0x0L, active10, 0x0L);
		case 'I':
			return jjMoveStringLiteralDfa14_2(active0, 0x0L, active1, 0x600000L, active2, 0x60000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x4L, active7, 0x10L, active8, 0x8000000000000000L, active9, 0x0L, active10, 0x0L);
		case 'L':
			return jjMoveStringLiteralDfa14_2(active0, 0x0L, active1, 0x10000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa14_2(active0, 0x0L, active1, 0x240000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x3800000L, active9, 0x0L, active10, 0x0L);
		case 'N':
			if ((active3 & 0x1000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(13, 240, 89);
			return jjMoveStringLiteralDfa14_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x10000L, active7, 0x0L, active8, 0x20000000L, active9, 0x2000000L, active10, 0x0L);
		case 'O':
			return jjMoveStringLiteralDfa14_2(active0, 0x1000000000L, active1, 0x4000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x10000L, active8, 0x0L, active9, 0x4000000000L, active10, 0x0L);
		case 'P':
			if ((active4 & 0x80000000000L) != 0x0L)
				return jjStartNfaWithStates_2(13, 299, 89);
			break;
		case 'R':
			return jjMoveStringLiteralDfa14_2(active0, 0x0L, active1, 0x0L, active2, 0x18L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x40000000L, active10, 0x0L);
		case 'S':
			if ((active7 & 0x40000000L) != 0x0L)
				return jjStartNfaWithStates_2(13, 478, 89);
			return jjMoveStringLiteralDfa14_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x20000L, active7, 0x0L, active8, 0x140004000000L, active9, 0x0L, active10, 0x0L);
		case 'T':
			if ((active6 & 0x10000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(13, 436, 89);
			return jjMoveStringLiteralDfa14_2(active0, 0x0L, active1, 0x400000100000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0xe0L, active8, 0x0L, active9, 0xc000000000400000L, active10, 0x3L);
		case 'X':
			if ((active6 & 0x4000000L) != 0x0L)
				return jjStartNfaWithStates_2(13, 410, 89);
			break;
		case 'Y':
			return jjMoveStringLiteralDfa14_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x18000000L, active9, 0x0L, active10, 0x0L);
		case 'Z':
			return jjMoveStringLiteralDfa14_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x10000000000000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case '_':
			return jjMoveStringLiteralDfa14_2(active0, 0x0L, active1, 0xeL, active2, 0x0L, active3, 0x0L, active4, 0x800000000000000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_2(12, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa14_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_2(12, old0, old1, old2, old3, old4, old5, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_2(13, active0, active1, active2, 0L, active4, active5, active6, active7, active8, active9, active10, 0L);
			return 14;
		}
		switch(curChar)
		{
		case 'A':
			return jjMoveStringLiteralDfa15_2(active0, 0x0L, active1, 0x400000100000000L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x80L, active8, 0xa00f0000L, active9, 0x0L, active10, 0x0L);
		case 'C':
			if ((active6 & 0x20000L) != 0x0L)
				return jjStartNfaWithStates_2(14, 401, 89);
			return jjMoveStringLiteralDfa15_2(active0, 0x0L, active1, 0x2L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x10000000L, active10, 0x0L);
		case 'E':
			if ((active1 & 0x40000000L) != 0x0L)
				return jjStartNfaWithStates_2(14, 94, 89);
			else if ((active1 & 0x200000000L) != 0x0L)
				return jjStartNfaWithStates_2(14, 97, 89);
			else if ((active4 & 0x10000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(14, 308, 89);
			else if ((active9 & 0x400000L) != 0x0L)
				return jjStartNfaWithStates_2(14, 598, 89);
			return jjMoveStringLiteralDfa15_2(active0, 0x0L, active1, 0x408000000L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x14001c000000L, active9, 0x0L, active10, 0x0L);
		case 'G':
			if ((active1 & 0x4000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(14, 114, 89);
			else if ((active7 & 0x10000L) != 0x0L)
				return jjStartNfaWithStates_2(14, 464, 89);
			else if ((active9 & 0x4000000000L) != 0x0L)
				return jjStartNfaWithStates_2(14, 614, 89);
			return jjMoveStringLiteralDfa15_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active5, 0x2000000000L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'H':
			if ((active7 & 0x20L) != 0x0L)
				return jjStartNfaWithStates_2(14, 453, 89);
			break;
		case 'I':
			return jjMoveStringLiteralDfa15_2(active0, 0x100000L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x38L, active7, 0x0L, active8, 0x1800000L, active9, 0x0L, active10, 0x0L);
		case 'L':
			return jjMoveStringLiteralDfa15_2(active0, 0x0L, active1, 0x8000L, active2, 0x0L, active4, 0x800000000000000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa15_2(active0, 0x0L, active1, 0x20000L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'N':
			if ((active0 & 0x1000000000L) != 0x0L)
				return jjStartNfaWithStates_2(14, 36, 89);
			else if ((active8 & 0x8000000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(14, 575, 89);
			return jjMoveStringLiteralDfa15_2(active0, 0x0L, active1, 0x4L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x4L, active7, 0x10L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'O':
			return jjMoveStringLiteralDfa15_2(active0, 0x0L, active1, 0x800000000600000L, active2, 0x60000000000L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x2700000L, active9, 0x60000000L, active10, 0x0L);
		case 'R':
			if ((active8 & 0x40000000L) != 0x0L)
				return jjStartNfaWithStates_2(14, 542, 89);
			else if ((active8 & 0x800000000000L) != 0x0L)
				return jjStartNfaWithStates_2(14, 559, 89);
			break;
		case 'S':
			if ((active1 & 0x10L) != 0x0L)
				return jjStartNfaWithStates_2(14, 68, 89);
			return jjMoveStringLiteralDfa15_2(active0, 0x0L, active1, 0x8L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'T':
			if ((active6 & 0x10000L) != 0x0L)
				return jjStartNfaWithStates_2(14, 400, 89);
			else if ((active9 & 0x2000000L) != 0x0L)
				return jjStartNfaWithStates_2(14, 601, 89);
			return jjMoveStringLiteralDfa15_2(active0, 0x0L, active1, 0x10000000000001L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'V':
			return jjMoveStringLiteralDfa15_2(active0, 0x0L, active1, 0x0L, active2, 0x18L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'X':
			if ((active9 & 0x10L) != 0x0L)
				return jjStartNfaWithStates_2(14, 580, 89);
			else if ((active9 & 0x400000000L) != 0x0L)
				return jjStartNfaWithStates_2(14, 610, 89);
			break;
		case 'Y':
			return jjMoveStringLiteralDfa15_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0xc000000000000000L, active10, 0x3L);
		case '_':
			return jjMoveStringLiteralDfa15_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x40L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_2(13, active0, active1, active2, 0L, active4, active5, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa15_2(long old0, long active0, long old1, long active1, long old2, long active2, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_2(13, old0, old1, old2, 0L, old4, old5, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_2(14, active0, active1, active2, 0L, active4, active5, active6, active7, active8, active9, active10, 0L);
			return 15;
		}
		switch(curChar)
		{
		case 'A':
			if ((active1 & 0x20000L) != 0x0L)
				return jjStartNfaWithStates_2(15, 81, 89);
			return jjMoveStringLiteralDfa16_2(active0, 0x0L, active1, 0x6L, active2, 0x18L, active4, 0x0L, active5, 0x0L, active6, 0x4L, active7, 0x10L, active8, 0x18000000L, active9, 0x0L, active10, 0x0L);
		case 'C':
			return jjMoveStringLiteralDfa16_2(active0, 0x0L, active1, 0x8L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x140004000000L, active9, 0x0L, active10, 0x0L);
		case 'E':
			return jjMoveStringLiteralDfa16_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x800000000000000L, active5, 0x2000000000L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'F':
			return jjMoveStringLiteralDfa16_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x38L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'H':
			if ((active1 & 0x1L) != 0x0L)
				return jjStartNfaWithStates_2(15, 64, 89);
			break;
		case 'L':
			return jjMoveStringLiteralDfa16_2(active0, 0x0L, active1, 0x100000000L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x40L, active8, 0x0L, active9, 0x40000000L, active10, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa16_2(active0, 0x0L, active1, 0x400000400000000L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x20000000L, active10, 0x0L);
		case 'N':
			if ((active1 & 0x200000L) != 0x0L)
			{
				jjmatchedKind = 85;
				jjmatchedPos = 15;
			}
			else if ((active2 & 0x20000000000L) != 0x0L)
			{
				jjmatchedKind = 169;
				jjmatchedPos = 15;
			}
			return jjMoveStringLiteralDfa16_2(active0, 0x100000L, active1, 0x400000L, active2, 0x40000000000L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x3800000L, active9, 0x0L, active10, 0x0L);
		case 'O':
			return jjMoveStringLiteralDfa16_2(active0, 0x0L, active1, 0x8000L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'P':
			return jjMoveStringLiteralDfa16_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0xc000000000000000L, active10, 0x3L);
		case 'R':
			if ((active1 & 0x8000000L) != 0x0L)
				return jjStartNfaWithStates_2(15, 91, 89);
			else if ((active8 & 0x80000000L) != 0x0L)
				return jjStartNfaWithStates_2(15, 543, 89);
			return jjMoveStringLiteralDfa16_2(active0, 0x0L, active1, 0x800000000000000L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x20000000L, active9, 0x0L, active10, 0x0L);
		case 'T':
			return jjMoveStringLiteralDfa16_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x80L, active8, 0x0L, active9, 0x10000000L, active10, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa16_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x700000L, active9, 0x0L, active10, 0x0L);
		case 'Y':
			if ((active8 & 0x10000L) != 0x0L)
			{
				jjmatchedKind = 528;
				jjmatchedPos = 15;
			}
			return jjMoveStringLiteralDfa16_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0xe0000L, active9, 0x0L, active10, 0x0L);
		case '_':
			return jjMoveStringLiteralDfa16_2(active0, 0x0L, active1, 0x10000000000000L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_2(14, active0, active1, active2, 0L, active4, active5, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa16_2(long old0, long active0, long old1, long active1, long old2, long active2, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_2(14, old0, old1, old2, 0L, old4, old5, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_2(15, active0, active1, active2, 0L, active4, active5, active6, active7, active8, active9, active10, 0L);
			return 16;
		}
		switch(curChar)
		{
		case 'A':
			if ((active1 & 0x400000000L) != 0x0L)
				return jjStartNfaWithStates_2(16, 98, 89);
			return jjMoveStringLiteralDfa17_2(active0, 0x100000L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'E':
			if ((active7 & 0x80L) != 0x0L)
				return jjStartNfaWithStates_2(16, 455, 89);
			return jjMoveStringLiteralDfa17_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x40L, active8, 0x0L, active9, 0xc000000000000000L, active10, 0x3L);
		case 'G':
			if ((active1 & 0x8000L) != 0x0L)
				return jjStartNfaWithStates_2(16, 79, 89);
			break;
		case 'H':
			return jjMoveStringLiteralDfa17_2(active0, 0x0L, active1, 0x8L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'I':
			return jjMoveStringLiteralDfa17_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x38L, active7, 0x0L, active8, 0x0L, active9, 0x10000000L, active10, 0x0L);
		case 'L':
			return jjMoveStringLiteralDfa17_2(active0, 0x0L, active1, 0x0L, active2, 0x18L, active4, 0x0L, active5, 0x0L, active6, 0x4L, active7, 0x10L, active8, 0x0L, active9, 0x40000000L, active10, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa17_2(active0, 0x0L, active1, 0x800000000000004L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x20000000L, active10, 0x0L);
		case 'N':
			return jjMoveStringLiteralDfa17_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x800000000000000L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'O':
			return jjMoveStringLiteralDfa17_2(active0, 0x0L, active1, 0x100000000L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x140004000000L, active9, 0x0L, active10, 0x0L);
		case 'P':
			if ((active1 & 0x400000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(16, 122, 89);
			break;
		case 'R':
			if ((active8 & 0x100000L) != 0x0L)
			{
				jjmatchedKind = 532;
				jjmatchedPos = 16;
			}
			else if ((active8 & 0x8000000L) != 0x0L)
			{
				jjmatchedKind = 539;
				jjmatchedPos = 16;
			}
			return jjMoveStringLiteralDfa17_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x10600000L, active9, 0x0L, active10, 0x0L);
		case 'T':
			return jjMoveStringLiteralDfa17_2(active0, 0x0L, active1, 0x10000000000002L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x2000000L, active9, 0x0L, active10, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa17_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x1800000L, active9, 0x0L, active10, 0x0L);
		case 'X':
			if ((active5 & 0x2000000000L) != 0x0L)
				return jjStartNfaWithStates_2(16, 357, 89);
			break;
		case 'Y':
			if ((active8 & 0x20000000L) != 0x0L)
				return jjStartNfaWithStates_2(16, 541, 89);
			break;
		case '_':
			return jjMoveStringLiteralDfa17_2(active0, 0x0L, active1, 0x400000L, active2, 0x40000000000L, active4, 0x0L, active5, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0xe0000L, active9, 0x0L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_2(15, active0, active1, active2, 0L, active4, active5, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa17_2(long old0, long active0, long old1, long active1, long old2, long active2, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_2(15, old0, old1, old2, 0L, old4, old5, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_2(16, active0, active1, active2, 0L, active4, 0L, active6, active7, active8, active9, active10, 0L);
			return 17;
		}
		switch(curChar)
		{
		case 'A':
			return jjMoveStringLiteralDfa18_2(active0, 0x0L, active1, 0x2L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'C':
			return jjMoveStringLiteralDfa18_2(active0, 0x0L, active1, 0x400000L, active2, 0x40000000000L, active4, 0x0L, active6, 0x38L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'E':
			if ((active1 & 0x4L) != 0x0L)
				return jjStartNfaWithStates_2(17, 66, 89);
			return jjMoveStringLiteralDfa18_2(active0, 0x0L, active1, 0x8L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x40000000L, active10, 0x0L);
		case 'G':
			if ((active1 & 0x100000000L) != 0x0L)
				return jjStartNfaWithStates_2(17, 96, 89);
			return jjMoveStringLiteralDfa18_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x800000000000000L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'H':
			if ((active8 & 0x2000000L) != 0x0L)
				return jjStartNfaWithStates_2(17, 537, 89);
			break;
		case 'I':
			return jjMoveStringLiteralDfa18_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x10L, active8, 0x0L, active9, 0x20000000L, active10, 0x0L);
		case 'L':
			return jjMoveStringLiteralDfa18_2(active0, 0x100000L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'N':
			return jjMoveStringLiteralDfa18_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x40L, active8, 0x140004000000L, active9, 0x0L, active10, 0x0L);
		case 'R':
			return jjMoveStringLiteralDfa18_2(active0, 0x0L, active1, 0x10000000000000L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'T':
			return jjMoveStringLiteralDfa18_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x18e0000L, active9, 0x0L, active10, 0x0L);
		case 'V':
			return jjMoveStringLiteralDfa18_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x10000000L, active10, 0x0L);
		case '_':
			return jjMoveStringLiteralDfa18_2(active0, 0x0L, active1, 0x800000000000000L, active2, 0x18L, active4, 0x0L, active6, 0x4L, active7, 0x0L, active8, 0x10600000L, active9, 0xc000000000000000L, active10, 0x3L);
		default :
			break;
		}
		return jjStartNfa_2(16, active0, active1, active2, 0L, active4, 0L, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa18_2(long old0, long active0, long old1, long active1, long old2, long active2, long old4, long active4, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active4 &= old4) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_2(16, old0, old1, old2, 0L, old4, 0L, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_2(17, active0, active1, active2, 0L, active4, 0L, active6, active7, active8, active9, active10, 0L);
			return 18;
		}
		switch(curChar)
		{
		case 'A':
			return jjMoveStringLiteralDfa19_2(active0, 0x0L, active1, 0x10000000000000L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'C':
			return jjMoveStringLiteralDfa19_2(active0, 0x0L, active1, 0x0L, active2, 0x8L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0xc000000000000000L, active10, 0x0L);
		case 'D':
			if ((active8 & 0x4000000L) != 0x0L)
				return jjStartNfaWithStates_2(18, 538, 89);
			else if ((active8 & 0x40000000000L) != 0x0L)
				return jjStartNfaWithStates_2(18, 554, 89);
			else if ((active8 & 0x100000000000L) != 0x0L)
				return jjStartNfaWithStates_2(18, 556, 89);
			return jjMoveStringLiteralDfa19_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x40000000L, active10, 0x0L);
		case 'E':
			if ((active8 & 0x800000L) != 0x0L)
			{
				jjmatchedKind = 535;
				jjmatchedPos = 18;
			}
			else if ((active9 & 0x10000000L) != 0x0L)
				return jjStartNfaWithStates_2(18, 604, 89);
			return jjMoveStringLiteralDfa19_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x1000000L, active9, 0x0L, active10, 0x0L);
		case 'G':
			return jjMoveStringLiteralDfa19_2(active0, 0x0L, active1, 0x800000000000000L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x40L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'I':
			return jjMoveStringLiteralDfa19_2(active0, 0x100000L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'L':
			return jjMoveStringLiteralDfa19_2(active0, 0x0L, active1, 0x2L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa19_2(active0, 0x0L, active1, 0x8L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'N':
			return jjMoveStringLiteralDfa19_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x1L);
		case 'O':
			return jjMoveStringLiteralDfa19_2(active0, 0x0L, active1, 0x400000L, active2, 0x40000000000L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0xe0000L, active9, 0x0L, active10, 0x0L);
		case 'P':
			return jjMoveStringLiteralDfa19_2(active0, 0x0L, active1, 0x0L, active2, 0x10L, active4, 0x0L, active6, 0x4L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'S':
			return jjMoveStringLiteralDfa19_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x2L);
		case 'T':
			return jjMoveStringLiteralDfa19_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x800000000000000L, active6, 0x0L, active7, 0x10L, active8, 0x10600000L, active9, 0x20000000L, active10, 0x0L);
		case '_':
			return jjMoveStringLiteralDfa19_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x38L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_2(17, active0, active1, active2, 0L, active4, 0L, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa19_2(long old0, long active0, long old1, long active1, long old2, long active2, long old4, long active4, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active4 &= old4) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_2(17, old0, old1, old2, 0L, old4, 0L, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_2(18, active0, active1, active2, 0L, active4, 0L, active6, active7, active8, active9, active10, 0L);
			return 19;
		}
		switch(curChar)
		{
		case 'A':
			if ((active1 & 0x8L) != 0x0L)
				return jjStartNfaWithStates_2(19, 67, 89);
			return jjMoveStringLiteralDfa20_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x4000000000000000L, active10, 0x1L);
		case 'C':
			return jjMoveStringLiteralDfa20_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x8L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x2L);
		case 'D':
			return jjMoveStringLiteralDfa20_2(active0, 0x0L, active1, 0x400000L, active2, 0x40000000000L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'H':
			if ((active4 & 0x800000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(19, 315, 89);
			break;
		case 'N':
			return jjMoveStringLiteralDfa20_2(active0, 0x0L, active1, 0x10000000000000L, active2, 0x0L, active4, 0x0L, active6, 0x10L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'O':
			return jjMoveStringLiteralDfa20_2(active0, 0x0L, active1, 0x2L, active2, 0x8L, active4, 0x0L, active6, 0x4L, active7, 0x0L, active8, 0x10600000L, active9, 0x8000000000000000L, active10, 0x0L);
		case 'R':
			return jjMoveStringLiteralDfa20_2(active0, 0x0L, active1, 0x800000000000000L, active2, 0x10L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'S':
			return jjMoveStringLiteralDfa20_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x20L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'T':
			return jjMoveStringLiteralDfa20_2(active0, 0x100000L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x40L, active8, 0x0L, active9, 0x20000000L, active10, 0x0L);
		case 'Y':
			if ((active7 & 0x10L) != 0x0L)
				return jjStartNfaWithStates_2(19, 452, 89);
			break;
		case '_':
			return jjMoveStringLiteralDfa20_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active4, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x10e0000L, active9, 0x40000000L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_2(18, active0, active1, active2, 0L, active4, 0L, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa20_2(long old0, long active0, long old1, long active1, long old2, long active2, long old4, long active4, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active4 &= old4) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_2(18, old0, old1, old2, 0L, old4, 0L, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_2(19, active0, active1, active2, 0L, 0L, 0L, active6, active7, active8, active9, active10, 0L);
			return 20;
		}
		switch(curChar)
		{
		case 'A':
			return jjMoveStringLiteralDfa21_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active6, 0x18L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'B':
			return jjMoveStringLiteralDfa21_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x40000000L, active10, 0x0L);
		case 'C':
			return jjMoveStringLiteralDfa21_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active6, 0x20L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'D':
			return jjMoveStringLiteralDfa21_2(active0, 0x0L, active1, 0x0L, active2, 0x8L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x8000000000000000L, active10, 0x0L);
		case 'E':
			if ((active1 & 0x400000L) != 0x0L)
				return jjStartNfaWithStates_2(20, 86, 89);
			else if ((active2 & 0x40000000000L) != 0x0L)
				return jjStartNfaWithStates_2(20, 170, 89);
			return jjMoveStringLiteralDfa21_2(active0, 0x0L, active1, 0x0L, active2, 0x10L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x20000000L, active10, 0x0L);
		case 'G':
			if ((active1 & 0x2L) != 0x0L)
				return jjStartNfaWithStates_2(20, 65, 89);
			break;
		case 'H':
			if ((active7 & 0x40L) != 0x0L)
				return jjStartNfaWithStates_2(20, 454, 89);
			return jjMoveStringLiteralDfa21_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x20000L, active9, 0x0L, active10, 0x2L);
		case 'M':
			return jjMoveStringLiteralDfa21_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x40000L, active9, 0x0L, active10, 0x1L);
		case 'O':
			return jjMoveStringLiteralDfa21_2(active0, 0x0L, active1, 0x800000000000000L, active2, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'S':
			return jjMoveStringLiteralDfa21_2(active0, 0x0L, active1, 0x10000000000000L, active2, 0x0L, active6, 0x4L, active7, 0x0L, active8, 0x80000L, active9, 0x0L, active10, 0x0L);
		case 'T':
			return jjMoveStringLiteralDfa21_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x1000000L, active9, 0x4000000000000000L, active10, 0x0L);
		case 'Y':
			if ((active0 & 0x100000L) != 0x0L)
				return jjStartNfaWithStates_2(20, 20, 89);
			break;
		case '_':
			return jjMoveStringLiteralDfa21_2(active0, 0x0L, active1, 0x0L, active2, 0x0L, active6, 0x0L, active7, 0x0L, active8, 0x10600000L, active9, 0x0L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_2(19, active0, active1, active2, 0L, 0L, 0L, active6, active7, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa21_2(long old0, long active0, long old1, long active1, long old2, long active2, long old6, long active6, long old7, long active7, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active6 &= old6) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_2(19, old0, old1, old2, 0L, 0L, 0L, old6, old7, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_2(20, 0L, active1, active2, 0L, 0L, 0L, active6, 0L, active8, active9, active10, 0L);
			return 21;
		}
		switch(curChar)
		{
		case 'A':
			return jjMoveStringLiteralDfa22_2(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x0L, active9, 0x4000000040000000L, active10, 0x0L);
		case 'C':
			return jjMoveStringLiteralDfa22_2(active1, 0x0L, active2, 0x10L, active6, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'D':
			if ((active9 & 0x20000000L) != 0x0L)
				return jjStartNfaWithStates_2(21, 605, 89);
			break;
		case 'E':
			if ((active2 & 0x8L) != 0x0L)
				return jjStartNfaWithStates_2(21, 131, 89);
			else if ((active9 & 0x8000000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(21, 639, 89);
			else if ((active10 & 0x1L) != 0x0L)
				return jjStartNfaWithStates_2(21, 640, 89);
			return jjMoveStringLiteralDfa22_2(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x80000L, active9, 0x0L, active10, 0x2L);
		case 'F':
			return jjMoveStringLiteralDfa22_2(active1, 0x10000000000000L, active2, 0x0L, active6, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'H':
			return jjMoveStringLiteralDfa22_2(active1, 0x0L, active2, 0x0L, active6, 0x20L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'I':
			return jjMoveStringLiteralDfa22_2(active1, 0x0L, active2, 0x0L, active6, 0x4L, active8, 0x40000L, active9, 0x0L, active10, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa22_2(active1, 0x0L, active2, 0x0L, active6, 0x10L, active8, 0x10200000L, active9, 0x0L, active10, 0x0L);
		case 'O':
			return jjMoveStringLiteralDfa22_2(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x1020000L, active9, 0x0L, active10, 0x0L);
		case 'S':
			return jjMoveStringLiteralDfa22_2(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x400000L, active9, 0x0L, active10, 0x0L);
		case 'T':
			return jjMoveStringLiteralDfa22_2(active1, 0x0L, active2, 0x0L, active6, 0x8L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa22_2(active1, 0x800000000000000L, active2, 0x0L, active6, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_2(20, 0L, active1, active2, 0L, 0L, 0L, active6, 0L, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa22_2(long old1, long active1, long old2, long active2, long old6, long active6, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active1 &= old1) | (active2 &= old2) | (active6 &= old6) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_2(20, 0L, old1, old2, 0L, 0L, 0L, old6, 0L, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_2(21, 0L, active1, active2, 0L, 0L, 0L, active6, 0L, active8, active9, active10, 0L);
			return 22;
		}
		switch(curChar)
		{
		case 'A':
			return jjMoveStringLiteralDfa23_2(active1, 0x0L, active2, 0x0L, active6, 0x8L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'C':
			return jjMoveStringLiteralDfa23_2(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x80000L, active9, 0x40000000L, active10, 0x0L);
		case 'E':
			if ((active6 & 0x10L) != 0x0L)
				return jjStartNfaWithStates_2(22, 388, 89);
			return jjMoveStringLiteralDfa23_2(active1, 0x0L, active2, 0x0L, active6, 0x20L, active8, 0x400000L, active9, 0x0L, active10, 0x0L);
		case 'I':
			return jjMoveStringLiteralDfa23_2(active1, 0x0L, active2, 0x10L, active6, 0x0L, active8, 0x200000L, active9, 0x0L, active10, 0x0L);
		case 'L':
			return jjMoveStringLiteralDfa23_2(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x0L, active9, 0x4000000000000000L, active10, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa23_2(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x2L);
		case 'N':
			return jjMoveStringLiteralDfa23_2(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x40000L, active9, 0x0L, active10, 0x0L);
		case 'O':
			return jjMoveStringLiteralDfa23_2(active1, 0x10000000000000L, active2, 0x0L, active6, 0x0L, active8, 0x10000000L, active9, 0x0L, active10, 0x0L);
		case 'P':
			return jjMoveStringLiteralDfa23_2(active1, 0x800000000000000L, active2, 0x0L, active6, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'T':
			return jjMoveStringLiteralDfa23_2(active1, 0x0L, active2, 0x0L, active6, 0x4L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa23_2(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x20000L, active9, 0x0L, active10, 0x0L);
		case '_':
			return jjMoveStringLiteralDfa23_2(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x1000000L, active9, 0x0L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_2(21, 0L, active1, active2, 0L, 0L, 0L, active6, 0L, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa23_2(long old1, long active1, long old2, long active2, long old6, long active6, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active1 &= old1) | (active2 &= old2) | (active6 &= old6) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_2(21, 0L, old1, old2, 0L, 0L, 0L, old6, 0L, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_2(22, 0L, active1, active2, 0L, 0L, 0L, active6, 0L, active8, active9, active10, 0L);
			return 23;
		}
		switch(curChar)
		{
		case 'A':
			if ((active10 & 0x2L) != 0x0L)
				return jjStartNfaWithStates_2(23, 641, 89);
			break;
		case 'C':
			return jjMoveStringLiteralDfa24_2(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x400000L, active9, 0x0L, active10, 0x0L);
		case 'I':
			return jjMoveStringLiteralDfa24_2(active1, 0x0L, active2, 0x0L, active6, 0x4L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'K':
			if ((active9 & 0x40000000L) != 0x0L)
				return jjStartNfaWithStates_2(23, 606, 89);
			break;
		case 'L':
			return jjMoveStringLiteralDfa24_2(active1, 0x0L, active2, 0x0L, active6, 0x8L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa24_2(active1, 0x0L, active2, 0x0L, active6, 0x20L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'N':
			return jjMoveStringLiteralDfa24_2(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x10200000L, active9, 0x0L, active10, 0x0L);
		case 'O':
			return jjMoveStringLiteralDfa24_2(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x80000L, active9, 0x4000000000000000L, active10, 0x0L);
		case 'R':
			if ((active8 & 0x20000L) != 0x0L)
				return jjStartNfaWithStates_2(23, 529, 89);
			return jjMoveStringLiteralDfa24_2(active1, 0x10000000000000L, active2, 0x0L, active6, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		case 'S':
			return jjMoveStringLiteralDfa24_2(active1, 0x0L, active2, 0x10L, active6, 0x0L, active8, 0x1000000L, active9, 0x0L, active10, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa24_2(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x40000L, active9, 0x0L, active10, 0x0L);
		case '_':
			return jjMoveStringLiteralDfa24_2(active1, 0x800000000000000L, active2, 0x0L, active6, 0x0L, active8, 0x0L, active9, 0x0L, active10, 0x0L);
		default :
			break;
		}
		return jjStartNfa_2(22, 0L, active1, active2, 0L, 0L, 0L, active6, 0L, active8, active9, active10, 0L);
	}
	private int jjMoveStringLiteralDfa24_2(long old1, long active1, long old2, long active2, long old6, long active6, long old8, long active8, long old9, long active9, long old10, long active10){
		if (((active1 &= old1) | (active2 &= old2) | (active6 &= old6) | (active8 &= old8) | (active9 &= old9) | (active10 &= old10)) == 0L)
			return jjStartNfa_2(22, 0L, old1, old2, 0L, 0L, 0L, old6, 0L, old8, old9, old10, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_2(23, 0L, active1, active2, 0L, 0L, 0L, active6, 0L, active8, active9, 0L, 0L);
			return 24;
		}
		switch(curChar)
		{
		case 'A':
			if ((active6 & 0x20L) != 0x0L)
				return jjStartNfaWithStates_2(24, 389, 89);
			break;
		case 'E':
			return jjMoveStringLiteralDfa25_2(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x1000000L, active9, 0x0L);
		case 'F':
			return jjMoveStringLiteralDfa25_2(active1, 0x800000000000000L, active2, 0x0L, active6, 0x0L, active8, 0x0L, active9, 0x0L);
		case 'G':
			if ((active9 & 0x4000000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(24, 638, 89);
			break;
		case 'I':
			return jjMoveStringLiteralDfa25_2(active1, 0x0L, active2, 0x10L, active6, 0x0L, active8, 0x0L, active9, 0x0L);
		case 'M':
			return jjMoveStringLiteralDfa25_2(active1, 0x10000000000000L, active2, 0x0L, active6, 0x0L, active8, 0x0L, active9, 0x0L);
		case 'N':
			return jjMoveStringLiteralDfa25_2(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x80000L, active9, 0x0L);
		case 'O':
			return jjMoveStringLiteralDfa25_2(active1, 0x0L, active2, 0x0L, active6, 0xcL, active8, 0x400000L, active9, 0x0L);
		case 'T':
			return jjMoveStringLiteralDfa25_2(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x10040000L, active9, 0x0L);
		case 'U':
			return jjMoveStringLiteralDfa25_2(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x200000L, active9, 0x0L);
		default :
			break;
		}
		return jjStartNfa_2(23, 0L, active1, active2, 0L, 0L, 0L, active6, 0L, active8, active9, 0L, 0L);
	}
	private int jjMoveStringLiteralDfa25_2(long old1, long active1, long old2, long active2, long old6, long active6, long old8, long active8, long old9, long active9){
		if (((active1 &= old1) | (active2 &= old2) | (active6 &= old6) | (active8 &= old8) | (active9 &= old9)) == 0L)
			return jjStartNfa_2(23, 0L, old1, old2, 0L, 0L, 0L, old6, 0L, old8, old9, 0L, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_2(24, 0L, active1, active2, 0L, 0L, 0L, active6, 0L, active8, 0L, 0L, 0L);
			return 25;
		}
		switch(curChar)
		{
		case 'C':
			return jjMoveStringLiteralDfa26_2(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x1000000L);
		case 'D':
			if ((active8 & 0x80000L) != 0x0L)
				return jjStartNfaWithStates_2(25, 531, 89);
			break;
		case 'E':
			if ((active8 & 0x40000L) != 0x0L)
				return jjStartNfaWithStates_2(25, 530, 89);
			break;
		case 'G':
			if ((active6 & 0x8L) != 0x0L)
				return jjStartNfaWithStates_2(25, 387, 89);
			break;
		case 'H':
			if ((active8 & 0x10000000L) != 0x0L)
				return jjStartNfaWithStates_2(25, 540, 89);
			break;
		case 'N':
			if ((active6 & 0x4L) != 0x0L)
				return jjStartNfaWithStates_2(25, 386, 89);
			return jjMoveStringLiteralDfa26_2(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x400000L);
		case 'O':
			return jjMoveStringLiteralDfa26_2(active1, 0x800000000000000L, active2, 0x10L, active6, 0x0L, active8, 0x0L);
		case 'T':
			return jjMoveStringLiteralDfa26_2(active1, 0x0L, active2, 0x0L, active6, 0x0L, active8, 0x200000L);
		case '_':
			return jjMoveStringLiteralDfa26_2(active1, 0x10000000000000L, active2, 0x0L, active6, 0x0L, active8, 0x0L);
		default :
			break;
		}
		return jjStartNfa_2(24, 0L, active1, active2, 0L, 0L, 0L, active6, 0L, active8, 0L, 0L, 0L);
	}
	private int jjMoveStringLiteralDfa26_2(long old1, long active1, long old2, long active2, long old6, long active6, long old8, long active8){
		if (((active1 &= old1) | (active2 &= old2) | (active6 &= old6) | (active8 &= old8)) == 0L)
			return jjStartNfa_2(24, 0L, old1, old2, 0L, 0L, 0L, old6, 0L, old8, 0L, 0L, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_2(25, 0L, active1, active2, 0L, 0L, 0L, 0L, 0L, active8, 0L, 0L, 0L);
			return 26;
		}
		switch(curChar)
		{
		case 'D':
			if ((active8 & 0x400000L) != 0x0L)
				return jjStartNfaWithStates_2(26, 534, 89);
			break;
		case 'E':
			if ((active8 & 0x200000L) != 0x0L)
				return jjStartNfaWithStates_2(26, 533, 89);
			break;
		case 'G':
			return jjMoveStringLiteralDfa27_2(active1, 0x10000000000000L, active2, 0x0L, active8, 0x0L);
		case 'N':
			if ((active2 & 0x10L) != 0x0L)
				return jjStartNfaWithStates_2(26, 132, 89);
			break;
		case 'O':
			return jjMoveStringLiteralDfa27_2(active1, 0x0L, active2, 0x0L, active8, 0x1000000L);
		case 'R':
			return jjMoveStringLiteralDfa27_2(active1, 0x800000000000000L, active2, 0x0L, active8, 0x0L);
		default :
			break;
		}
		return jjStartNfa_2(25, 0L, active1, active2, 0L, 0L, 0L, 0L, 0L, active8, 0L, 0L, 0L);
	}
	private int jjMoveStringLiteralDfa27_2(long old1, long active1, long old2, long active2, long old8, long active8){
		if (((active1 &= old1) | (active2 &= old2) | (active8 &= old8)) == 0L)
			return jjStartNfa_2(25, 0L, old1, old2, 0L, 0L, 0L, 0L, 0L, old8, 0L, 0L, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_2(26, 0L, active1, 0L, 0L, 0L, 0L, 0L, 0L, active8, 0L, 0L, 0L);
			return 27;
		}
		switch(curChar)
		{
		case 'N':
			return jjMoveStringLiteralDfa28_2(active1, 0x0L, active8, 0x1000000L);
		case 'R':
			return jjMoveStringLiteralDfa28_2(active1, 0x10000000000000L, active8, 0x0L);
		case '_':
			return jjMoveStringLiteralDfa28_2(active1, 0x800000000000000L, active8, 0x0L);
		default :
			break;
		}
		return jjStartNfa_2(26, 0L, active1, 0L, 0L, 0L, 0L, 0L, 0L, active8, 0L, 0L, 0L);
	}
	private int jjMoveStringLiteralDfa28_2(long old1, long active1, long old8, long active8){
		if (((active1 &= old1) | (active8 &= old8)) == 0L)
			return jjStartNfa_2(26, 0L, old1, 0L, 0L, 0L, 0L, 0L, 0L, old8, 0L, 0L, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_2(27, 0L, active1, 0L, 0L, 0L, 0L, 0L, 0L, active8, 0L, 0L, 0L);
			return 28;
		}
		switch(curChar)
		{
		case 'D':
			if ((active8 & 0x1000000L) != 0x0L)
				return jjStartNfaWithStates_2(28, 536, 89);
			break;
		case 'O':
			return jjMoveStringLiteralDfa29_2(active1, 0x10000000000000L, active8, 0x0L);
		case 'T':
			return jjMoveStringLiteralDfa29_2(active1, 0x800000000000000L, active8, 0x0L);
		default :
			break;
		}
		return jjStartNfa_2(27, 0L, active1, 0L, 0L, 0L, 0L, 0L, 0L, active8, 0L, 0L, 0L);
	}
	private int jjMoveStringLiteralDfa29_2(long old1, long active1, long old8, long active8){
		if (((active1 &= old1) | (active8 &= old8)) == 0L)
			return jjStartNfa_2(27, 0L, old1, 0L, 0L, 0L, 0L, 0L, 0L, old8, 0L, 0L, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_2(28, 0L, active1, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
			return 29;
		}
		switch(curChar)
		{
		case 'U':
			return jjMoveStringLiteralDfa30_2(active1, 0x10000000000000L);
		case 'Y':
			return jjMoveStringLiteralDfa30_2(active1, 0x800000000000000L);
		default :
			break;
		}
		return jjStartNfa_2(28, 0L, active1, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
	}
	private int jjMoveStringLiteralDfa30_2(long old1, long active1){
		if (((active1 &= old1)) == 0L)
			return jjStartNfa_2(28, 0L, old1, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_2(29, 0L, active1, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
			return 30;
		}
		switch(curChar)
		{
		case 'P':
			if ((active1 & 0x10000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(30, 116, 89);
			return jjMoveStringLiteralDfa31_2(active1, 0x800000000000000L);
		default :
			break;
		}
		return jjStartNfa_2(29, 0L, active1, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
	}
	private int jjMoveStringLiteralDfa31_2(long old1, long active1){
		if (((active1 &= old1)) == 0L)
			return jjStartNfa_2(29, 0L, old1, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) {
			jjStopStringLiteralDfa_2(30, 0L, active1, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
			return 31;
		}
		switch(curChar)
		{
		case 'E':
			if ((active1 & 0x800000000000000L) != 0x0L)
				return jjStartNfaWithStates_2(31, 123, 89);
			break;
		default :
			break;
		}
		return jjStartNfa_2(30, 0L, active1, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
	}
	private int jjStartNfaWithStates_2(int pos, int kind, int state)
	{
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		try { curChar = input_stream.readChar(); }
		catch(java.io.IOException e) { return pos + 1; }
		return jjMoveNfa_2(state, pos + 1);
	}
	private int jjMoveNfa_2(int startState, int curPos)
	{
		int startsAt = 0;
		jjnewStateCnt = 89;
		int i = 1;
		jjstateSet[0] = startState;
		int kind = 0x7fffffff;
		for (;;)
		{
			if (++jjround == 0x7fffffff)
				ReInitRounds();
			if (curChar < 64)
			{
				long l = 1L << curChar;
				do
				{
					switch(jjstateSet[--i])
					{
					case 84:
						if (curChar == 47)
						{
							if (kind > 730)
								kind = 730;
							{ jjCheckNAddStates(0, 2); }
						}
						else if (curChar == 42)
							jjstateSet[jjnewStateCnt++] = 85;
						if (curChar == 42)
							jjstateSet[jjnewStateCnt++] = 82;
						break;
					case 91:
						if ((0x7ff601000000000L & l) != 0x0L)
						{ jjCheckNAddTwoStates(27, 28); }
						else if (curChar == 39)
						{ jjCheckNAddStates(3, 5); }
						if ((0x3ff001000000000L & l) != 0x0L)
						{
							if (kind > 738)
								kind = 738;
							{ jjCheckNAdd(33); }
						}
						if ((0x3ff001000000000L & l) != 0x0L)
						{ jjCheckNAddStates(6, 8); }
						if (curChar == 36)
						{ jjCheckNAdd(29); }
						break;
					case 55:
						if ((0xffffff7fffffffffL & l) != 0x0L)
						{ jjCheckNAddStates(9, 11); }
						else if (curChar == 39)
						{
							if (kind > 681)
								kind = 681;
						}
						if ((0xfc00f7faffffc9ffL & l) != 0x0L)
							jjstateSet[jjnewStateCnt++] = 56;
						if (curChar == 39)
							jjstateSet[jjnewStateCnt++] = 52;
						break;
					case 1:
						if ((0x7ff601000000000L & l) != 0x0L)
						{ jjCheckNAddTwoStates(27, 28); }
						else if (curChar == 39)
						{ jjCheckNAddStates(12, 14); }
						if ((0x3ff001000000000L & l) != 0x0L)
						{
							if (kind > 738)
								kind = 738;
							{ jjCheckNAdd(33); }
						}
						if ((0x3ff001000000000L & l) != 0x0L)
						{ jjCheckNAddStates(6, 8); }
						if (curChar == 36)
						{ jjCheckNAdd(29); }
						break;
					case 93:
						if ((0x7ff601000000000L & l) != 0x0L)
						{ jjCheckNAddTwoStates(27, 28); }
						if (curChar == 36)
						{ jjCheckNAdd(29); }
						break;
					case 0:
						if ((0x3ff001000000000L & l) != 0x0L)
						{ jjCheckNAddStates(6, 8); }
						else if (curChar == 47)
						{ jjAddStates(15, 17); }
						else if (curChar == 39)
						{ jjCheckNAddStates(18, 21); }
						else if (curChar == 46)
						{ jjCheckNAddTwoStates(48, 49); }
						else if (curChar == 7)
						{
							if (kind > 742)
								kind = 742;
						}
						else if (curChar == 45)
							jjstateSet[jjnewStateCnt++] = 15;
						if ((0x3ff000000000000L & l) != 0x0L)
						{
							if (kind > 674)
								kind = 674;
							{ jjCheckNAddStates(22, 28); }
						}
						else if (curChar == 36)
						{
							if (kind > 738)
								kind = 738;
							{ jjCheckNAdd(33); }
						}
						break;
					case 90:
						if ((0x3ff000000000000L & l) != 0x0L)
						{
							if (kind > 676)
								kind = 676;
							{ jjCheckNAdd(49); }
						}
						if ((0x3ff000000000000L & l) != 0x0L)
						{ jjCheckNAddTwoStates(48, 38); }
						break;
					case 92:
						if (curChar == 32)
						{ jjCheckNAddTwoStates(78, 79); }
						if (curChar == 32)
						{ jjCheckNAddTwoStates(75, 76); }
						if (curChar == 32)
						{ jjCheckNAddTwoStates(73, 74); }
						if (curChar == 32)
						{ jjCheckNAddTwoStates(71, 72); }
						break;
					case 58:
						if ((0x7ff601000000000L & l) != 0x0L)
						{ jjCheckNAddTwoStates(27, 28); }
						else if (curChar == 38)
							jjstateSet[jjnewStateCnt++] = 65;
						if ((0x3ff001000000000L & l) != 0x0L)
						{
							if (kind > 738)
								kind = 738;
							{ jjCheckNAdd(33); }
						}
						else if (curChar == 38)
							jjstateSet[jjnewStateCnt++] = 59;
						if ((0x3ff001000000000L & l) != 0x0L)
						{ jjCheckNAddStates(6, 8); }
						if (curChar == 36)
						{ jjCheckNAdd(29); }
						break;
					case 82:
						if (curChar == 42)
							jjstateSet[jjnewStateCnt++] = 86;
						else if (curChar == 43)
							jjstateSet[jjnewStateCnt++] = 83;
						break;
					case 89:
						if ((0x7ff601000000000L & l) != 0x0L)
						{ jjCheckNAddTwoStates(27, 28); }
						if ((0x3ff001000000000L & l) != 0x0L)
						{
							if (kind > 738)
								kind = 738;
							{ jjCheckNAdd(33); }
						}
						if ((0x3ff001000000000L & l) != 0x0L)
						{ jjCheckNAddStates(6, 8); }
						if (curChar == 36)
						{ jjCheckNAdd(29); }
						break;
					case 2:
						if ((0xffffff7fffffffffL & l) != 0x0L)
						{ jjCheckNAddStates(12, 14); }
						break;
					case 3:
						if (curChar == 39)
						{ jjCheckNAddStates(12, 14); }
						break;
					case 4:
						if (curChar == 39)
							jjstateSet[jjnewStateCnt++] = 3;
						break;
					case 5:
						if (curChar == 39 && kind > 680)
							kind = 680;
						break;
					case 7:
						if ((0x3ff000000000000L & l) != 0x0L)
						{ jjCheckNAddTwoStates(8, 9); }
						break;
					case 8:
						if ((0x7ff600000000000L & l) != 0x0L)
						{ jjCheckNAddTwoStates(8, 9); }
						break;
					case 9:
					case 11:
						if (curChar == 39)
						{ jjCheckNAddStates(3, 5); }
						break;
					case 10:
						if ((0xffffff7fffffffffL & l) != 0x0L)
						{ jjCheckNAddStates(3, 5); }
						break;
					case 12:
						if (curChar == 39)
							jjstateSet[jjnewStateCnt++] = 11;
						break;
					case 13:
						if (curChar == 39 && kind > 682)
							kind = 682;
						break;
					case 15:
						if (curChar != 45)
							break;
						if (kind > 730)
							kind = 730;
						{ jjCheckNAddStates(0, 2); }
						break;
					case 16:
						if ((0xffffffffffffdbffL & l) == 0x0L)
							break;
						if (kind > 730)
							kind = 730;
						{ jjCheckNAddStates(0, 2); }
						break;
					case 17:
						if ((0x2400L & l) != 0x0L && kind > 730)
							kind = 730;
						break;
					case 18:
						if (curChar == 10 && kind > 730)
							kind = 730;
						break;
					case 19:
						if (curChar == 13)
							jjstateSet[jjnewStateCnt++] = 18;
						break;
					case 20:
						if (curChar == 45)
							jjstateSet[jjnewStateCnt++] = 15;
						break;
					case 22:
						if ((0xffffffffffffdbffL & l) != 0x0L)
						{ jjAddStates(29, 31); }
						break;
					case 26:
						if ((0x3ff001000000000L & l) != 0x0L)
						{ jjCheckNAddStates(6, 8); }
						break;
					case 27:
						if ((0x7ff601000000000L & l) != 0x0L)
						{ jjCheckNAddTwoStates(27, 28); }
						break;
					case 28:
						if (curChar == 36)
						{ jjCheckNAdd(29); }
						break;
					case 29:
						if (curChar != 36)
							break;
						if (kind > 737)
							kind = 737;
						{ jjCheckNAddTwoStates(29, 30); }
						break;
					case 30:
						if (curChar == 36)
						{ jjCheckNAdd(31); }
						break;
					case 31:
						if ((0x3ff001000000000L & l) == 0x0L)
							break;
						if (kind > 737)
							kind = 737;
						{ jjCheckNAdd(31); }
						break;
					case 32:
						if (curChar != 36)
							break;
						if (kind > 738)
							kind = 738;
						{ jjCheckNAdd(33); }
						break;
					case 33:
						if ((0x3ff001000000000L & l) == 0x0L)
							break;
						if (kind > 738)
							kind = 738;
						{ jjCheckNAdd(33); }
						break;
					case 34:
						if (curChar == 7 && kind > 742)
							kind = 742;
						break;
					case 35:
						if ((0x3ff000000000000L & l) == 0x0L)
							break;
						if (kind > 674)
							kind = 674;
						{ jjCheckNAddStates(22, 28); }
						break;
					case 36:
						if ((0x3ff000000000000L & l) == 0x0L)
							break;
						if (kind > 674)
							kind = 674;
						{ jjCheckNAdd(36); }
						break;
					case 37:
						if ((0x3ff000000000000L & l) != 0x0L)
						{ jjCheckNAddTwoStates(37, 38); }
						break;
					case 39:
						if ((0x280000000000L & l) != 0x0L)
						{ jjCheckNAdd(40); }
						break;
					case 40:
						if ((0x3ff000000000000L & l) == 0x0L)
							break;
						if (kind > 675)
							kind = 675;
						{ jjCheckNAdd(40); }
						break;
					case 41:
						if (curChar == 46)
						{ jjCheckNAddTwoStates(42, 38); }
						break;
					case 42:
						if ((0x3ff000000000000L & l) != 0x0L)
						{ jjCheckNAddTwoStates(42, 38); }
						break;
					case 43:
						if (curChar != 46)
							break;
						if (kind > 676)
							kind = 676;
						{ jjCheckNAdd(44); }
						break;
					case 44:
						if ((0x3ff000000000000L & l) == 0x0L)
							break;
						if (kind > 676)
							kind = 676;
						{ jjCheckNAdd(44); }
						break;
					case 45:
						if ((0x3ff000000000000L & l) == 0x0L)
							break;
						if (kind > 676)
							kind = 676;
						{ jjCheckNAddStates(32, 34); }
						break;
					case 46:
						if ((0x3ff000000000000L & l) != 0x0L)
						{ jjCheckNAddStates(35, 38); }
						break;
					case 47:
						if (curChar == 46)
						{ jjCheckNAddTwoStates(48, 49); }
						break;
					case 48:
						if ((0x3ff000000000000L & l) != 0x0L)
						{ jjCheckNAddTwoStates(48, 38); }
						break;
					case 49:
						if ((0x3ff000000000000L & l) == 0x0L)
							break;
						if (kind > 676)
							kind = 676;
						{ jjCheckNAdd(49); }
						break;
					case 50:
						if (curChar == 39)
						{ jjCheckNAddStates(18, 21); }
						break;
					case 51:
						if ((0xffffff7fffffffffL & l) != 0x0L)
						{ jjCheckNAddStates(9, 11); }
						break;
					case 52:
						if (curChar == 39)
						{ jjCheckNAddStates(9, 11); }
						break;
					case 53:
						if (curChar == 39)
							jjstateSet[jjnewStateCnt++] = 52;
						break;
					case 54:
						if (curChar == 39 && kind > 681)
							kind = 681;
						break;
					case 56:
						if (curChar == 39 && kind > 685)
							kind = 685;
						break;
					case 59:
					case 61:
						if (curChar == 39)
						{ jjCheckNAddStates(39, 41); }
						break;
					case 60:
						if ((0xffffff7fffffffffL & l) != 0x0L)
						{ jjCheckNAddStates(39, 41); }
						break;
					case 62:
						if (curChar == 39)
							jjstateSet[jjnewStateCnt++] = 61;
						break;
					case 63:
						if (curChar == 39 && kind > 683)
							kind = 683;
						break;
					case 64:
						if (curChar == 38)
							jjstateSet[jjnewStateCnt++] = 65;
						break;
					case 65:
						if (curChar == 34)
						{ jjCheckNAddTwoStates(66, 68); }
						break;
					case 66:
						if ((0xfffffffbffffdbffL & l) != 0x0L)
						{ jjCheckNAddStates(42, 44); }
						break;
					case 67:
						if (curChar == 34)
						{ jjCheckNAddStates(42, 44); }
						break;
					case 68:
						if (curChar == 34)
							jjstateSet[jjnewStateCnt++] = 67;
						break;
					case 69:
						if (curChar == 34 && kind > 739)
							kind = 739;
						break;
					case 71:
						if (curChar == 32)
						{ jjCheckNAddTwoStates(71, 72); }
						break;
					case 73:
						if (curChar == 32)
						{ jjCheckNAddTwoStates(73, 74); }
						break;
					case 75:
						if (curChar == 32)
						{ jjCheckNAddTwoStates(75, 76); }
						break;
					case 78:
						if (curChar == 32)
						{ jjCheckNAddTwoStates(78, 79); }
						break;
					case 81:
						if (curChar == 47)
						{ jjAddStates(15, 17); }
						break;
					case 83:
						if ((0xffff7fffffffffffL & l) != 0x0L && kind > 726)
							kind = 726;
						break;
					case 85:
						if (curChar == 42)
							jjstateSet[jjnewStateCnt++] = 86;
						break;
					case 86:
						if ((0xffff7fffffffffffL & l) != 0x0L && kind > 728)
							kind = 728;
						break;
					case 87:
						if (curChar == 42)
							jjstateSet[jjnewStateCnt++] = 85;
						break;
					case 88:
						if (curChar != 47)
							break;
						if (kind > 730)
							kind = 730;
						{ jjCheckNAddStates(0, 2); }
						break;
					default : break;
					}
				} while(i != startsAt);
			}
			else if (curChar < 128)
			{
				long l = 1L << (curChar & 077);
				do
				{
					switch(jjstateSet[--i])
					{
					case 91:
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{
							if (kind > 738)
								kind = 738;
							{ jjCheckNAdd(33); }
						}
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{ jjCheckNAddTwoStates(27, 28); }
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{ jjCheckNAddStates(6, 8); }
						break;
					case 55:
					{ jjCheckNAddStates(9, 11); }
					if ((0xffffff81ffffff81L & l) != 0x0L)
						jjstateSet[jjnewStateCnt++] = 56;
					break;
					case 1:
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{
							if (kind > 738)
								kind = 738;
							{ jjCheckNAdd(33); }
						}
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{ jjCheckNAddTwoStates(27, 28); }
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{ jjCheckNAddStates(6, 8); }
						break;
					case 93:
					case 27:
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{ jjCheckNAddTwoStates(27, 28); }
						break;
					case 0:
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{
							if (kind > 738)
								kind = 738;
							{ jjCheckNAdd(33); }
						}
						else if (curChar == 123)
						{ jjAddStates(45, 52); }
						else if (curChar == 96)
						{ jjCheckNAddTwoStates(22, 24); }
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{ jjCheckNAddStates(6, 8); }
						if ((0x100000001000000L & l) != 0x0L)
							jjstateSet[jjnewStateCnt++] = 1;
						else if (curChar == 85)
						{ jjAddStates(53, 54); }
						else if (curChar == 78)
						{ jjCheckNAdd(9); }
						else if (curChar == 95)
							jjstateSet[jjnewStateCnt++] = 7;
						break;
					case 92:
						if ((0x4000000040L & l) != 0x0L)
							jjstateSet[jjnewStateCnt++] = 80;
						else if ((0x10000000100000L & l) != 0x0L)
							jjstateSet[jjnewStateCnt++] = 77;
						else if ((0x1000000010L & l) != 0x0L)
						{
							if (kind > 688)
								kind = 688;
						}
						if ((0x10000000100000L & l) != 0x0L)
						{
							if (kind > 689)
								kind = 689;
						}
						break;
					case 58:
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{
							if (kind > 738)
								kind = 738;
							{ jjCheckNAdd(33); }
						}
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{ jjCheckNAddTwoStates(27, 28); }
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{ jjCheckNAddStates(6, 8); }
						break;
					case 89:
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{
							if (kind > 738)
								kind = 738;
							{ jjCheckNAdd(33); }
						}
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{ jjCheckNAddTwoStates(27, 28); }
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{ jjCheckNAddStates(6, 8); }
						break;
					case 2:
					{ jjAddStates(12, 14); }
					break;
					case 6:
						if (curChar == 95)
							jjstateSet[jjnewStateCnt++] = 7;
						break;
					case 7:
						if ((0x7fffffe07fffffeL & l) != 0x0L)
						{ jjCheckNAddTwoStates(8, 9); }
						break;
					case 8:
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{ jjCheckNAddTwoStates(8, 9); }
						break;
					case 10:
					{ jjAddStates(3, 5); }
					break;
					case 14:
						if (curChar == 78)
						{ jjCheckNAdd(9); }
						break;
					case 16:
						if (kind > 730)
							kind = 730;
						{ jjAddStates(0, 2); }
						break;
					case 21:
						if (curChar == 96)
						{ jjCheckNAddTwoStates(22, 24); }
						break;
					case 22:
						if ((0xfffffffeffffffffL & l) != 0x0L)
						{ jjCheckNAddStates(29, 31); }
						break;
					case 23:
						if (curChar == 96)
						{ jjCheckNAddStates(29, 31); }
						break;
					case 24:
						if (curChar == 96)
							jjstateSet[jjnewStateCnt++] = 23;
						break;
					case 25:
						if (curChar == 96 && kind > 736)
							kind = 736;
						break;
					case 26:
						if ((0x7fffffe87fffffeL & l) != 0x0L)
						{ jjCheckNAddStates(6, 8); }
						break;
					case 29:
						if ((0x7fffffe87fffffeL & l) == 0x0L)
							break;
						if (kind > 737)
							kind = 737;
						{ jjAddStates(55, 56); }
						break;
					case 31:
						if ((0x7fffffe87fffffeL & l) == 0x0L)
							break;
						if (kind > 737)
							kind = 737;
						jjstateSet[jjnewStateCnt++] = 31;
						break;
					case 32:
						if ((0x7fffffe87fffffeL & l) == 0x0L)
							break;
						if (kind > 738)
							kind = 738;
						{ jjCheckNAdd(33); }
						break;
					case 33:
						if ((0x7fffffe87fffffeL & l) == 0x0L)
							break;
						if (kind > 738)
							kind = 738;
						{ jjCheckNAdd(33); }
						break;
					case 38:
						if ((0x2000000020L & l) != 0x0L)
						{ jjAddStates(57, 58); }
						break;
					case 51:
					{ jjCheckNAddStates(9, 11); }
					break;
					case 57:
						if (curChar == 85)
						{ jjAddStates(53, 54); }
						break;
					case 60:
					{ jjAddStates(39, 41); }
					break;
					case 66:
					{ jjAddStates(42, 44); }
					break;
					case 70:
						if (curChar == 123)
						{ jjAddStates(45, 52); }
						break;
					case 72:
						if ((0x1000000010L & l) != 0x0L && kind > 688)
							kind = 688;
						break;
					case 74:
						if ((0x10000000100000L & l) != 0x0L && kind > 689)
							kind = 689;
						break;
					case 76:
						if ((0x10000000100000L & l) != 0x0L)
							jjstateSet[jjnewStateCnt++] = 77;
						break;
					case 77:
						if ((0x8000000080000L & l) != 0x0L && kind > 690)
							kind = 690;
						break;
					case 79:
						if ((0x4000000040L & l) != 0x0L)
							jjstateSet[jjnewStateCnt++] = 80;
						break;
					case 80:
						if ((0x400000004000L & l) != 0x0L && kind > 691)
							kind = 691;
						break;
					case 83:
						if (kind > 726)
							kind = 726;
						break;
					case 86:
						if (kind > 728)
							kind = 728;
						break;
					default : break;
					}
				} while(i != startsAt);
			}
			else
			{
				int hiByte = (curChar >> 8);
				int i1 = hiByte >> 6;
				long l1 = 1L << (hiByte & 077);
				int i2 = (curChar & 0xff) >> 6;
				long l2 = 1L << (curChar & 077);
				do
				{
					switch(jjstateSet[--i])
					{
					case 91:
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{ jjCheckNAddStates(6, 8); }
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{ jjCheckNAddTwoStates(27, 28); }
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{
							if (kind > 738)
								kind = 738;
							{ jjCheckNAdd(33); }
						}
						break;
					case 55:
						if (jjCanMove_0(hiByte, i1, i2, l1, l2))
						{ jjCheckNAddStates(9, 11); }
						if (jjCanMove_0(hiByte, i1, i2, l1, l2))
							jjstateSet[jjnewStateCnt++] = 56;
						break;
					case 1:
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{ jjCheckNAddStates(6, 8); }
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{ jjCheckNAddTwoStates(27, 28); }
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{
							if (kind > 738)
								kind = 738;
							{ jjCheckNAdd(33); }
						}
						break;
					case 93:
					case 27:
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{ jjCheckNAddTwoStates(27, 28); }
						break;
					case 0:
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{ jjCheckNAddStates(6, 8); }
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{
							if (kind > 738)
								kind = 738;
							{ jjCheckNAdd(33); }
						}
						break;
					case 58:
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{ jjCheckNAddStates(6, 8); }
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{ jjCheckNAddTwoStates(27, 28); }
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{
							if (kind > 738)
								kind = 738;
							{ jjCheckNAdd(33); }
						}
						break;
					case 89:
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{ jjCheckNAddStates(6, 8); }
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{ jjCheckNAddTwoStates(27, 28); }
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{
							if (kind > 738)
								kind = 738;
							{ jjCheckNAdd(33); }
						}
						break;
					case 2:
						if (jjCanMove_0(hiByte, i1, i2, l1, l2))
						{ jjAddStates(12, 14); }
						break;
					case 10:
						if (jjCanMove_0(hiByte, i1, i2, l1, l2))
						{ jjAddStates(3, 5); }
						break;
					case 16:
						if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
							break;
						if (kind > 730)
							kind = 730;
						{ jjAddStates(0, 2); }
						break;
					case 22:
						if (jjCanMove_2(hiByte, i1, i2, l1, l2))
						{ jjAddStates(29, 31); }
						break;
					case 26:
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
						{ jjCheckNAddStates(6, 8); }
						break;
					case 29:
						if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
							break;
						if (kind > 737)
							kind = 737;
						{ jjAddStates(55, 56); }
						break;
					case 31:
						if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
							break;
						if (kind > 737)
							kind = 737;
						jjstateSet[jjnewStateCnt++] = 31;
						break;
					case 32:
						if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
							break;
						if (kind > 738)
							kind = 738;
						{ jjCheckNAdd(33); }
						break;
					case 33:
						if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
							break;
						if (kind > 738)
							kind = 738;
						{ jjCheckNAdd(33); }
						break;
					case 51:
						if (jjCanMove_0(hiByte, i1, i2, l1, l2))
						{ jjCheckNAddStates(9, 11); }
						break;
					case 60:
						if (jjCanMove_0(hiByte, i1, i2, l1, l2))
						{ jjAddStates(39, 41); }
						break;
					case 66:
						if (jjCanMove_2(hiByte, i1, i2, l1, l2))
						{ jjAddStates(42, 44); }
						break;
					case 83:
						if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 726)
							kind = 726;
						break;
					case 86:
						if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 728)
							kind = 728;
						break;
					default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
					}
				} while(i != startsAt);
			}
			if (kind != 0x7fffffff)
			{
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			i = jjnewStateCnt;
			jjnewStateCnt = startsAt;
			startsAt = 89 - jjnewStateCnt;
			if (i == startsAt)
				return curPos;
			try { curChar = input_stream.readChar(); }
			catch(java.io.IOException e) { return curPos; }
		}
	}
	private int jjMoveStringLiteralDfa0_3()
	{
		return jjMoveNfa_3(1, 0);
	}
	private int jjMoveNfa_3(int startState, int curPos)
	{
		int startsAt = 0;
		jjnewStateCnt = 2;
		int i = 1;
		jjstateSet[0] = startState;
		int kind = 0x7fffffff;
		for (;;)
		{
			if (++jjround == 0x7fffffff)
				ReInitRounds();
			if (curChar < 64)
			{
				long l = 1L << curChar;
				do
				{
					switch(jjstateSet[--i])
					{
					case 0:
						if (curChar == 47)
							kind = 731;
						break;
					case 1:
						if (curChar == 42)
							jjstateSet[jjnewStateCnt++] = 0;
						break;
					default : break;
					}
				} while(i != startsAt);
			}
			else if (curChar < 128)
			{
				long l = 1L << (curChar & 077);
				do
				{
					switch(jjstateSet[--i])
					{
					default : break;
					}
				} while(i != startsAt);
			}
			else
			{
				int hiByte = (curChar >> 8);
				int i1 = hiByte >> 6;
			long l1 = 1L << (hiByte & 077);
			int i2 = (curChar & 0xff) >> 6;
			long l2 = 1L << (curChar & 077);
			do
			{
				switch(jjstateSet[--i])
				{
				default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
				}
			} while(i != startsAt);
			}
			if (kind != 0x7fffffff)
			{
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			i = jjnewStateCnt;
			jjnewStateCnt = startsAt;
			startsAt = 2 - jjnewStateCnt;
			if (i == startsAt)
				return curPos;
			try { curChar = input_stream.readChar(); }
			catch(java.io.IOException e) { return curPos; }
		}
	}
	private int jjMoveStringLiteralDfa0_4()
	{
		return jjMoveNfa_4(1, 0);
	}
	private int jjMoveNfa_4(int startState, int curPos)
	{
		int startsAt = 0;
		jjnewStateCnt = 2;
		int i = 1;
		jjstateSet[0] = startState;
		int kind = 0x7fffffff;
		for (;;)
		{
			if (++jjround == 0x7fffffff)
				ReInitRounds();
			if (curChar < 64)
			{
				long l = 1L << curChar;
				do
				{
					switch(jjstateSet[--i])
					{
					case 0:
						if (curChar == 47)
							kind = 732;
						break;
					case 1:
						if (curChar == 42)
							jjstateSet[jjnewStateCnt++] = 0;
						break;
					default : break;
					}
				} while(i != startsAt);
			}
			else if (curChar < 128)
			{
				long l = 1L << (curChar & 077);
				do
				{
					switch(jjstateSet[--i])
					{
					default : break;
					}
				} while(i != startsAt);
			}
			else
			{
				int hiByte = (curChar >> 8);
				int i1 = hiByte >> 6;
			long l1 = 1L << (hiByte & 077);
			int i2 = (curChar & 0xff) >> 6;
			long l2 = 1L << (curChar & 077);
			do
			{
				switch(jjstateSet[--i])
				{
				default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
				}
			} while(i != startsAt);
			}
			if (kind != 0x7fffffff)
			{
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			i = jjnewStateCnt;
			jjnewStateCnt = startsAt;
			startsAt = 2 - jjnewStateCnt;
			if (i == startsAt)
				return curPos;
			try { curChar = input_stream.readChar(); }
			catch(java.io.IOException e) { return curPos; }
		}
	}

	/** Token literal values. */
	public static final String[] jjstrLiteralImages = {
			"", "\101", "\101\102\123", "\101\102\123\105\116\124",
			"\101\102\123\117\114\125\124\105", "\101\103\124\111\117\116", "\101\104\101", "\101\104\104",
			"\101\104\115\111\116", "\101\106\124\105\122", "\101\114\114", "\101\114\114\117\103\101\124\105",
			"\101\114\114\117\127", "\101\114\124\105\122", "\101\114\127\101\131\123", "\101\116\104",
			"\101\116\131", "\101\120\120\114\131", "\101\122\105", "\101\122\122\101\131",
			"\101\122\122\101\131\137\115\101\130\137\103\101\122\104\111\116\101\114\111\124\131", "\101\123", "\101\123\103", "\101\123\105\116\123\111\124\111\126\105",
			"\101\123\123\105\122\124\111\117\116", "\101\123\123\111\107\116\115\105\116\124",
			"\101\123\131\115\115\105\124\122\111\103", "\101\124", "\101\124\117\115\111\103", "\101\124\124\122\111\102\125\124\105",
			"\101\124\124\122\111\102\125\124\105\123", "\101\125\124\110\117\122\111\132\101\124\111\117\116", "\101\126\107",
			"\102\105\106\117\122\105", "\102\105\107\111\116", "\102\105\107\111\116\137\106\122\101\115\105",
			"\102\105\107\111\116\137\120\101\122\124\111\124\111\117\116", "\102\105\122\116\117\125\114\114\111", "\102\105\124\127\105\105\116",
			"\102\111\107\111\116\124", "\102\111\116\101\122\131", "\102\111\124", "\102\114\117\102",
			"\102\117\117\114\105\101\116", "\102\117\124\110", "\102\122\105\101\104\124\110", "\102\131", "\103",
			"\103\101\114\114", "\103\101\114\114\105\104", "\103\101\122\104\111\116\101\114\111\124\131",
			"\103\101\123\103\101\104\105", "\103\101\123\103\101\104\105\104", "\103\101\123\105", "\103\101\123\124",
			"\103\101\124\101\114\117\107", "\103\101\124\101\114\117\107\137\116\101\115\105", "\103\105\111\114",
			"\103\105\111\114\111\116\107", "\103\105\116\124\125\122\131", "\103\110\101\111\116", "\103\110\101\122",
			"\103\110\101\122\137\114\105\116\107\124\110", "\103\110\101\122\101\103\124\105\122",
			"\103\110\101\122\101\103\124\105\122\137\114\105\116\107\124\110",
			"\103\110\101\122\101\103\124\105\122\137\123\105\124\137\103\101\124\101\114\117\107", "\103\110\101\122\101\103\124\105\122\137\123\105\124\137\116\101\115\105",
			"\103\110\101\122\101\103\124\105\122\137\123\105\124\137\123\103\110\105\115\101", "\103\110\101\122\101\103\124\105\122\111\123\124\111\103\123",
			"\103\110\101\122\101\103\124\105\122\123", "\103\110\105\103\113", "\103\114\101\123\123\111\106\111\105\122",
			"\103\114\101\123\123\137\117\122\111\107\111\116", "\103\114\117\102", "\103\114\117\123\105", "\103\117\101\114\105\123\103\105",
			"\103\117\102\117\114", "\103\117\114\114\101\124\105", "\103\117\114\114\101\124\111\117\116",
			"\103\117\114\114\101\124\111\117\116\137\103\101\124\101\114\117\107", "\103\117\114\114\101\124\111\117\116\137\116\101\115\105",
			"\103\117\114\114\101\124\111\117\116\137\123\103\110\105\115\101", "\103\117\114\114\105\103\124", "\103\117\114\125\115\116",
			"\103\117\114\125\115\116\137\116\101\115\105", "\103\117\115\115\101\116\104\137\106\125\116\103\124\111\117\116",
			"\103\117\115\115\101\116\104\137\106\125\116\103\124\111\117\116\137\103\117\104\105", "\103\117\115\115\111\124", "\103\117\115\115\111\124\124\105\104",
			"\103\117\116\104\111\124\111\117\116", "\103\117\116\104\111\124\111\117\116\101\114",
			"\103\117\116\104\111\124\111\117\116\137\116\125\115\102\105\122", "\103\117\116\116\105\103\124", "\103\117\116\116\105\103\124\111\117\116",
			"\103\117\116\116\105\103\124\111\117\116\137\116\101\115\105", "\103\117\116\123\124\122\101\111\116\124",
			"\103\117\116\123\124\122\101\111\116\124\137\103\101\124\101\114\117\107", "\103\117\116\123\124\122\101\111\116\124\137\116\101\115\105",
			"\103\117\116\123\124\122\101\111\116\124\137\123\103\110\105\115\101", "\103\117\116\123\124\122\101\111\116\124\123",
			"\103\117\116\123\124\122\125\103\124\117\122", "\103\117\116\124\101\111\116\123", "\103\117\116\124\111\116\125\105",
			"\103\117\116\126\105\122\124", "\103\117\122\122", "\103\117\122\122\105\123\120\117\116\104\111\116\107",
			"\103\117\125\116\124", "\103\117\126\101\122\137\120\117\120",
			"\103\117\126\101\122\137\123\101\115\120", "\103\122\105\101\124\105", "\103\122\117\123\123", "\103\125\102\105",
			"\103\125\115\105\137\104\111\123\124", "\103\125\122\122\105\116\124",
			"\103\125\122\122\105\116\124\137\103\101\124\101\114\117\107", "\103\125\122\122\105\116\124\137\104\101\124\105",
			"\103\125\122\122\105\116\124\137\104\105\106\101\125\114\124\137\124\122\101\116\123\106\117\122\115\137\107\122\117\125\120", "\103\125\122\122\105\116\124\137\120\101\124\110",
			"\103\125\122\122\105\116\124\137\122\117\114\105", "\103\125\122\122\105\116\124\137\122\117\127",
			"\103\125\122\122\105\116\124\137\123\103\110\105\115\101", "\103\125\122\122\105\116\124\137\124\111\115\105",
			"\103\125\122\122\105\116\124\137\124\111\115\105\123\124\101\115\120",
			"\103\125\122\122\105\116\124\137\124\122\101\116\123\106\117\122\115\137\107\122\117\125\120\137\106\117\122\137\124\131\120\105", "\103\125\122\122\105\116\124\137\125\123\105\122", "\103\125\122\123\117\122",
			"\103\125\122\123\117\122\137\116\101\115\105", "\103\131\103\114\105", "\104\101\124\101", "\104\101\124\101\102\101\123\105",
			"\104\101\124\105",
			"\104\101\124\105\124\111\115\105\137\111\116\124\105\122\126\101\114\137\103\117\104\105",
			"\104\101\124\105\124\111\115\105\137\111\116\124\105\122\126\101\114\137\120\122\105\103\111\123\111\117\116", "\104\101\131", "\104\101\131\123", "\104\105\101\114\114\117\103\101\124\105",
			"\104\105\103", "\104\105\103\101\104\105", "\104\105\103\111\115\101\114",
			"\104\105\103\114\101\122\105", "\104\105\106\101\125\114\124", "\104\105\106\101\125\114\124\123",
			"\104\105\106\105\122\122\101\102\114\105", "\104\105\106\105\122\122\105\104", "\104\105\106\111\116\105",
			"\104\105\106\111\116\105\104", "\104\105\106\111\116\105\122", "\104\105\107\122\105\105",
			"\104\105\114\105\124\105", "\104\105\116\123\105\137\122\101\116\113", "\104\105\120\124\110",
			"\104\105\122\105\106", "\104\105\122\111\126\105\104", "\104\105\123\103",
			"\104\105\123\103\122\111\102\105", "\104\105\123\103\122\111\120\124\111\117\116",
			"\104\105\123\103\122\111\120\124\117\122", "\104\105\124\105\122\115\111\116\111\123\124\111\103",
			"\104\111\101\107\116\117\123\124\111\103\123", "\104\111\123\101\114\114\117\127", "\104\111\123\103\117\116\116\105\103\124",
			"\104\111\123\120\101\124\103\110", "\104\111\123\124\111\116\103\124", "\104\117\115\101\111\116",
			"\104\117\125\102\114\105", "\104\117\127", "\104\117\131", "\104\122\117\120",
			"\104\131\116\101\115\111\103", "\104\131\116\101\115\111\103\137\106\125\116\103\124\111\117\116",
			"\104\131\116\101\115\111\103\137\106\125\116\103\124\111\117\116\137\103\117\104\105", "\105\101\103\110", "\105\114\105\115\105\116\124", "\105\114\123\105",
			"\105\115\120\124\131", "\105\116\103\117\104\111\116\107", "\105\116\104",
			"\105\116\104\55\105\130\105\103", "\105\116\104\137\106\122\101\115\105",
			"\105\116\104\137\120\101\122\124\111\124\111\117\116", "\105\120\117\103\110", "\105\121\125\101\114\123", "\105\122\122\117\122",
			"\105\123\103\101\120\105", "\105\126\105\122\131", "\105\130\103\105\120\124",
			"\105\130\103\105\120\124\111\117\116", "\105\130\103\114\125\104\105", "\105\130\103\114\125\104\111\116\107",
			"\105\130\105\103", "\105\130\105\103\125\124\105", "\105\130\111\123\124\123", "\105\130\120",
			"\105\130\120\114\101\111\116", "\105\130\124\105\116\104", "\105\130\124\105\122\116\101\114",
			"\105\130\124\122\101\103\124", "\106\101\114\123\105", "\106\105\124\103\110", "\106\111\114\124\105\122",
			"\106\111\116\101\114", "\106\111\122\123\124", "\106\111\122\123\124\137\126\101\114\125\105",
			"\106\114\117\101\124", "\106\114\117\117\122", "\106\117\114\114\117\127\111\116\107", "\106\117\122",
			"\106\117\122\115\101\124", "\106\117\122\105\111\107\116", "\106\117\122\124\122\101\116",
			"\106\117\125\116\104", "\106\122\101\103\137\123\105\103\117\116\104",
			"\106\122\101\115\105\137\122\117\127", "\106\122\105\105", "\106\122\117\115", "\106\125\114\114",
			"\106\125\116\103\124\111\117\116", "\106\125\123\111\117\116", "\107", "\107\105\116\105\122\101\114",
			"\107\105\116\105\122\101\124\105\104", "\107\105\117\115\105\124\122\131", "\107\105\124", "\107\114\117\102\101\114",
			"\107\117", "\107\117\124\117", "\107\122\101\116\124", "\107\122\101\116\124\105\104",
			"\107\122\117\125\120", "\107\122\117\125\120\111\116\107", "\107\122\117\125\120\123",
			"\110\101\126\111\116\107", "\110\111\105\122\101\122\103\110\131", "\110\117\114\104", "\110\117\125\122",
			"\110\117\125\122\123", "\111\104\105\116\124\111\124\131", "\111\107\116\117\122\105",
			"\111\115\115\105\104\111\101\124\105", "\111\115\115\105\104\111\101\124\105\114\131",
			"\111\115\120\114\105\115\105\116\124\101\124\111\117\116", "\111\115\120\117\122\124", "\111\116", "\111\116\103\114\125\104\111\116\107",
			"\111\116\103\122\105\115\105\116\124", "\111\116\104\111\103\101\124\117\122", "\111\116\111\124\111\101\114",
			"\111\116\111\124\111\101\114\114\131", "\111\116\116\105\122", "\111\116\117\125\124", "\111\116\120\125\124",
			"\111\116\123\105\116\123\111\124\111\126\105", "\111\116\123\105\122\124", "\111\116\123\124\101\116\103\105",
			"\111\116\123\124\101\116\124\111\101\102\114\105", "\111\116\124", "\111\116\124\105\107\105\122",
			"\111\116\124\105\122\123\105\103\124", "\111\116\124\105\122\123\105\103\124\111\117\116",
			"\111\116\124\105\122\126\101\114", "\111\116\124\117", "\111\116\126\117\113\105\122", "\111\123",
			"\111\123\117\104\117\127", "\111\123\117\131\105\101\122", "\111\123\117\114\101\124\111\117\116",
			"\112\101\126\101", "\112\117\111\116", "\112\123\117\116",
			"\112\123\117\116\137\101\122\122\101\131", "\112\123\117\116\137\101\122\122\101\131\101\107\107",
			"\112\123\117\116\137\105\130\111\123\124\123", "\112\123\117\116\137\117\102\112\105\103\124",
			"\112\123\117\116\137\117\102\112\105\103\124\101\107\107", "\112\123\117\116\137\121\125\105\122\131",
			"\112\123\117\116\137\126\101\114\125\105", "\113", "\113\105\131", "\113\105\131\137\115\105\115\102\105\122",
			"\113\105\131\137\124\131\120\105", "\114\101\102\105\114", "\114\101\107", "\114\101\116\107\125\101\107\105",
			"\114\101\122\107\105", "\114\101\123\124", "\114\101\123\124\137\126\101\114\125\105",
			"\114\101\124\105\122\101\114", "\114\105\101\104", "\114\105\101\104\111\116\107", "\114\105\106\124",
			"\114\105\116\107\124\110", "\114\105\126\105\114", "\114\111\102\122\101\122\131", "\114\111\113\105",
			"\114\111\113\105\137\122\105\107\105\130", "\114\111\115\111\124", "\114\116", "\114\117\103\101\114",
			"\114\117\103\101\114\124\111\115\105", "\114\117\103\101\114\124\111\115\105\123\124\101\115\120",
			"\114\117\103\101\124\117\122", "\114\117\127\105\122", "\115", "\115\101\120", "\115\101\124\103\110",
			"\115\101\124\103\110\105\104", "\115\101\124\103\110\105\123",
			"\115\101\124\103\110\137\116\125\115\102\105\122", "\115\101\124\103\110\137\122\105\103\117\107\116\111\132\105", "\115\101\130",
			"\115\101\130\126\101\114\125\105", "\115\105\101\123\125\122\105\123", "\115\105\115\102\105\122",
			"\115\105\122\107\105", "\115\105\123\123\101\107\105\137\114\105\116\107\124\110",
			"\115\105\123\123\101\107\105\137\117\103\124\105\124\137\114\105\116\107\124\110", "\115\105\123\123\101\107\105\137\124\105\130\124", "\115\105\124\110\117\104",
			"\115\111\103\122\117\123\105\103\117\116\104", "\115\111\114\114\111\123\105\103\117\116\104",
			"\115\111\114\114\105\116\116\111\125\115", "\115\111\116", "\115\111\116\125\124\105", "\115\111\116\125\124\105\123",
			"\115\111\116\126\101\114\125\105", "\115\117\104", "\115\117\104\111\106\111\105\123", "\115\117\104\125\114\105",
			"\115\117\116\124\110", "\115\117\116\124\110\123", "\115\117\122\105",
			"\115\125\114\124\111\123\105\124", "\115\125\115\120\123", "\116\101\115\105", "\116\101\115\105\123",
			"\116\101\116\117\123\105\103\117\116\104", "\116\101\124\111\117\116\101\114", "\116\101\124\125\122\101\114",
			"\116\103\110\101\122", "\116\103\114\117\102", "\116\105\123\124\111\116\107", "\116\105\127",
			"\116\105\130\124", "\116\117", "\116\117\116\105", "\116\117\122\115\101\114\111\132\105",
			"\116\117\122\115\101\114\111\132\105\104", "\116\117\124", "\116\124\110\137\126\101\114\125\105", "\116\124\111\114\105",
			"\116\125\114\114", "\116\125\114\114\101\102\114\105", "\116\125\114\114\111\106",
			"\116\125\114\114\123", "\116\125\115\102\105\122", "\116\125\115\105\122\111\103",
			"\117\102\112\105\103\124", "\117\103\103\125\122\122\105\116\103\105\123\137\122\105\107\105\130",
			"\117\103\124\105\124\137\114\105\116\107\124\110", "\117\103\124\105\124\123", "\117\106", "\117\106\106\123\105\124",
			"\117\114\104", "\117\115\111\124", "\117\116", "\117\116\105", "\117\116\114\131",
			"\117\120\105\116", "\117\120\124\111\117\116", "\117\120\124\111\117\116\123", "\117\122",
			"\117\122\104\105\122", "\117\122\104\105\122\111\116\107", "\117\122\104\111\116\101\114\111\124\131",
			"\117\124\110\105\122\123", "\117\125\124", "\117\125\124\105\122", "\117\125\124\120\125\124",
			"\117\126\105\122", "\117\126\105\122\114\101\120\123", "\117\126\105\122\114\101\131",
			"\117\126\105\122\122\111\104\111\116\107", "\120\101\104", "\120\101\122\101\115\105\124\105\122",
			"\120\101\122\101\115\105\124\105\122\137\115\117\104\105", "\120\101\122\101\115\105\124\105\122\137\116\101\115\105",
			"\120\101\122\101\115\105\124\105\122\137\117\122\104\111\116\101\114\137\120\117\123\111\124\111\117\116",
			"\120\101\122\101\115\105\124\105\122\137\123\120\105\103\111\106\111\103\137\103\101\124\101\114\117\107",
			"\120\101\122\101\115\105\124\105\122\137\123\120\105\103\111\106\111\103\137\116\101\115\105",
			"\120\101\122\101\115\105\124\105\122\137\123\120\105\103\111\106\111\103\137\123\103\110\105\115\101", "\120\101\122\124\111\101\114", "\120\101\122\124\111\124\111\117\116",
			"\120\101\123\103\101\114", "\120\101\123\123\111\116\107", "\120\101\123\123\124\110\122\117\125\107\110",
			"\120\101\123\124", "\120\101\124\110", "\120\101\124\124\105\122\116", "\120\105\122",
			"\120\105\122\103\105\116\124", "\120\105\122\103\105\116\124\111\114\105\137\103\117\116\124",
			"\120\105\122\103\105\116\124\111\114\105\137\104\111\123\103", "\120\105\122\103\105\116\124\137\122\101\116\113", "\120\105\122\111\117\104",
			"\120\105\122\115\125\124\105", "\120\114\101\103\111\116\107", "\120\114\101\116", "\120\114\111",
			"\120\117\122\124\111\117\116", "\120\117\123\111\124\111\117\116",
			"\120\117\123\111\124\111\117\116\137\122\105\107\105\130", "\120\117\127\105\122", "\120\122\105\103\105\104\105\123",
			"\120\122\105\103\105\104\111\116\107", "\120\122\105\103\111\123\111\117\116", "\120\122\105\120\101\122\105",
			"\120\122\105\123\105\122\126\105", "\120\122\105\126", "\120\122\111\115\101\122\131", "\120\122\111\117\122",
			"\120\122\111\126\111\114\105\107\105\123", "\120\122\117\103\105\104\125\122\105", "\120\125\102\114\111\103",
			"\121\125\101\122\124\105\122", "\122\101\116\107\105", "\122\101\116\113", "\122\105\101\104",
			"\122\105\101\104\123", "\122\105\101\114", "\122\105\103\125\122\123\111\126\105", "\122\105\106",
			"\122\105\106\105\122\105\116\103\105\123", "\122\105\106\105\122\105\116\103\111\116\107",
			"\122\105\107\122\137\101\126\107\130", "\122\105\107\122\137\101\126\107\131",
			"\122\105\107\122\137\103\117\125\116\124", "\122\105\107\122\137\111\116\124\105\122\103\105\120\124",
			"\122\105\107\122\137\122\62", "\122\105\107\122\137\123\114\117\120\105", "\122\105\107\122\137\123\130\130",
			"\122\105\107\122\137\123\130\131", "\122\105\107\122\137\123\131\131", "\122\105\114\101\124\111\126\105",
			"\122\105\114\105\101\123\105", "\122\105\120\105\101\124\101\102\114\105", "\122\105\120\114\101\103\105",
			"\122\105\123\105\124", "\122\105\123\120\105\103\124", "\122\105\123\124\101\122\124",
			"\122\105\123\124\122\111\103\124", "\122\105\123\125\114\124", "\122\105\124\125\122\116",
			"\122\105\124\125\122\116\105\104\137\103\101\122\104\111\116\101\114\111\124\131", "\122\105\124\125\122\116\105\104\137\114\105\116\107\124\110",
			"\122\105\124\125\122\116\105\104\137\117\103\124\105\124\137\114\105\116\107\124\110", "\122\105\124\125\122\116\105\104\137\123\121\114\123\124\101\124\105",
			"\122\105\124\125\122\116\111\116\107", "\122\105\124\125\122\116\123", "\122\105\126\117\113\105",
			"\122\111\107\110\124", "\122\117\114\105", "\122\117\114\114\102\101\103\113",
			"\122\117\114\114\125\120", "\122\117\125\124\111\116\105",
			"\122\117\125\124\111\116\105\137\103\101\124\101\114\117\107", "\122\117\125\124\111\116\105\137\116\101\115\105",
			"\122\117\125\124\111\116\105\137\123\103\110\105\115\101", "\122\117\127", "\122\117\127\137\103\117\125\116\124",
			"\122\117\127\137\116\125\115\102\105\122", "\122\117\127\123", "\122\125\116\116\111\116\107",
			"\123\101\126\105\120\117\111\116\124", "\123\103\101\114\101\122", "\123\103\101\114\105", "\123\103\110\105\115\101",
			"\123\103\110\105\115\101\137\116\101\115\105", "\123\103\117\120\105",
			"\123\103\117\120\105\137\103\101\124\101\114\117\107\123", "\123\103\117\120\105\137\116\101\115\105",
			"\123\103\117\120\105\137\123\103\110\105\115\101", "\123\103\122\117\114\114", "\123\105\101\122\103\110",
			"\123\105\103\117\116\104", "\123\105\103\117\116\104\123", "\123\105\103\124\111\117\116",
			"\123\105\103\125\122\111\124\131", "\123\105\105\113", "\123\105\114\105\103\124", "\123\105\114\106",
			"\123\105\116\123\111\124\111\126\105", "\123\105\121\125\105\116\103\105",
			"\123\105\122\111\101\114\111\132\101\102\114\105", "\123\105\122\126\105\122", "\123\105\122\126\105\122\137\116\101\115\105",
			"\123\105\123\123\111\117\116", "\123\105\123\123\111\117\116\137\125\123\105\122", "\123\105\124",
			"\123\105\124\123", "\115\111\116\125\123", "\123\110\117\127", "\123\111\115\111\114\101\122",
			"\123\111\115\120\114\105", "\123\111\132\105", "\123\113\111\120", "\123\115\101\114\114\111\116\124",
			"\123\117\115\105", "\123\117\125\122\103\105", "\123\120\101\103\105",
			"\123\120\105\103\111\106\111\103", "\123\120\105\103\111\106\111\103\137\116\101\115\105",
			"\123\120\105\103\111\106\111\103\124\131\120\105", "\123\121\114", "\123\121\114\105\130\103\105\120\124\111\117\116",
			"\123\121\114\123\124\101\124\105", "\123\121\114\127\101\122\116\111\116\107",
			"\123\121\114\137\102\111\107\111\116\124", "\123\121\114\137\102\111\116\101\122\131", "\123\121\114\137\102\111\124",
			"\123\121\114\137\102\114\117\102", "\123\121\114\137\102\117\117\114\105\101\116",
			"\123\121\114\137\103\110\101\122", "\123\121\114\137\103\114\117\102", "\123\121\114\137\104\101\124\105",
			"\123\121\114\137\104\105\103\111\115\101\114", "\123\121\114\137\104\117\125\102\114\105",
			"\123\121\114\137\106\114\117\101\124", "\123\121\114\137\111\116\124\105\107\105\122",
			"\123\121\114\137\111\116\124\105\122\126\101\114\137\104\101\131",
			"\123\121\114\137\111\116\124\105\122\126\101\114\137\104\101\131\137\124\117\137\110\117\125\122",
			"\123\121\114\137\111\116\124\105\122\126\101\114\137\104\101\131\137\124\117\137\115\111\116\125\124\105",
			"\123\121\114\137\111\116\124\105\122\126\101\114\137\104\101\131\137\124\117\137\123\105\103\117\116\104", "\123\121\114\137\111\116\124\105\122\126\101\114\137\110\117\125\122",
			"\123\121\114\137\111\116\124\105\122\126\101\114\137\110\117\125\122\137\124\117\137\115\111\116\125\124\105",
			"\123\121\114\137\111\116\124\105\122\126\101\114\137\110\117\125\122\137\124\117\137\123\105\103\117\116\104", "\123\121\114\137\111\116\124\105\122\126\101\114\137\115\111\116\125\124\105",
			"\123\121\114\137\111\116\124\105\122\126\101\114\137\115\111\116\125\124\105\137\124\117\137\123\105\103\117\116\104", "\123\121\114\137\111\116\124\105\122\126\101\114\137\115\117\116\124\110",
			"\123\121\114\137\111\116\124\105\122\126\101\114\137\123\105\103\117\116\104", "\123\121\114\137\111\116\124\105\122\126\101\114\137\131\105\101\122",
			"\123\121\114\137\111\116\124\105\122\126\101\114\137\131\105\101\122\137\124\117\137\115\117\116\124\110", "\123\121\114\137\114\117\116\107\126\101\122\102\111\116\101\122\131",
			"\123\121\114\137\114\117\116\107\126\101\122\103\110\101\122", "\123\121\114\137\114\117\116\107\126\101\122\116\103\110\101\122",
			"\123\121\114\137\116\103\110\101\122", "\123\121\114\137\116\103\114\117\102",
			"\123\121\114\137\116\125\115\105\122\111\103", "\123\121\114\137\116\126\101\122\103\110\101\122",
			"\123\121\114\137\122\105\101\114", "\123\121\114\137\123\115\101\114\114\111\116\124",
			"\123\121\114\137\124\111\115\105", "\123\121\114\137\124\111\115\105\123\124\101\115\120",
			"\123\121\114\137\124\111\116\131\111\116\124", "\123\121\114\137\124\123\111\137\104\101\131",
			"\123\121\114\137\124\123\111\137\106\122\101\103\137\123\105\103\117\116\104", "\123\121\114\137\124\123\111\137\110\117\125\122",
			"\123\121\114\137\124\123\111\137\115\111\103\122\117\123\105\103\117\116\104", "\123\121\114\137\124\123\111\137\115\111\116\125\124\105",
			"\123\121\114\137\124\123\111\137\115\117\116\124\110", "\123\121\114\137\124\123\111\137\121\125\101\122\124\105\122",
			"\123\121\114\137\124\123\111\137\123\105\103\117\116\104", "\123\121\114\137\124\123\111\137\127\105\105\113",
			"\123\121\114\137\124\123\111\137\131\105\101\122", "\123\121\114\137\126\101\122\102\111\116\101\122\131",
			"\123\121\114\137\126\101\122\103\110\101\122", "\123\121\122\124", "\123\124\101\122\124", "\123\124\101\124\105",
			"\123\124\101\124\105\115\105\116\124", "\123\124\101\124\111\103", "\123\124\104\104\105\126\137\120\117\120",
			"\123\124\104\104\105\126\137\123\101\115\120", "\123\124\122\105\101\115", "\123\124\122\125\103\124\125\122\105",
			"\123\124\131\114\105", "\123\125\102\103\114\101\123\123\137\117\122\111\107\111\116",
			"\123\125\102\115\125\114\124\111\123\105\124", "\123\125\102\123\105\124", "\123\125\102\123\124\111\124\125\124\105",
			"\123\125\102\123\124\122\111\116\107", "\123\125\102\123\124\122\111\116\107\137\122\105\107\105\130",
			"\123\125\103\103\105\105\104\123", "\123\125\115", "\123\131\115\115\105\124\122\111\103",
			"\123\131\123\124\105\115", "\123\131\123\124\105\115\137\124\111\115\105",
			"\123\131\123\124\105\115\137\125\123\105\122", "\124\101\102\114\105", "\124\101\102\114\105\137\116\101\115\105",
			"\124\101\102\114\105\123\101\115\120\114\105", "\124\105\115\120\117\122\101\122\131", "\124\110\105\116", "\124\111\105\123",
			"\124\111\115\105", "\124\111\115\105\123\124\101\115\120",
			"\124\111\115\105\123\124\101\115\120\101\104\104", "\124\111\115\105\123\124\101\115\120\104\111\106\106",
			"\124\111\115\105\132\117\116\105\137\110\117\125\122", "\124\111\115\105\132\117\116\105\137\115\111\116\125\124\105",
			"\124\111\116\131\111\116\124", "\124\117", "\124\117\120\137\114\105\126\105\114\137\103\117\125\116\124",
			"\124\122\101\111\114\111\116\107", "\124\122\101\116\123\101\103\124\111\117\116",
			"\124\122\101\116\123\101\103\124\111\117\116\123\137\101\103\124\111\126\105",
			"\124\122\101\116\123\101\103\124\111\117\116\123\137\103\117\115\115\111\124\124\105\104",
			"\124\122\101\116\123\101\103\124\111\117\116\123\137\122\117\114\114\105\104\137\102\101\103\113", "\124\122\101\116\123\106\117\122\115",
			"\124\122\101\116\123\106\117\122\115\123", "\124\122\101\116\123\114\101\124\105",
			"\124\122\101\116\123\114\101\124\105\137\122\105\107\105\130", "\124\122\101\116\123\114\101\124\111\117\116", "\124\122\105\101\124",
			"\124\122\111\107\107\105\122", "\124\122\111\107\107\105\122\137\103\101\124\101\114\117\107",
			"\124\122\111\107\107\105\122\137\116\101\115\105", "\124\122\111\107\107\105\122\137\123\103\110\105\115\101", "\124\122\111\115",
			"\124\122\111\115\137\101\122\122\101\131", "\124\122\125\105", "\124\122\125\116\103\101\124\105",
			"\124\125\115\102\114\105", "\124\131\120\105", "\125\105\123\103\101\120\105",
			"\125\116\102\117\125\116\104\105\104", "\125\116\103\117\115\115\111\124\124\105\104",
			"\125\116\103\117\116\104\111\124\111\117\116\101\114", "\125\116\104\105\122", "\125\116\111\117\116", "\125\116\111\121\125\105",
			"\125\116\113\116\117\127\116", "\125\116\116\101\115\105\104", "\125\116\116\105\123\124",
			"\125\120\104\101\124\105", "\125\120\120\105\122", "\125\120\123\105\122\124", "\125\123\101\107\105",
			"\125\123\105\122",
			"\125\123\105\122\137\104\105\106\111\116\105\104\137\124\131\120\105\137\103\101\124\101\114\117\107",
			"\125\123\105\122\137\104\105\106\111\116\105\104\137\124\131\120\105\137\103\117\104\105",
			"\125\123\105\122\137\104\105\106\111\116\105\104\137\124\131\120\105\137\116\101\115\105",
			"\125\123\105\122\137\104\105\106\111\116\105\104\137\124\131\120\105\137\123\103\110\105\115\101", "\125\123\111\116\107", "\125\124\106\70", "\125\124\106\61\66",
			"\125\124\106\63\62", "\126\101\114\125\105", "\126\101\114\125\105\123",
			"\126\101\114\125\105\137\117\106", "\126\101\122\137\120\117\120", "\126\101\122\137\123\101\115\120",
			"\126\101\122\102\111\116\101\122\131", "\126\101\122\103\110\101\122", "\126\101\122\131\111\116\107",
			"\126\105\122\123\111\117\116", "\126\105\122\123\111\117\116\111\116\107", "\126\111\105\127",
			"\127\105\105\113", "\127\110\105\116", "\127\110\105\116\105\126\105\122", "\127\110\105\122\105",
			"\127\111\104\124\110\137\102\125\103\113\105\124", "\127\111\116\104\117\127", "\127\111\124\110", "\127\111\124\110\111\116",
			"\127\111\124\110\117\125\124", "\127\117\122\113", "\127\122\101\120\120\105\122", "\127\122\111\124\105",
			"\130\115\114", "\131\105\101\122", "\131\105\101\122\123", "\132\117\116\105",
			"\104\105\104\125\120", null, null, null, null, null, null, null, null, null, null, null, null, "\50",
			"\51", null, null, null, null, "\173", "\175", "\133", "\135", "\73", "\56", "\54",
			"\75", "\76", "\74", "\77", "\72", "\74\75", "\76\75", "\74\76", "\41\75", "\53",
			"\55", "\52", "\57", "\45", "\174\174", "\75\76", "\56\56", "\47", "\42", "\174",
			"\136", "\44", null, null, null, null, null, null, "\52\57", null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, };
	protected Token jjFillToken()
	{
		final Token t;
		final String curTokenImage;
		final int beginLine;
		final int endLine;
		final int beginColumn;
		final int endColumn;
		String im = jjstrLiteralImages[jjmatchedKind];
		curTokenImage = im == null ? input_stream.getImage() : im;
		beginLine = input_stream.getBeginLine();
		beginColumn = input_stream.getBeginColumn();
		endLine = input_stream.getEndLine();
		endColumn = input_stream.getEndColumn();
		t = Token.newToken(jjmatchedKind);
		t.kind = jjmatchedKind;
		t.image = curTokenImage;

		t.beginLine = beginLine;
		t.endLine = endLine;
		t.beginColumn = beginColumn;
		t.endColumn = endColumn;

		return t;
	}
	static final int[] jjnextStates = {
			16, 17, 19, 10, 12, 13, 26, 27, 28, 51, 53, 54, 2, 4, 5, 84,
			87, 88, 51, 53, 54, 55, 36, 37, 41, 38, 43, 45, 46, 22, 24, 25,
			43, 44, 45, 41, 42, 38, 46, 60, 62, 63, 66, 68, 69, 71, 72, 73,
			74, 75, 76, 78, 79, 58, 64, 29, 30, 39, 40,
	};
	private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
	{
		switch(hiByte)
		{
		case 0:
			return ((jjbitVec0[i2] & l2) != 0L);
		default :
			return false;
		}
	}
	private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
	{
		switch(hiByte)
		{
		case 0:
			return ((jjbitVec3[i2] & l2) != 0L);
		case 48:
			return ((jjbitVec4[i2] & l2) != 0L);
		case 49:
			return ((jjbitVec5[i2] & l2) != 0L);
		case 51:
			return ((jjbitVec6[i2] & l2) != 0L);
		case 61:
			return ((jjbitVec7[i2] & l2) != 0L);
		default :
			if ((jjbitVec1[i1] & l1) != 0L)
				return true;
			return false;
		}
	}
	private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
	{
		switch(hiByte)
		{
		case 0:
			return ((jjbitVec0[i2] & l2) != 0L);
		default :
			if ((jjbitVec8[i1] & l1) != 0L)
				return true;
			return false;
		}
	}

	int curLexState = 0;
	int defaultLexState = 0;
	int jjnewStateCnt;
	int jjround;
	int jjmatchedPos;
	int jjmatchedKind;

	/** Get the next Token. */
	public Token getNextToken()
	{
		Token specialToken = null;
		Token matchedToken;
		int curPos = 0;

		EOFLoop:
			for (;;)
			{
				try
				{
					curChar = input_stream.beginToken();
				}
				catch(final Exception e)
				{
					jjmatchedKind = 0;
					jjmatchedPos = -1;
					matchedToken = jjFillToken();
					matchedToken.specialToken = specialToken;
					return matchedToken;
				}
				image = jjimage;
				image.setLength(0);
				jjimageLen = 0;

				for (;;)
				{
					switch(curLexState)
					{
					case 0:
						try {
							input_stream.backup(0);
							while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0x0L)
								curChar = input_stream.beginToken();
						}
						catch (final java.io.IOException e1) {
							continue EOFLoop;
						}
						jjmatchedKind = 0x7fffffff;
						jjmatchedPos = 0;
						curPos = jjMoveStringLiteralDfa0_0();
						break;
					case 1:
						try {
							input_stream.backup(0);
							while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0x0L)
								curChar = input_stream.beginToken();
						}
						catch (final java.io.IOException e1) {
							continue EOFLoop;
						}
						jjmatchedKind = 0x7fffffff;
						jjmatchedPos = 0;
						curPos = jjMoveStringLiteralDfa0_1();
						break;
					case 2:
						try {
							input_stream.backup(0);
							while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0x0L)
								curChar = input_stream.beginToken();
						}
						catch (final java.io.IOException e1) {
							continue EOFLoop;
						}
						jjmatchedKind = 0x7fffffff;
						jjmatchedPos = 0;
						curPos = jjMoveStringLiteralDfa0_2();
						break;
					case 3:
						jjmatchedKind = 0x7fffffff;
						jjmatchedPos = 0;
						curPos = jjMoveStringLiteralDfa0_3();
						if (jjmatchedPos == 0 && jjmatchedKind > 733)
						{
							jjmatchedKind = 733;
						}
						break;
					case 4:
						jjmatchedKind = 0x7fffffff;
						jjmatchedPos = 0;
						curPos = jjMoveStringLiteralDfa0_4();
						if (jjmatchedPos == 0 && jjmatchedKind > 733)
						{
							jjmatchedKind = 733;
						}
						break;
					}
					if (jjmatchedKind != 0x7fffffff)
					{
						if (jjmatchedPos + 1 < curPos)
							input_stream.backup(curPos - jjmatchedPos - 1);
						if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
						{
							matchedToken = jjFillToken();
							matchedToken.specialToken = specialToken;
							if (jjnewLexState[jjmatchedKind] != -1)
								curLexState = jjnewLexState[jjmatchedKind];
							return matchedToken;
						}
						else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
						{
							if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
							{
								matchedToken = jjFillToken();
								if (specialToken == null)
									specialToken = matchedToken;
								else
								{
									matchedToken.specialToken = specialToken;
									specialToken = (specialToken.next = matchedToken);
								}
								SkipLexicalActions(matchedToken);
							}
							else
								SkipLexicalActions(null);
							if (jjnewLexState[jjmatchedKind] != -1)
								curLexState = jjnewLexState[jjmatchedKind];
							continue EOFLoop;
						}
						MoreLexicalActions();
						if (jjnewLexState[jjmatchedKind] != -1)
							curLexState = jjnewLexState[jjmatchedKind];
						curPos = 0;
						jjmatchedKind = 0x7fffffff;
						try {
							curChar = input_stream.readChar();
							continue;
						}
						catch (final java.io.IOException e1) { }
					}
					int error_line = input_stream.getEndLine();
					int error_column = input_stream.getEndColumn();
					String error_after = null;
					boolean EOFSeen = false;
					try {
						input_stream.readChar();
						input_stream.backup(1);
					}
					catch (final java.io.IOException e1) {
						EOFSeen = true;
						error_after = curPos <= 1 ? "" : input_stream.getImage();
						if (curChar == '\n' || curChar == '\r') {
							error_line++;
							error_column = 0;
						}
						else
							error_column++;
					}
					if (!EOFSeen) {
						input_stream.backup(1);
						error_after = curPos <= 1 ? "" : input_stream.getImage();
					}
					throw new TokenMgrException(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrException.LEXICAL_ERROR);
				}
			}
	}

	void SkipLexicalActions(Token matchedToken)
	{
		switch(jjmatchedKind)
		{
		case 731 :
			image.append(input_stream.getSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
			popState();
			break;
		case 732 :
			image.append(input_stream.getSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
			popState();
			break;
		default :
			break;
		}
	}
	void MoreLexicalActions()
	{
		jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
		switch(jjmatchedKind)
		{
		case 728 :
			image.append(input_stream.getSuffix(jjimageLen));
			jjimageLen = 0;
			pushState();
			break;
		case 729 :
			image.append(input_stream.getSuffix(jjimageLen));
			jjimageLen = 0;
			pushState();
			break;
		default :
			break;
		}
	}
	void TokenLexicalActions(Token matchedToken)
	{
		switch(jjmatchedKind)
		{
		default :
			break;
		}
	}
	private void jjCheckNAdd(int state)
	{
		if (jjrounds[state] != jjround)
		{
			jjstateSet[jjnewStateCnt++] = state;
			jjrounds[state] = jjround;
		}
	}
	private void jjAddStates(int start, int end)
	{
		do {
			jjstateSet[jjnewStateCnt++] = jjnextStates[start];
		} while (start++ != end);
	}
	private void jjCheckNAddTwoStates(int state1, int state2)
	{
		jjCheckNAdd(state1);
		jjCheckNAdd(state2);
	}

	private void jjCheckNAddStates(int start, int end)
	{
		do {
			jjCheckNAdd(jjnextStates[start]);
		} while (start++ != end);
	}

	/** Constructor. */
	public SqlParserImplTokenManager(SimpleCharStream stream){
		input_stream = stream;
	}

	/** Constructor. */
	public SqlParserImplTokenManager (SimpleCharStream stream, int lexState){
		ReInit(stream);
		SwitchTo(lexState);
	}

	/** Reinitialise parser. */

	public void ReInit(SimpleCharStream stream)
	{


		jjmatchedPos =
				jjnewStateCnt =
				0;
		curLexState = defaultLexState;
		input_stream = stream;
		ReInitRounds();
	}

	private void ReInitRounds()
	{
		int i;
		jjround = 0x80000001;
		for (i = 89; i-- > 0;)
			jjrounds[i] = 0x80000000;
	}

	/** Reinitialise parser. */
	public void ReInit(SimpleCharStream stream, int lexState)
	{
		ReInit(stream);
		SwitchTo(lexState);
	}

	/** Switch to specified lex state. */
	public void SwitchTo(int lexState)
	{
		if (lexState >= 5 || lexState < 0)
			throw new TokenMgrException("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrException.INVALID_LEXICAL_STATE);
		else
			curLexState = lexState;
	}


	/** Lexer state names. */
	public static final String[] lexStateNames = {
			"DEFAULT",
			"DQID",
			"BTID",
			"IN_FORMAL_COMMENT",
			"IN_MULTI_LINE_COMMENT",
	};

	/** Lex State array. */
	public static final int[] jjnewLexState = {
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	};
	static final long[] jjtoToken = {
			0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL,
			0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL,
			0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffef1fffffffffL, 0x4fc0c1ffffL,
	};
	static final long[] jjtoSkip = {
			0x0L, 0x0L, 0x0L, 0x0L,
			0x0L, 0x0L, 0x0L, 0x0L,
			0x0L, 0x0L, 0x0L, 0x1c3e0000L,
	};
	static final long[] jjtoSpecial = {
			0x0L, 0x0L, 0x0L, 0x0L,
			0x0L, 0x0L, 0x0L, 0x0L,
			0x0L, 0x0L, 0x0L, 0x18000000L,
	};
	static final long[] jjtoMore = {
			0x0L, 0x0L, 0x0L, 0x0L,
			0x0L, 0x0L, 0x0L, 0x0L,
			0x0L, 0x0L, 0x0L, 0x23000000L,
	};
	protected SimpleCharStream  input_stream;

	private final int[] jjrounds = new int[89];
	private final int[] jjstateSet = new int[2 * 89];
	private final StringBuilder jjimage = new StringBuilder();
	private StringBuilder image = jjimage;
	private int jjimageLen;
	private int lengthOfMatch;
	protected int curChar;
}
