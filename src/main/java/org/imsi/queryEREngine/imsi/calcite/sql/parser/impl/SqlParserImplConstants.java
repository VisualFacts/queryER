/* Generated by: ParserGeneratorCC: Do not edit this line. SqlParserImplConstants.java */
package org.imsi.queryEREngine.imsi.calcite.sql.parser.impl;


/**
 * Token literal values and constants.
 * Generated by com.helger.pgcc.output.java.OtherFilesGenJava#start()
 */
public interface SqlParserImplConstants {

	/** End of File. */
	int EOF = 0;
	/** RegularExpression Id. */
	int A = 1;
	/** RegularExpression Id. */
	int ABS = 2;
	/** RegularExpression Id. */
	int ABSENT = 3;
	/** RegularExpression Id. */
	int ABSOLUTE = 4;
	/** RegularExpression Id. */
	int ACTION = 5;
	/** RegularExpression Id. */
	int ADA = 6;
	/** RegularExpression Id. */
	int ADD = 7;
	/** RegularExpression Id. */
	int ADMIN = 8;
	/** RegularExpression Id. */
	int AFTER = 9;
	/** RegularExpression Id. */
	int ALL = 10;
	/** RegularExpression Id. */
	int ALLOCATE = 11;
	/** RegularExpression Id. */
	int ALLOW = 12;
	/** RegularExpression Id. */
	int ALTER = 13;
	/** RegularExpression Id. */
	int ALWAYS = 14;
	/** RegularExpression Id. */
	int AND = 15;
	/** RegularExpression Id. */
	int ANY = 16;
	/** RegularExpression Id. */
	int APPLY = 17;
	/** RegularExpression Id. */
	int ARE = 18;
	/** RegularExpression Id. */
	int ARRAY = 19;
	/** RegularExpression Id. */
	int ARRAY_MAX_CARDINALITY = 20;
	/** RegularExpression Id. */
	int AS = 21;
	/** RegularExpression Id. */
	int ASC = 22;
	/** RegularExpression Id. */
	int ASENSITIVE = 23;
	/** RegularExpression Id. */
	int ASSERTION = 24;
	/** RegularExpression Id. */
	int ASSIGNMENT = 25;
	/** RegularExpression Id. */
	int ASYMMETRIC = 26;
	/** RegularExpression Id. */
	int AT = 27;
	/** RegularExpression Id. */
	int ATOMIC = 28;
	/** RegularExpression Id. */
	int ATTRIBUTE = 29;
	/** RegularExpression Id. */
	int ATTRIBUTES = 30;
	/** RegularExpression Id. */
	int AUTHORIZATION = 31;
	/** RegularExpression Id. */
	int AVG = 32;
	/** RegularExpression Id. */
	int BEFORE = 33;
	/** RegularExpression Id. */
	int BEGIN = 34;
	/** RegularExpression Id. */
	int BEGIN_FRAME = 35;
	/** RegularExpression Id. */
	int BEGIN_PARTITION = 36;
	/** RegularExpression Id. */
	int BERNOULLI = 37;
	/** RegularExpression Id. */
	int BETWEEN = 38;
	/** RegularExpression Id. */
	int BIGINT = 39;
	/** RegularExpression Id. */
	int BINARY = 40;
	/** RegularExpression Id. */
	int BIT = 41;
	/** RegularExpression Id. */
	int BLOB = 42;
	/** RegularExpression Id. */
	int BOOLEAN = 43;
	/** RegularExpression Id. */
	int BOTH = 44;
	/** RegularExpression Id. */
	int BREADTH = 45;
	/** RegularExpression Id. */
	int BY = 46;
	/** RegularExpression Id. */
	int C = 47;
	/** RegularExpression Id. */
	int CALL = 48;
	/** RegularExpression Id. */
	int CALLED = 49;
	/** RegularExpression Id. */
	int CARDINALITY = 50;
	/** RegularExpression Id. */
	int CASCADE = 51;
	/** RegularExpression Id. */
	int CASCADED = 52;
	/** RegularExpression Id. */
	int CASE = 53;
	/** RegularExpression Id. */
	int CAST = 54;
	/** RegularExpression Id. */
	int CATALOG = 55;
	/** RegularExpression Id. */
	int CATALOG_NAME = 56;
	/** RegularExpression Id. */
	int CEIL = 57;
	/** RegularExpression Id. */
	int CEILING = 58;
	/** RegularExpression Id. */
	int CENTURY = 59;
	/** RegularExpression Id. */
	int CHAIN = 60;
	/** RegularExpression Id. */
	int CHAR = 61;
	/** RegularExpression Id. */
	int CHAR_LENGTH = 62;
	/** RegularExpression Id. */
	int CHARACTER = 63;
	/** RegularExpression Id. */
	int CHARACTER_LENGTH = 64;
	/** RegularExpression Id. */
	int CHARACTER_SET_CATALOG = 65;
	/** RegularExpression Id. */
	int CHARACTER_SET_NAME = 66;
	/** RegularExpression Id. */
	int CHARACTER_SET_SCHEMA = 67;
	/** RegularExpression Id. */
	int CHARACTERISTICS = 68;
	/** RegularExpression Id. */
	int CHARACTERS = 69;
	/** RegularExpression Id. */
	int CHECK = 70;
	/** RegularExpression Id. */
	int CLASSIFIER = 71;
	/** RegularExpression Id. */
	int CLASS_ORIGIN = 72;
	/** RegularExpression Id. */
	int CLOB = 73;
	/** RegularExpression Id. */
	int CLOSE = 74;
	/** RegularExpression Id. */
	int COALESCE = 75;
	/** RegularExpression Id. */
	int COBOL = 76;
	/** RegularExpression Id. */
	int COLLATE = 77;
	/** RegularExpression Id. */
	int COLLATION = 78;
	/** RegularExpression Id. */
	int COLLATION_CATALOG = 79;
	/** RegularExpression Id. */
	int COLLATION_NAME = 80;
	/** RegularExpression Id. */
	int COLLATION_SCHEMA = 81;
	/** RegularExpression Id. */
	int COLLECT = 82;
	/** RegularExpression Id. */
	int COLUMN = 83;
	/** RegularExpression Id. */
	int COLUMN_NAME = 84;
	/** RegularExpression Id. */
	int COMMAND_FUNCTION = 85;
	/** RegularExpression Id. */
	int COMMAND_FUNCTION_CODE = 86;
	/** RegularExpression Id. */
	int COMMIT = 87;
	/** RegularExpression Id. */
	int COMMITTED = 88;
	/** RegularExpression Id. */
	int CONDITION = 89;
	/** RegularExpression Id. */
	int CONDITIONAL = 90;
	/** RegularExpression Id. */
	int CONDITION_NUMBER = 91;
	/** RegularExpression Id. */
	int CONNECT = 92;
	/** RegularExpression Id. */
	int CONNECTION = 93;
	/** RegularExpression Id. */
	int CONNECTION_NAME = 94;
	/** RegularExpression Id. */
	int CONSTRAINT = 95;
	/** RegularExpression Id. */
	int CONSTRAINT_CATALOG = 96;
	/** RegularExpression Id. */
	int CONSTRAINT_NAME = 97;
	/** RegularExpression Id. */
	int CONSTRAINT_SCHEMA = 98;
	/** RegularExpression Id. */
	int CONSTRAINTS = 99;
	/** RegularExpression Id. */
	int CONSTRUCTOR = 100;
	/** RegularExpression Id. */
	int CONTAINS = 101;
	/** RegularExpression Id. */
	int CONTINUE = 102;
	/** RegularExpression Id. */
	int CONVERT = 103;
	/** RegularExpression Id. */
	int CORR = 104;
	/** RegularExpression Id. */
	int CORRESPONDING = 105;
	/** RegularExpression Id. */
	int COUNT = 106;
	/** RegularExpression Id. */
	int COVAR_POP = 107;
	/** RegularExpression Id. */
	int COVAR_SAMP = 108;
	/** RegularExpression Id. */
	int CREATE = 109;
	/** RegularExpression Id. */
	int CROSS = 110;
	/** RegularExpression Id. */
	int CUBE = 111;
	/** RegularExpression Id. */
	int CUME_DIST = 112;
	/** RegularExpression Id. */
	int CURRENT = 113;
	/** RegularExpression Id. */
	int CURRENT_CATALOG = 114;
	/** RegularExpression Id. */
	int CURRENT_DATE = 115;
	/** RegularExpression Id. */
	int CURRENT_DEFAULT_TRANSFORM_GROUP = 116;
	/** RegularExpression Id. */
	int CURRENT_PATH = 117;
	/** RegularExpression Id. */
	int CURRENT_ROLE = 118;
	/** RegularExpression Id. */
	int CURRENT_ROW = 119;
	/** RegularExpression Id. */
	int CURRENT_SCHEMA = 120;
	/** RegularExpression Id. */
	int CURRENT_TIME = 121;
	/** RegularExpression Id. */
	int CURRENT_TIMESTAMP = 122;
	/** RegularExpression Id. */
	int CURRENT_TRANSFORM_GROUP_FOR_TYPE = 123;
	/** RegularExpression Id. */
	int CURRENT_USER = 124;
	/** RegularExpression Id. */
	int CURSOR = 125;
	/** RegularExpression Id. */
	int CURSOR_NAME = 126;
	/** RegularExpression Id. */
	int CYCLE = 127;
	/** RegularExpression Id. */
	int DATA = 128;
	/** RegularExpression Id. */
	int DATABASE = 129;
	/** RegularExpression Id. */
	int DATE = 130;
	/** RegularExpression Id. */
	int DATETIME_INTERVAL_CODE = 131;
	/** RegularExpression Id. */
	int DATETIME_INTERVAL_PRECISION = 132;
	/** RegularExpression Id. */
	int DAY = 133;
	/** RegularExpression Id. */
	int DAYS = 134;
	/** RegularExpression Id. */
	int DEALLOCATE = 135;
	/** RegularExpression Id. */
	int DEC = 136;
	/** RegularExpression Id. */
	int DECADE = 137;
	/** RegularExpression Id. */
	int DECIMAL = 138;
	/** RegularExpression Id. */
	int DECLARE = 139;
	/** RegularExpression Id. */
	int DEFAULT_ = 140;
	/** RegularExpression Id. */
	int DEFAULTS = 141;
	/** RegularExpression Id. */
	int DEFERRABLE = 142;
	/** RegularExpression Id. */
	int DEFERRED = 143;
	/** RegularExpression Id. */
	int DEFINE = 144;
	/** RegularExpression Id. */
	int DEFINED = 145;
	/** RegularExpression Id. */
	int DEFINER = 146;
	/** RegularExpression Id. */
	int DEGREE = 147;
	/** RegularExpression Id. */
	int DELETE = 148;
	/** RegularExpression Id. */
	int DENSE_RANK = 149;
	/** RegularExpression Id. */
	int DEPTH = 150;
	/** RegularExpression Id. */
	int DEREF = 151;
	/** RegularExpression Id. */
	int DERIVED = 152;
	/** RegularExpression Id. */
	int DESC = 153;
	/** RegularExpression Id. */
	int DESCRIBE = 154;
	/** RegularExpression Id. */
	int DESCRIPTION = 155;
	/** RegularExpression Id. */
	int DESCRIPTOR = 156;
	/** RegularExpression Id. */
	int DETERMINISTIC = 157;
	/** RegularExpression Id. */
	int DIAGNOSTICS = 158;
	/** RegularExpression Id. */
	int DISALLOW = 159;
	/** RegularExpression Id. */
	int DISCONNECT = 160;
	/** RegularExpression Id. */
	int DISPATCH = 161;
	/** RegularExpression Id. */
	int DISTINCT = 162;
	/** RegularExpression Id. */
	int DOMAIN = 163;
	/** RegularExpression Id. */
	int DOUBLE = 164;
	/** RegularExpression Id. */
	int DOW = 165;
	/** RegularExpression Id. */
	int DOY = 166;
	/** RegularExpression Id. */
	int DROP = 167;
	/** RegularExpression Id. */
	int DYNAMIC = 168;
	/** RegularExpression Id. */
	int DYNAMIC_FUNCTION = 169;
	/** RegularExpression Id. */
	int DYNAMIC_FUNCTION_CODE = 170;
	/** RegularExpression Id. */
	int EACH = 171;
	/** RegularExpression Id. */
	int ELEMENT = 172;
	/** RegularExpression Id. */
	int ELSE = 173;
	/** RegularExpression Id. */
	int EMPTY = 174;
	/** RegularExpression Id. */
	int ENCODING = 175;
	/** RegularExpression Id. */
	int END = 176;
	/** RegularExpression Id. */
	int END_EXEC = 177;
	/** RegularExpression Id. */
	int END_FRAME = 178;
	/** RegularExpression Id. */
	int END_PARTITION = 179;
	/** RegularExpression Id. */
	int EPOCH = 180;
	/** RegularExpression Id. */
	int EQUALS = 181;
	/** RegularExpression Id. */
	int ERROR = 182;
	/** RegularExpression Id. */
	int ESCAPE = 183;
	/** RegularExpression Id. */
	int EVERY = 184;
	/** RegularExpression Id. */
	int EXCEPT = 185;
	/** RegularExpression Id. */
	int EXCEPTION = 186;
	/** RegularExpression Id. */
	int EXCLUDE = 187;
	/** RegularExpression Id. */
	int EXCLUDING = 188;
	/** RegularExpression Id. */
	int EXEC = 189;
	/** RegularExpression Id. */
	int EXECUTE = 190;
	/** RegularExpression Id. */
	int EXISTS = 191;
	/** RegularExpression Id. */
	int EXP = 192;
	/** RegularExpression Id. */
	int EXPLAIN = 193;
	/** RegularExpression Id. */
	int EXTEND = 194;
	/** RegularExpression Id. */
	int EXTERNAL = 195;
	/** RegularExpression Id. */
	int EXTRACT = 196;
	/** RegularExpression Id. */
	int FALSE = 197;
	/** RegularExpression Id. */
	int FETCH = 198;
	/** RegularExpression Id. */
	int FILTER = 199;
	/** RegularExpression Id. */
	int FINAL = 200;
	/** RegularExpression Id. */
	int FIRST = 201;
	/** RegularExpression Id. */
	int FIRST_VALUE = 202;
	/** RegularExpression Id. */
	int FLOAT = 203;
	/** RegularExpression Id. */
	int FLOOR = 204;
	/** RegularExpression Id. */
	int FOLLOWING = 205;
	/** RegularExpression Id. */
	int FOR = 206;
	/** RegularExpression Id. */
	int FORMAT = 207;
	/** RegularExpression Id. */
	int FOREIGN = 208;
	/** RegularExpression Id. */
	int FORTRAN = 209;
	/** RegularExpression Id. */
	int FOUND = 210;
	/** RegularExpression Id. */
	int FRAC_SECOND = 211;
	/** RegularExpression Id. */
	int FRAME_ROW = 212;
	/** RegularExpression Id. */
	int FREE = 213;
	/** RegularExpression Id. */
	int FROM = 214;
	/** RegularExpression Id. */
	int FULL = 215;
	/** RegularExpression Id. */
	int FUNCTION = 216;
	/** RegularExpression Id. */
	int FUSION = 217;
	/** RegularExpression Id. */
	int G = 218;
	/** RegularExpression Id. */
	int GENERAL = 219;
	/** RegularExpression Id. */
	int GENERATED = 220;
	/** RegularExpression Id. */
	int GEOMETRY = 221;
	/** RegularExpression Id. */
	int GET = 222;
	/** RegularExpression Id. */
	int GLOBAL = 223;
	/** RegularExpression Id. */
	int GO = 224;
	/** RegularExpression Id. */
	int GOTO = 225;
	/** RegularExpression Id. */
	int GRANT = 226;
	/** RegularExpression Id. */
	int GRANTED = 227;
	/** RegularExpression Id. */
	int GROUP = 228;
	/** RegularExpression Id. */
	int GROUPING = 229;
	/** RegularExpression Id. */
	int GROUPS = 230;
	/** RegularExpression Id. */
	int HAVING = 231;
	/** RegularExpression Id. */
	int HIERARCHY = 232;
	/** RegularExpression Id. */
	int HOLD = 233;
	/** RegularExpression Id. */
	int HOUR = 234;
	/** RegularExpression Id. */
	int HOURS = 235;
	/** RegularExpression Id. */
	int IDENTITY = 236;
	/** RegularExpression Id. */
	int IGNORE = 237;
	/** RegularExpression Id. */
	int IMMEDIATE = 238;
	/** RegularExpression Id. */
	int IMMEDIATELY = 239;
	/** RegularExpression Id. */
	int IMPLEMENTATION = 240;
	/** RegularExpression Id. */
	int IMPORT = 241;
	/** RegularExpression Id. */
	int IN = 242;
	/** RegularExpression Id. */
	int INCLUDING = 243;
	/** RegularExpression Id. */
	int INCREMENT = 244;
	/** RegularExpression Id. */
	int INDICATOR = 245;
	/** RegularExpression Id. */
	int INITIAL = 246;
	/** RegularExpression Id. */
	int INITIALLY = 247;
	/** RegularExpression Id. */
	int INNER = 248;
	/** RegularExpression Id. */
	int INOUT = 249;
	/** RegularExpression Id. */
	int INPUT = 250;
	/** RegularExpression Id. */
	int INSENSITIVE = 251;
	/** RegularExpression Id. */
	int INSERT = 252;
	/** RegularExpression Id. */
	int INSTANCE = 253;
	/** RegularExpression Id. */
	int INSTANTIABLE = 254;
	/** RegularExpression Id. */
	int INT = 255;
	/** RegularExpression Id. */
	int INTEGER = 256;
	/** RegularExpression Id. */
	int INTERSECT = 257;
	/** RegularExpression Id. */
	int INTERSECTION = 258;
	/** RegularExpression Id. */
	int INTERVAL = 259;
	/** RegularExpression Id. */
	int INTO = 260;
	/** RegularExpression Id. */
	int INVOKER = 261;
	/** RegularExpression Id. */
	int IS = 262;
	/** RegularExpression Id. */
	int ISODOW = 263;
	/** RegularExpression Id. */
	int ISOYEAR = 264;
	/** RegularExpression Id. */
	int ISOLATION = 265;
	/** RegularExpression Id. */
	int JAVA = 266;
	/** RegularExpression Id. */
	int JOIN = 267;
	/** RegularExpression Id. */
	int JSON = 268;
	/** RegularExpression Id. */
	int JSON_ARRAY = 269;
	/** RegularExpression Id. */
	int JSON_ARRAYAGG = 270;
	/** RegularExpression Id. */
	int JSON_EXISTS = 271;
	/** RegularExpression Id. */
	int JSON_OBJECT = 272;
	/** RegularExpression Id. */
	int JSON_OBJECTAGG = 273;
	/** RegularExpression Id. */
	int JSON_QUERY = 274;
	/** RegularExpression Id. */
	int JSON_VALUE = 275;
	/** RegularExpression Id. */
	int K = 276;
	/** RegularExpression Id. */
	int KEY = 277;
	/** RegularExpression Id. */
	int KEY_MEMBER = 278;
	/** RegularExpression Id. */
	int KEY_TYPE = 279;
	/** RegularExpression Id. */
	int LABEL = 280;
	/** RegularExpression Id. */
	int LAG = 281;
	/** RegularExpression Id. */
	int LANGUAGE = 282;
	/** RegularExpression Id. */
	int LARGE = 283;
	/** RegularExpression Id. */
	int LAST = 284;
	/** RegularExpression Id. */
	int LAST_VALUE = 285;
	/** RegularExpression Id. */
	int LATERAL = 286;
	/** RegularExpression Id. */
	int LEAD = 287;
	/** RegularExpression Id. */
	int LEADING = 288;
	/** RegularExpression Id. */
	int LEFT = 289;
	/** RegularExpression Id. */
	int LENGTH = 290;
	/** RegularExpression Id. */
	int LEVEL = 291;
	/** RegularExpression Id. */
	int LIBRARY = 292;
	/** RegularExpression Id. */
	int LIKE = 293;
	/** RegularExpression Id. */
	int LIKE_REGEX = 294;
	/** RegularExpression Id. */
	int LIMIT = 295;
	/** RegularExpression Id. */
	int LN = 296;
	/** RegularExpression Id. */
	int LOCAL = 297;
	/** RegularExpression Id. */
	int LOCALTIME = 298;
	/** RegularExpression Id. */
	int LOCALTIMESTAMP = 299;
	/** RegularExpression Id. */
	int LOCATOR = 300;
	/** RegularExpression Id. */
	int LOWER = 301;
	/** RegularExpression Id. */
	int M = 302;
	/** RegularExpression Id. */
	int MAP = 303;
	/** RegularExpression Id. */
	int MATCH = 304;
	/** RegularExpression Id. */
	int MATCHED = 305;
	/** RegularExpression Id. */
	int MATCHES = 306;
	/** RegularExpression Id. */
	int MATCH_NUMBER = 307;
	/** RegularExpression Id. */
	int MATCH_RECOGNIZE = 308;
	/** RegularExpression Id. */
	int MAX = 309;
	/** RegularExpression Id. */
	int MAXVALUE = 310;
	/** RegularExpression Id. */
	int MEASURES = 311;
	/** RegularExpression Id. */
	int MEMBER = 312;
	/** RegularExpression Id. */
	int MERGE = 313;
	/** RegularExpression Id. */
	int MESSAGE_LENGTH = 314;
	/** RegularExpression Id. */
	int MESSAGE_OCTET_LENGTH = 315;
	/** RegularExpression Id. */
	int MESSAGE_TEXT = 316;
	/** RegularExpression Id. */
	int METHOD = 317;
	/** RegularExpression Id. */
	int MICROSECOND = 318;
	/** RegularExpression Id. */
	int MILLISECOND = 319;
	/** RegularExpression Id. */
	int MILLENNIUM = 320;
	/** RegularExpression Id. */
	int MIN = 321;
	/** RegularExpression Id. */
	int MINUTE = 322;
	/** RegularExpression Id. */
	int MINUTES = 323;
	/** RegularExpression Id. */
	int MINVALUE = 324;
	/** RegularExpression Id. */
	int MOD = 325;
	/** RegularExpression Id. */
	int MODIFIES = 326;
	/** RegularExpression Id. */
	int MODULE = 327;
	/** RegularExpression Id. */
	int MONTH = 328;
	/** RegularExpression Id. */
	int MONTHS = 329;
	/** RegularExpression Id. */
	int MORE_ = 330;
	/** RegularExpression Id. */
	int MULTISET = 331;
	/** RegularExpression Id. */
	int MUMPS = 332;
	/** RegularExpression Id. */
	int NAME = 333;
	/** RegularExpression Id. */
	int NAMES = 334;
	/** RegularExpression Id. */
	int NANOSECOND = 335;
	/** RegularExpression Id. */
	int NATIONAL = 336;
	/** RegularExpression Id. */
	int NATURAL = 337;
	/** RegularExpression Id. */
	int NCHAR = 338;
	/** RegularExpression Id. */
	int NCLOB = 339;
	/** RegularExpression Id. */
	int NESTING = 340;
	/** RegularExpression Id. */
	int NEW = 341;
	/** RegularExpression Id. */
	int NEXT = 342;
	/** RegularExpression Id. */
	int NO = 343;
	/** RegularExpression Id. */
	int NONE = 344;
	/** RegularExpression Id. */
	int NORMALIZE = 345;
	/** RegularExpression Id. */
	int NORMALIZED = 346;
	/** RegularExpression Id. */
	int NOT = 347;
	/** RegularExpression Id. */
	int NTH_VALUE = 348;
	/** RegularExpression Id. */
	int NTILE = 349;
	/** RegularExpression Id. */
	int NULL = 350;
	/** RegularExpression Id. */
	int NULLABLE = 351;
	/** RegularExpression Id. */
	int NULLIF = 352;
	/** RegularExpression Id. */
	int NULLS = 353;
	/** RegularExpression Id. */
	int NUMBER = 354;
	/** RegularExpression Id. */
	int NUMERIC = 355;
	/** RegularExpression Id. */
	int OBJECT = 356;
	/** RegularExpression Id. */
	int OCCURRENCES_REGEX = 357;
	/** RegularExpression Id. */
	int OCTET_LENGTH = 358;
	/** RegularExpression Id. */
	int OCTETS = 359;
	/** RegularExpression Id. */
	int OF = 360;
	/** RegularExpression Id. */
	int OFFSET = 361;
	/** RegularExpression Id. */
	int OLD = 362;
	/** RegularExpression Id. */
	int OMIT = 363;
	/** RegularExpression Id. */
	int ON = 364;
	/** RegularExpression Id. */
	int ONE = 365;
	/** RegularExpression Id. */
	int ONLY = 366;
	/** RegularExpression Id. */
	int OPEN = 367;
	/** RegularExpression Id. */
	int OPTION = 368;
	/** RegularExpression Id. */
	int OPTIONS = 369;
	/** RegularExpression Id. */
	int OR = 370;
	/** RegularExpression Id. */
	int ORDER = 371;
	/** RegularExpression Id. */
	int ORDERING = 372;
	/** RegularExpression Id. */
	int ORDINALITY = 373;
	/** RegularExpression Id. */
	int OTHERS = 374;
	/** RegularExpression Id. */
	int OUT = 375;
	/** RegularExpression Id. */
	int OUTER = 376;
	/** RegularExpression Id. */
	int OUTPUT = 377;
	/** RegularExpression Id. */
	int OVER = 378;
	/** RegularExpression Id. */
	int OVERLAPS = 379;
	/** RegularExpression Id. */
	int OVERLAY = 380;
	/** RegularExpression Id. */
	int OVERRIDING = 381;
	/** RegularExpression Id. */
	int PAD = 382;
	/** RegularExpression Id. */
	int PARAMETER = 383;
	/** RegularExpression Id. */
	int PARAMETER_MODE = 384;
	/** RegularExpression Id. */
	int PARAMETER_NAME = 385;
	/** RegularExpression Id. */
	int PARAMETER_ORDINAL_POSITION = 386;
	/** RegularExpression Id. */
	int PARAMETER_SPECIFIC_CATALOG = 387;
	/** RegularExpression Id. */
	int PARAMETER_SPECIFIC_NAME = 388;
	/** RegularExpression Id. */
	int PARAMETER_SPECIFIC_SCHEMA = 389;
	/** RegularExpression Id. */
	int PARTIAL = 390;
	/** RegularExpression Id. */
	int PARTITION = 391;
	/** RegularExpression Id. */
	int PASCAL = 392;
	/** RegularExpression Id. */
	int PASSING = 393;
	/** RegularExpression Id. */
	int PASSTHROUGH = 394;
	/** RegularExpression Id. */
	int PAST = 395;
	/** RegularExpression Id. */
	int PATH = 396;
	/** RegularExpression Id. */
	int PATTERN = 397;
	/** RegularExpression Id. */
	int PER = 398;
	/** RegularExpression Id. */
	int PERCENT = 399;
	/** RegularExpression Id. */
	int PERCENTILE_CONT = 400;
	/** RegularExpression Id. */
	int PERCENTILE_DISC = 401;
	/** RegularExpression Id. */
	int PERCENT_RANK = 402;
	/** RegularExpression Id. */
	int PERIOD = 403;
	/** RegularExpression Id. */
	int PERMUTE = 404;
	/** RegularExpression Id. */
	int PLACING = 405;
	/** RegularExpression Id. */
	int PLAN = 406;
	/** RegularExpression Id. */
	int PLI = 407;
	/** RegularExpression Id. */
	int PORTION = 408;
	/** RegularExpression Id. */
	int POSITION = 409;
	/** RegularExpression Id. */
	int POSITION_REGEX = 410;
	/** RegularExpression Id. */
	int POWER = 411;
	/** RegularExpression Id. */
	int PRECEDES = 412;
	/** RegularExpression Id. */
	int PRECEDING = 413;
	/** RegularExpression Id. */
	int PRECISION = 414;
	/** RegularExpression Id. */
	int PREPARE = 415;
	/** RegularExpression Id. */
	int PRESERVE = 416;
	/** RegularExpression Id. */
	int PREV = 417;
	/** RegularExpression Id. */
	int PRIMARY = 418;
	/** RegularExpression Id. */
	int PRIOR = 419;
	/** RegularExpression Id. */
	int PRIVILEGES = 420;
	/** RegularExpression Id. */
	int PROCEDURE = 421;
	/** RegularExpression Id. */
	int PUBLIC = 422;
	/** RegularExpression Id. */
	int QUARTER = 423;
	/** RegularExpression Id. */
	int RANGE = 424;
	/** RegularExpression Id. */
	int RANK = 425;
	/** RegularExpression Id. */
	int READ = 426;
	/** RegularExpression Id. */
	int READS = 427;
	/** RegularExpression Id. */
	int REAL = 428;
	/** RegularExpression Id. */
	int RECURSIVE = 429;
	/** RegularExpression Id. */
	int REF = 430;
	/** RegularExpression Id. */
	int REFERENCES = 431;
	/** RegularExpression Id. */
	int REFERENCING = 432;
	/** RegularExpression Id. */
	int REGR_AVGX = 433;
	/** RegularExpression Id. */
	int REGR_AVGY = 434;
	/** RegularExpression Id. */
	int REGR_COUNT = 435;
	/** RegularExpression Id. */
	int REGR_INTERCEPT = 436;
	/** RegularExpression Id. */
	int REGR_R2 = 437;
	/** RegularExpression Id. */
	int REGR_SLOPE = 438;
	/** RegularExpression Id. */
	int REGR_SXX = 439;
	/** RegularExpression Id. */
	int REGR_SXY = 440;
	/** RegularExpression Id. */
	int REGR_SYY = 441;
	/** RegularExpression Id. */
	int RELATIVE = 442;
	/** RegularExpression Id. */
	int RELEASE = 443;
	/** RegularExpression Id. */
	int REPEATABLE = 444;
	/** RegularExpression Id. */
	int REPLACE = 445;
	/** RegularExpression Id. */
	int RESET = 446;
	/** RegularExpression Id. */
	int RESPECT = 447;
	/** RegularExpression Id. */
	int RESTART = 448;
	/** RegularExpression Id. */
	int RESTRICT = 449;
	/** RegularExpression Id. */
	int RESULT = 450;
	/** RegularExpression Id. */
	int RETURN = 451;
	/** RegularExpression Id. */
	int RETURNED_CARDINALITY = 452;
	/** RegularExpression Id. */
	int RETURNED_LENGTH = 453;
	/** RegularExpression Id. */
	int RETURNED_OCTET_LENGTH = 454;
	/** RegularExpression Id. */
	int RETURNED_SQLSTATE = 455;
	/** RegularExpression Id. */
	int RETURNING = 456;
	/** RegularExpression Id. */
	int RETURNS = 457;
	/** RegularExpression Id. */
	int REVOKE = 458;
	/** RegularExpression Id. */
	int RIGHT = 459;
	/** RegularExpression Id. */
	int ROLE = 460;
	/** RegularExpression Id. */
	int ROLLBACK = 461;
	/** RegularExpression Id. */
	int ROLLUP = 462;
	/** RegularExpression Id. */
	int ROUTINE = 463;
	/** RegularExpression Id. */
	int ROUTINE_CATALOG = 464;
	/** RegularExpression Id. */
	int ROUTINE_NAME = 465;
	/** RegularExpression Id. */
	int ROUTINE_SCHEMA = 466;
	/** RegularExpression Id. */
	int ROW = 467;
	/** RegularExpression Id. */
	int ROW_COUNT = 468;
	/** RegularExpression Id. */
	int ROW_NUMBER = 469;
	/** RegularExpression Id. */
	int ROWS = 470;
	/** RegularExpression Id. */
	int RUNNING = 471;
	/** RegularExpression Id. */
	int SAVEPOINT = 472;
	/** RegularExpression Id. */
	int SCALAR = 473;
	/** RegularExpression Id. */
	int SCALE = 474;
	/** RegularExpression Id. */
	int SCHEMA = 475;
	/** RegularExpression Id. */
	int SCHEMA_NAME = 476;
	/** RegularExpression Id. */
	int SCOPE = 477;
	/** RegularExpression Id. */
	int SCOPE_CATALOGS = 478;
	/** RegularExpression Id. */
	int SCOPE_NAME = 479;
	/** RegularExpression Id. */
	int SCOPE_SCHEMA = 480;
	/** RegularExpression Id. */
	int SCROLL = 481;
	/** RegularExpression Id. */
	int SEARCH = 482;
	/** RegularExpression Id. */
	int SECOND = 483;
	/** RegularExpression Id. */
	int SECONDS = 484;
	/** RegularExpression Id. */
	int SECTION = 485;
	/** RegularExpression Id. */
	int SECURITY = 486;
	/** RegularExpression Id. */
	int SEEK = 487;
	/** RegularExpression Id. */
	int SELECT = 488;
	/** RegularExpression Id. */
	int SELF = 489;
	/** RegularExpression Id. */
	int SENSITIVE = 490;
	/** RegularExpression Id. */
	int SEQUENCE = 491;
	/** RegularExpression Id. */
	int SERIALIZABLE = 492;
	/** RegularExpression Id. */
	int SERVER = 493;
	/** RegularExpression Id. */
	int SERVER_NAME = 494;
	/** RegularExpression Id. */
	int SESSION = 495;
	/** RegularExpression Id. */
	int SESSION_USER = 496;
	/** RegularExpression Id. */
	int SET = 497;
	/** RegularExpression Id. */
	int SETS = 498;
	/** RegularExpression Id. */
	int SET_MINUS = 499;
	/** RegularExpression Id. */
	int SHOW = 500;
	/** RegularExpression Id. */
	int SIMILAR = 501;
	/** RegularExpression Id. */
	int SIMPLE = 502;
	/** RegularExpression Id. */
	int SIZE = 503;
	/** RegularExpression Id. */
	int SKIP_ = 504;
	/** RegularExpression Id. */
	int SMALLINT = 505;
	/** RegularExpression Id. */
	int SOME = 506;
	/** RegularExpression Id. */
	int SOURCE = 507;
	/** RegularExpression Id. */
	int SPACE = 508;
	/** RegularExpression Id. */
	int SPECIFIC = 509;
	/** RegularExpression Id. */
	int SPECIFIC_NAME = 510;
	/** RegularExpression Id. */
	int SPECIFICTYPE = 511;
	/** RegularExpression Id. */
	int SQL = 512;
	/** RegularExpression Id. */
	int SQLEXCEPTION = 513;
	/** RegularExpression Id. */
	int SQLSTATE = 514;
	/** RegularExpression Id. */
	int SQLWARNING = 515;
	/** RegularExpression Id. */
	int SQL_BIGINT = 516;
	/** RegularExpression Id. */
	int SQL_BINARY = 517;
	/** RegularExpression Id. */
	int SQL_BIT = 518;
	/** RegularExpression Id. */
	int SQL_BLOB = 519;
	/** RegularExpression Id. */
	int SQL_BOOLEAN = 520;
	/** RegularExpression Id. */
	int SQL_CHAR = 521;
	/** RegularExpression Id. */
	int SQL_CLOB = 522;
	/** RegularExpression Id. */
	int SQL_DATE = 523;
	/** RegularExpression Id. */
	int SQL_DECIMAL = 524;
	/** RegularExpression Id. */
	int SQL_DOUBLE = 525;
	/** RegularExpression Id. */
	int SQL_FLOAT = 526;
	/** RegularExpression Id. */
	int SQL_INTEGER = 527;
	/** RegularExpression Id. */
	int SQL_INTERVAL_DAY = 528;
	/** RegularExpression Id. */
	int SQL_INTERVAL_DAY_TO_HOUR = 529;
	/** RegularExpression Id. */
	int SQL_INTERVAL_DAY_TO_MINUTE = 530;
	/** RegularExpression Id. */
	int SQL_INTERVAL_DAY_TO_SECOND = 531;
	/** RegularExpression Id. */
	int SQL_INTERVAL_HOUR = 532;
	/** RegularExpression Id. */
	int SQL_INTERVAL_HOUR_TO_MINUTE = 533;
	/** RegularExpression Id. */
	int SQL_INTERVAL_HOUR_TO_SECOND = 534;
	/** RegularExpression Id. */
	int SQL_INTERVAL_MINUTE = 535;
	/** RegularExpression Id. */
	int SQL_INTERVAL_MINUTE_TO_SECOND = 536;
	/** RegularExpression Id. */
	int SQL_INTERVAL_MONTH = 537;
	/** RegularExpression Id. */
	int SQL_INTERVAL_SECOND = 538;
	/** RegularExpression Id. */
	int SQL_INTERVAL_YEAR = 539;
	/** RegularExpression Id. */
	int SQL_INTERVAL_YEAR_TO_MONTH = 540;
	/** RegularExpression Id. */
	int SQL_LONGVARBINARY = 541;
	/** RegularExpression Id. */
	int SQL_LONGVARCHAR = 542;
	/** RegularExpression Id. */
	int SQL_LONGVARNCHAR = 543;
	/** RegularExpression Id. */
	int SQL_NCHAR = 544;
	/** RegularExpression Id. */
	int SQL_NCLOB = 545;
	/** RegularExpression Id. */
	int SQL_NUMERIC = 546;
	/** RegularExpression Id. */
	int SQL_NVARCHAR = 547;
	/** RegularExpression Id. */
	int SQL_REAL = 548;
	/** RegularExpression Id. */
	int SQL_SMALLINT = 549;
	/** RegularExpression Id. */
	int SQL_TIME = 550;
	/** RegularExpression Id. */
	int SQL_TIMESTAMP = 551;
	/** RegularExpression Id. */
	int SQL_TINYINT = 552;
	/** RegularExpression Id. */
	int SQL_TSI_DAY = 553;
	/** RegularExpression Id. */
	int SQL_TSI_FRAC_SECOND = 554;
	/** RegularExpression Id. */
	int SQL_TSI_HOUR = 555;
	/** RegularExpression Id. */
	int SQL_TSI_MICROSECOND = 556;
	/** RegularExpression Id. */
	int SQL_TSI_MINUTE = 557;
	/** RegularExpression Id. */
	int SQL_TSI_MONTH = 558;
	/** RegularExpression Id. */
	int SQL_TSI_QUARTER = 559;
	/** RegularExpression Id. */
	int SQL_TSI_SECOND = 560;
	/** RegularExpression Id. */
	int SQL_TSI_WEEK = 561;
	/** RegularExpression Id. */
	int SQL_TSI_YEAR = 562;
	/** RegularExpression Id. */
	int SQL_VARBINARY = 563;
	/** RegularExpression Id. */
	int SQL_VARCHAR = 564;
	/** RegularExpression Id. */
	int SQRT = 565;
	/** RegularExpression Id. */
	int START = 566;
	/** RegularExpression Id. */
	int STATE = 567;
	/** RegularExpression Id. */
	int STATEMENT = 568;
	/** RegularExpression Id. */
	int STATIC = 569;
	/** RegularExpression Id. */
	int STDDEV_POP = 570;
	/** RegularExpression Id. */
	int STDDEV_SAMP = 571;
	/** RegularExpression Id. */
	int STREAM = 572;
	/** RegularExpression Id. */
	int STRUCTURE = 573;
	/** RegularExpression Id. */
	int STYLE = 574;
	/** RegularExpression Id. */
	int SUBCLASS_ORIGIN = 575;
	/** RegularExpression Id. */
	int SUBMULTISET = 576;
	/** RegularExpression Id. */
	int SUBSET = 577;
	/** RegularExpression Id. */
	int SUBSTITUTE = 578;
	/** RegularExpression Id. */
	int SUBSTRING = 579;
	/** RegularExpression Id. */
	int SUBSTRING_REGEX = 580;
	/** RegularExpression Id. */
	int SUCCEEDS = 581;
	/** RegularExpression Id. */
	int SUM = 582;
	/** RegularExpression Id. */
	int SYMMETRIC = 583;
	/** RegularExpression Id. */
	int SYSTEM = 584;
	/** RegularExpression Id. */
	int SYSTEM_TIME = 585;
	/** RegularExpression Id. */
	int SYSTEM_USER = 586;
	/** RegularExpression Id. */
	int TABLE = 587;
	/** RegularExpression Id. */
	int TABLE_NAME = 588;
	/** RegularExpression Id. */
	int TABLESAMPLE = 589;
	/** RegularExpression Id. */
	int TEMPORARY = 590;
	/** RegularExpression Id. */
	int THEN = 591;
	/** RegularExpression Id. */
	int TIES = 592;
	/** RegularExpression Id. */
	int TIME = 593;
	/** RegularExpression Id. */
	int TIMESTAMP = 594;
	/** RegularExpression Id. */
	int TIMESTAMPADD = 595;
	/** RegularExpression Id. */
	int TIMESTAMPDIFF = 596;
	/** RegularExpression Id. */
	int TIMEZONE_HOUR = 597;
	/** RegularExpression Id. */
	int TIMEZONE_MINUTE = 598;
	/** RegularExpression Id. */
	int TINYINT = 599;
	/** RegularExpression Id. */
	int TO = 600;
	/** RegularExpression Id. */
	int TOP_LEVEL_COUNT = 601;
	/** RegularExpression Id. */
	int TRAILING = 602;
	/** RegularExpression Id. */
	int TRANSACTION = 603;
	/** RegularExpression Id. */
	int TRANSACTIONS_ACTIVE = 604;
	/** RegularExpression Id. */
	int TRANSACTIONS_COMMITTED = 605;
	/** RegularExpression Id. */
	int TRANSACTIONS_ROLLED_BACK = 606;
	/** RegularExpression Id. */
	int TRANSFORM = 607;
	/** RegularExpression Id. */
	int TRANSFORMS = 608;
	/** RegularExpression Id. */
	int TRANSLATE = 609;
	/** RegularExpression Id. */
	int TRANSLATE_REGEX = 610;
	/** RegularExpression Id. */
	int TRANSLATION = 611;
	/** RegularExpression Id. */
	int TREAT = 612;
	/** RegularExpression Id. */
	int TRIGGER = 613;
	/** RegularExpression Id. */
	int TRIGGER_CATALOG = 614;
	/** RegularExpression Id. */
	int TRIGGER_NAME = 615;
	/** RegularExpression Id. */
	int TRIGGER_SCHEMA = 616;
	/** RegularExpression Id. */
	int TRIM = 617;
	/** RegularExpression Id. */
	int TRIM_ARRAY = 618;
	/** RegularExpression Id. */
	int TRUE = 619;
	/** RegularExpression Id. */
	int TRUNCATE = 620;
	/** RegularExpression Id. */
	int TUMBLE = 621;
	/** RegularExpression Id. */
	int TYPE = 622;
	/** RegularExpression Id. */
	int UESCAPE = 623;
	/** RegularExpression Id. */
	int UNBOUNDED = 624;
	/** RegularExpression Id. */
	int UNCOMMITTED = 625;
	/** RegularExpression Id. */
	int UNCONDITIONAL = 626;
	/** RegularExpression Id. */
	int UNDER = 627;
	/** RegularExpression Id. */
	int UNION = 628;
	/** RegularExpression Id. */
	int UNIQUE = 629;
	/** RegularExpression Id. */
	int UNKNOWN = 630;
	/** RegularExpression Id. */
	int UNNAMED = 631;
	/** RegularExpression Id. */
	int UNNEST = 632;
	/** RegularExpression Id. */
	int UPDATE = 633;
	/** RegularExpression Id. */
	int UPPER = 634;
	/** RegularExpression Id. */
	int UPSERT = 635;
	/** RegularExpression Id. */
	int USAGE = 636;
	/** RegularExpression Id. */
	int USER = 637;
	/** RegularExpression Id. */
	int USER_DEFINED_TYPE_CATALOG = 638;
	/** RegularExpression Id. */
	int USER_DEFINED_TYPE_CODE = 639;
	/** RegularExpression Id. */
	int USER_DEFINED_TYPE_NAME = 640;
	/** RegularExpression Id. */
	int USER_DEFINED_TYPE_SCHEMA = 641;
	/** RegularExpression Id. */
	int USING = 642;
	/** RegularExpression Id. */
	int UTF8 = 643;
	/** RegularExpression Id. */
	int UTF16 = 644;
	/** RegularExpression Id. */
	int UTF32 = 645;
	/** RegularExpression Id. */
	int VALUE = 646;
	/** RegularExpression Id. */
	int VALUES = 647;
	/** RegularExpression Id. */
	int VALUE_OF = 648;
	/** RegularExpression Id. */
	int VAR_POP = 649;
	/** RegularExpression Id. */
	int VAR_SAMP = 650;
	/** RegularExpression Id. */
	int VARBINARY = 651;
	/** RegularExpression Id. */
	int VARCHAR = 652;
	/** RegularExpression Id. */
	int VARYING = 653;
	/** RegularExpression Id. */
	int VERSION = 654;
	/** RegularExpression Id. */
	int VERSIONING = 655;
	/** RegularExpression Id. */
	int VIEW = 656;
	/** RegularExpression Id. */
	int WEEK = 657;
	/** RegularExpression Id. */
	int WHEN = 658;
	/** RegularExpression Id. */
	int WHENEVER = 659;
	/** RegularExpression Id. */
	int WHERE = 660;
	/** RegularExpression Id. */
	int WIDTH_BUCKET = 661;
	/** RegularExpression Id. */
	int WINDOW = 662;
	/** RegularExpression Id. */
	int WITH = 663;
	/** RegularExpression Id. */
	int WITHIN = 664;
	/** RegularExpression Id. */
	int WITHOUT = 665;
	/** RegularExpression Id. */
	int WORK = 666;
	/** RegularExpression Id. */
	int WRAPPER = 667;
	/** RegularExpression Id. */
	int WRITE = 668;
	/** RegularExpression Id. */
	int XML = 669;
	/** RegularExpression Id. */
	int YEAR = 670;
	/** RegularExpression Id. */
	int YEARS = 671;
	/** RegularExpression Id. */
	int ZONE = 672;
	/** RegularExpression Id. */
	int DEDUP = 673;
	/** RegularExpression Id. */
	int UNSIGNED_INTEGER_LITERAL = 674;
	/** RegularExpression Id. */
	int APPROX_NUMERIC_LITERAL = 675;
	/** RegularExpression Id. */
	int DECIMAL_NUMERIC_LITERAL = 676;
	/** RegularExpression Id. */
	int EXPONENT = 677;
	/** RegularExpression Id. */
	int HEXDIGIT = 678;
	/** RegularExpression Id. */
	int WHITESPACE = 679;
	/** RegularExpression Id. */
	int BINARY_STRING_LITERAL = 680;
	/** RegularExpression Id. */
	int QUOTED_STRING = 681;
	/** RegularExpression Id. */
	int PREFIXED_STRING_LITERAL = 682;
	/** RegularExpression Id. */
	int UNICODE_STRING_LITERAL = 683;
	/** RegularExpression Id. */
	int CHARSETNAME = 684;
	/** RegularExpression Id. */
	int UNICODE_QUOTED_ESCAPE_CHAR = 685;
	/** RegularExpression Id. */
	int LPAREN = 686;
	/** RegularExpression Id. */
	int RPAREN = 687;
	/** RegularExpression Id. */
	int LBRACE_D = 688;
	/** RegularExpression Id. */
	int LBRACE_T = 689;
	/** RegularExpression Id. */
	int LBRACE_TS = 690;
	/** RegularExpression Id. */
	int LBRACE_FN = 691;
	/** RegularExpression Id. */
	int LBRACE = 692;
	/** RegularExpression Id. */
	int RBRACE = 693;
	/** RegularExpression Id. */
	int LBRACKET = 694;
	/** RegularExpression Id. */
	int RBRACKET = 695;
	/** RegularExpression Id. */
	int SEMICOLON = 696;
	/** RegularExpression Id. */
	int DOT = 697;
	/** RegularExpression Id. */
	int COMMA = 698;
	/** RegularExpression Id. */
	int EQ = 699;
	/** RegularExpression Id. */
	int GT = 700;
	/** RegularExpression Id. */
	int LT = 701;
	/** RegularExpression Id. */
	int HOOK = 702;
	/** RegularExpression Id. */
	int COLON = 703;
	/** RegularExpression Id. */
	int LE = 704;
	/** RegularExpression Id. */
	int GE = 705;
	/** RegularExpression Id. */
	int NE = 706;
	/** RegularExpression Id. */
	int NE2 = 707;
	/** RegularExpression Id. */
	int PLUS = 708;
	/** RegularExpression Id. */
	int MINUS = 709;
	/** RegularExpression Id. */
	int STAR = 710;
	/** RegularExpression Id. */
	int SLASH = 711;
	/** RegularExpression Id. */
	int PERCENT_REMAINDER = 712;
	/** RegularExpression Id. */
	int CONCAT = 713;
	/** RegularExpression Id. */
	int NAMED_ARGUMENT_ASSIGNMENT = 714;
	/** RegularExpression Id. */
	int DOUBLE_PERIOD = 715;
	/** RegularExpression Id. */
	int QUOTE = 716;
	/** RegularExpression Id. */
	int DOUBLE_QUOTE = 717;
	/** RegularExpression Id. */
	int VERTICAL_BAR = 718;
	/** RegularExpression Id. */
	int CARET = 719;
	/** RegularExpression Id. */
	int DOLLAR = 720;
	/** RegularExpression Id. */
	int HINT_BEG = 726;
	/** RegularExpression Id. */
	int COMMENT_END = 727;
	/** RegularExpression Id. */
	int SINGLE_LINE_COMMENT = 730;
	/** RegularExpression Id. */
	int FORMAL_COMMENT = 731;
	/** RegularExpression Id. */
	int MULTI_LINE_COMMENT = 732;
	/** RegularExpression Id. */
	int BRACKET_QUOTED_IDENTIFIER = 734;
	/** RegularExpression Id. */
	int QUOTED_IDENTIFIER = 735;
	/** RegularExpression Id. */
	int BACK_QUOTED_IDENTIFIER = 736;
	/** RegularExpression Id. */
	int COLLATION_ID = 737;
	/** RegularExpression Id. */
	int IDENTIFIER = 738;
	/** RegularExpression Id. */
	int UNICODE_QUOTED_IDENTIFIER = 739;
	/** RegularExpression Id. */
	int LETTER = 740;
	/** RegularExpression Id. */
	int DIGIT = 741;
	/** RegularExpression Id. */
	int BEL = 742;

	/** Lexical state. */
	int DEFAULT = 0;
	/** Lexical state. */
	int DQID = 1;
	/** Lexical state. */
	int BTID = 2;
	/** Lexical state. */
	int IN_FORMAL_COMMENT = 3;
	/** Lexical state. */
	int IN_MULTI_LINE_COMMENT = 4;

	/** Literal token values. */
	String[] tokenImage = {
			"<EOF>",
			"\"A\"",
			"\"ABS\"",
			"\"ABSENT\"",
			"\"ABSOLUTE\"",
			"\"ACTION\"",
			"\"ADA\"",
			"\"ADD\"",
			"\"ADMIN\"",
			"\"AFTER\"",
			"\"ALL\"",
			"\"ALLOCATE\"",
			"\"ALLOW\"",
			"\"ALTER\"",
			"\"ALWAYS\"",
			"\"AND\"",
			"\"ANY\"",
			"\"APPLY\"",
			"\"ARE\"",
			"\"ARRAY\"",
			"\"ARRAY_MAX_CARDINALITY\"",
			"\"AS\"",
			"\"ASC\"",
			"\"ASENSITIVE\"",
			"\"ASSERTION\"",
			"\"ASSIGNMENT\"",
			"\"ASYMMETRIC\"",
			"\"AT\"",
			"\"ATOMIC\"",
			"\"ATTRIBUTE\"",
			"\"ATTRIBUTES\"",
			"\"AUTHORIZATION\"",
			"\"AVG\"",
			"\"BEFORE\"",
			"\"BEGIN\"",
			"\"BEGIN_FRAME\"",
			"\"BEGIN_PARTITION\"",
			"\"BERNOULLI\"",
			"\"BETWEEN\"",
			"\"BIGINT\"",
			"\"BINARY\"",
			"\"BIT\"",
			"\"BLOB\"",
			"\"BOOLEAN\"",
			"\"BOTH\"",
			"\"BREADTH\"",
			"\"BY\"",
			"\"C\"",
			"\"CALL\"",
			"\"CALLED\"",
			"\"CARDINALITY\"",
			"\"CASCADE\"",
			"\"CASCADED\"",
			"\"CASE\"",
			"\"CAST\"",
			"\"CATALOG\"",
			"\"CATALOG_NAME\"",
			"\"CEIL\"",
			"\"CEILING\"",
			"\"CENTURY\"",
			"\"CHAIN\"",
			"\"CHAR\"",
			"\"CHAR_LENGTH\"",
			"\"CHARACTER\"",
			"\"CHARACTER_LENGTH\"",
			"\"CHARACTER_SET_CATALOG\"",
			"\"CHARACTER_SET_NAME\"",
			"\"CHARACTER_SET_SCHEMA\"",
			"\"CHARACTERISTICS\"",
			"\"CHARACTERS\"",
			"\"CHECK\"",
			"\"CLASSIFIER\"",
			"\"CLASS_ORIGIN\"",
			"\"CLOB\"",
			"\"CLOSE\"",
			"\"COALESCE\"",
			"\"COBOL\"",
			"\"COLLATE\"",
			"\"COLLATION\"",
			"\"COLLATION_CATALOG\"",
			"\"COLLATION_NAME\"",
			"\"COLLATION_SCHEMA\"",
			"\"COLLECT\"",
			"\"COLUMN\"",
			"\"COLUMN_NAME\"",
			"\"COMMAND_FUNCTION\"",
			"\"COMMAND_FUNCTION_CODE\"",
			"\"COMMIT\"",
			"\"COMMITTED\"",
			"\"CONDITION\"",
			"\"CONDITIONAL\"",
			"\"CONDITION_NUMBER\"",
			"\"CONNECT\"",
			"\"CONNECTION\"",
			"\"CONNECTION_NAME\"",
			"\"CONSTRAINT\"",
			"\"CONSTRAINT_CATALOG\"",
			"\"CONSTRAINT_NAME\"",
			"\"CONSTRAINT_SCHEMA\"",
			"\"CONSTRAINTS\"",
			"\"CONSTRUCTOR\"",
			"\"CONTAINS\"",
			"\"CONTINUE\"",
			"\"CONVERT\"",
			"\"CORR\"",
			"\"CORRESPONDING\"",
			"\"COUNT\"",
			"\"COVAR_POP\"",
			"\"COVAR_SAMP\"",
			"\"CREATE\"",
			"\"CROSS\"",
			"\"CUBE\"",
			"\"CUME_DIST\"",
			"\"CURRENT\"",
			"\"CURRENT_CATALOG\"",
			"\"CURRENT_DATE\"",
			"\"CURRENT_DEFAULT_TRANSFORM_GROUP\"",
			"\"CURRENT_PATH\"",
			"\"CURRENT_ROLE\"",
			"\"CURRENT_ROW\"",
			"\"CURRENT_SCHEMA\"",
			"\"CURRENT_TIME\"",
			"\"CURRENT_TIMESTAMP\"",
			"\"CURRENT_TRANSFORM_GROUP_FOR_TYPE\"",
			"\"CURRENT_USER\"",
			"\"CURSOR\"",
			"\"CURSOR_NAME\"",
			"\"CYCLE\"",
			"\"DATA\"",
			"\"DATABASE\"",
			"\"DATE\"",
			"\"DATETIME_INTERVAL_CODE\"",
			"\"DATETIME_INTERVAL_PRECISION\"",
			"\"DAY\"",
			"\"DAYS\"",
			"\"DEALLOCATE\"",
			"\"DEC\"",
			"\"DECADE\"",
			"\"DECIMAL\"",
			"\"DECLARE\"",
			"\"DEFAULT\"",
			"\"DEFAULTS\"",
			"\"DEFERRABLE\"",
			"\"DEFERRED\"",
			"\"DEFINE\"",
			"\"DEFINED\"",
			"\"DEFINER\"",
			"\"DEGREE\"",
			"\"DELETE\"",
			"\"DENSE_RANK\"",
			"\"DEPTH\"",
			"\"DEREF\"",
			"\"DERIVED\"",
			"\"DESC\"",
			"\"DESCRIBE\"",
			"\"DESCRIPTION\"",
			"\"DESCRIPTOR\"",
			"\"DETERMINISTIC\"",
			"\"DIAGNOSTICS\"",
			"\"DISALLOW\"",
			"\"DISCONNECT\"",
			"\"DISPATCH\"",
			"\"DISTINCT\"",
			"\"DOMAIN\"",
			"\"DOUBLE\"",
			"\"DOW\"",
			"\"DOY\"",
			"\"DROP\"",
			"\"DYNAMIC\"",
			"\"DYNAMIC_FUNCTION\"",
			"\"DYNAMIC_FUNCTION_CODE\"",
			"\"EACH\"",
			"\"ELEMENT\"",
			"\"ELSE\"",
			"\"EMPTY\"",
			"\"ENCODING\"",
			"\"END\"",
			"\"END-EXEC\"",
			"\"END_FRAME\"",
			"\"END_PARTITION\"",
			"\"EPOCH\"",
			"\"EQUALS\"",
			"\"ERROR\"",
			"\"ESCAPE\"",
			"\"EVERY\"",
			"\"EXCEPT\"",
			"\"EXCEPTION\"",
			"\"EXCLUDE\"",
			"\"EXCLUDING\"",
			"\"EXEC\"",
			"\"EXECUTE\"",
			"\"EXISTS\"",
			"\"EXP\"",
			"\"EXPLAIN\"",
			"\"EXTEND\"",
			"\"EXTERNAL\"",
			"\"EXTRACT\"",
			"\"FALSE\"",
			"\"FETCH\"",
			"\"FILTER\"",
			"\"FINAL\"",
			"\"FIRST\"",
			"\"FIRST_VALUE\"",
			"\"FLOAT\"",
			"\"FLOOR\"",
			"\"FOLLOWING\"",
			"\"FOR\"",
			"\"FORMAT\"",
			"\"FOREIGN\"",
			"\"FORTRAN\"",
			"\"FOUND\"",
			"\"FRAC_SECOND\"",
			"\"FRAME_ROW\"",
			"\"FREE\"",
			"\"FROM\"",
			"\"FULL\"",
			"\"FUNCTION\"",
			"\"FUSION\"",
			"\"G\"",
			"\"GENERAL\"",
			"\"GENERATED\"",
			"\"GEOMETRY\"",
			"\"GET\"",
			"\"GLOBAL\"",
			"\"GO\"",
			"\"GOTO\"",
			"\"GRANT\"",
			"\"GRANTED\"",
			"\"GROUP\"",
			"\"GROUPING\"",
			"\"GROUPS\"",
			"\"HAVING\"",
			"\"HIERARCHY\"",
			"\"HOLD\"",
			"\"HOUR\"",
			"\"HOURS\"",
			"\"IDENTITY\"",
			"\"IGNORE\"",
			"\"IMMEDIATE\"",
			"\"IMMEDIATELY\"",
			"\"IMPLEMENTATION\"",
			"\"IMPORT\"",
			"\"IN\"",
			"\"INCLUDING\"",
			"\"INCREMENT\"",
			"\"INDICATOR\"",
			"\"INITIAL\"",
			"\"INITIALLY\"",
			"\"INNER\"",
			"\"INOUT\"",
			"\"INPUT\"",
			"\"INSENSITIVE\"",
			"\"INSERT\"",
			"\"INSTANCE\"",
			"\"INSTANTIABLE\"",
			"\"INT\"",
			"\"INTEGER\"",
			"\"INTERSECT\"",
			"\"INTERSECTION\"",
			"\"INTERVAL\"",
			"\"INTO\"",
			"\"INVOKER\"",
			"\"IS\"",
			"\"ISODOW\"",
			"\"ISOYEAR\"",
			"\"ISOLATION\"",
			"\"JAVA\"",
			"\"JOIN\"",
			"\"JSON\"",
			"\"JSON_ARRAY\"",
			"\"JSON_ARRAYAGG\"",
			"\"JSON_EXISTS\"",
			"\"JSON_OBJECT\"",
			"\"JSON_OBJECTAGG\"",
			"\"JSON_QUERY\"",
			"\"JSON_VALUE\"",
			"\"K\"",
			"\"KEY\"",
			"\"KEY_MEMBER\"",
			"\"KEY_TYPE\"",
			"\"LABEL\"",
			"\"LAG\"",
			"\"LANGUAGE\"",
			"\"LARGE\"",
			"\"LAST\"",
			"\"LAST_VALUE\"",
			"\"LATERAL\"",
			"\"LEAD\"",
			"\"LEADING\"",
			"\"LEFT\"",
			"\"LENGTH\"",
			"\"LEVEL\"",
			"\"LIBRARY\"",
			"\"LIKE\"",
			"\"LIKE_REGEX\"",
			"\"LIMIT\"",
			"\"LN\"",
			"\"LOCAL\"",
			"\"LOCALTIME\"",
			"\"LOCALTIMESTAMP\"",
			"\"LOCATOR\"",
			"\"LOWER\"",
			"\"M\"",
			"\"MAP\"",
			"\"MATCH\"",
			"\"MATCHED\"",
			"\"MATCHES\"",
			"\"MATCH_NUMBER\"",
			"\"MATCH_RECOGNIZE\"",
			"\"MAX\"",
			"\"MAXVALUE\"",
			"\"MEASURES\"",
			"\"MEMBER\"",
			"\"MERGE\"",
			"\"MESSAGE_LENGTH\"",
			"\"MESSAGE_OCTET_LENGTH\"",
			"\"MESSAGE_TEXT\"",
			"\"METHOD\"",
			"\"MICROSECOND\"",
			"\"MILLISECOND\"",
			"\"MILLENNIUM\"",
			"\"MIN\"",
			"\"MINUTE\"",
			"\"MINUTES\"",
			"\"MINVALUE\"",
			"\"MOD\"",
			"\"MODIFIES\"",
			"\"MODULE\"",
			"\"MONTH\"",
			"\"MONTHS\"",
			"\"MORE\"",
			"\"MULTISET\"",
			"\"MUMPS\"",
			"\"NAME\"",
			"\"NAMES\"",
			"\"NANOSECOND\"",
			"\"NATIONAL\"",
			"\"NATURAL\"",
			"\"NCHAR\"",
			"\"NCLOB\"",
			"\"NESTING\"",
			"\"NEW\"",
			"\"NEXT\"",
			"\"NO\"",
			"\"NONE\"",
			"\"NORMALIZE\"",
			"\"NORMALIZED\"",
			"\"NOT\"",
			"\"NTH_VALUE\"",
			"\"NTILE\"",
			"\"NULL\"",
			"\"NULLABLE\"",
			"\"NULLIF\"",
			"\"NULLS\"",
			"\"NUMBER\"",
			"\"NUMERIC\"",
			"\"OBJECT\"",
			"\"OCCURRENCES_REGEX\"",
			"\"OCTET_LENGTH\"",
			"\"OCTETS\"",
			"\"OF\"",
			"\"OFFSET\"",
			"\"OLD\"",
			"\"OMIT\"",
			"\"ON\"",
			"\"ONE\"",
			"\"ONLY\"",
			"\"OPEN\"",
			"\"OPTION\"",
			"\"OPTIONS\"",
			"\"OR\"",
			"\"ORDER\"",
			"\"ORDERING\"",
			"\"ORDINALITY\"",
			"\"OTHERS\"",
			"\"OUT\"",
			"\"OUTER\"",
			"\"OUTPUT\"",
			"\"OVER\"",
			"\"OVERLAPS\"",
			"\"OVERLAY\"",
			"\"OVERRIDING\"",
			"\"PAD\"",
			"\"PARAMETER\"",
			"\"PARAMETER_MODE\"",
			"\"PARAMETER_NAME\"",
			"\"PARAMETER_ORDINAL_POSITION\"",
			"\"PARAMETER_SPECIFIC_CATALOG\"",
			"\"PARAMETER_SPECIFIC_NAME\"",
			"\"PARAMETER_SPECIFIC_SCHEMA\"",
			"\"PARTIAL\"",
			"\"PARTITION\"",
			"\"PASCAL\"",
			"\"PASSING\"",
			"\"PASSTHROUGH\"",
			"\"PAST\"",
			"\"PATH\"",
			"\"PATTERN\"",
			"\"PER\"",
			"\"PERCENT\"",
			"\"PERCENTILE_CONT\"",
			"\"PERCENTILE_DISC\"",
			"\"PERCENT_RANK\"",
			"\"PERIOD\"",
			"\"PERMUTE\"",
			"\"PLACING\"",
			"\"PLAN\"",
			"\"PLI\"",
			"\"PORTION\"",
			"\"POSITION\"",
			"\"POSITION_REGEX\"",
			"\"POWER\"",
			"\"PRECEDES\"",
			"\"PRECEDING\"",
			"\"PRECISION\"",
			"\"PREPARE\"",
			"\"PRESERVE\"",
			"\"PREV\"",
			"\"PRIMARY\"",
			"\"PRIOR\"",
			"\"PRIVILEGES\"",
			"\"PROCEDURE\"",
			"\"PUBLIC\"",
			"\"QUARTER\"",
			"\"RANGE\"",
			"\"RANK\"",
			"\"READ\"",
			"\"READS\"",
			"\"REAL\"",
			"\"RECURSIVE\"",
			"\"REF\"",
			"\"REFERENCES\"",
			"\"REFERENCING\"",
			"\"REGR_AVGX\"",
			"\"REGR_AVGY\"",
			"\"REGR_COUNT\"",
			"\"REGR_INTERCEPT\"",
			"\"REGR_R2\"",
			"\"REGR_SLOPE\"",
			"\"REGR_SXX\"",
			"\"REGR_SXY\"",
			"\"REGR_SYY\"",
			"\"RELATIVE\"",
			"\"RELEASE\"",
			"\"REPEATABLE\"",
			"\"REPLACE\"",
			"\"RESET\"",
			"\"RESPECT\"",
			"\"RESTART\"",
			"\"RESTRICT\"",
			"\"RESULT\"",
			"\"RETURN\"",
			"\"RETURNED_CARDINALITY\"",
			"\"RETURNED_LENGTH\"",
			"\"RETURNED_OCTET_LENGTH\"",
			"\"RETURNED_SQLSTATE\"",
			"\"RETURNING\"",
			"\"RETURNS\"",
			"\"REVOKE\"",
			"\"RIGHT\"",
			"\"ROLE\"",
			"\"ROLLBACK\"",
			"\"ROLLUP\"",
			"\"ROUTINE\"",
			"\"ROUTINE_CATALOG\"",
			"\"ROUTINE_NAME\"",
			"\"ROUTINE_SCHEMA\"",
			"\"ROW\"",
			"\"ROW_COUNT\"",
			"\"ROW_NUMBER\"",
			"\"ROWS\"",
			"\"RUNNING\"",
			"\"SAVEPOINT\"",
			"\"SCALAR\"",
			"\"SCALE\"",
			"\"SCHEMA\"",
			"\"SCHEMA_NAME\"",
			"\"SCOPE\"",
			"\"SCOPE_CATALOGS\"",
			"\"SCOPE_NAME\"",
			"\"SCOPE_SCHEMA\"",
			"\"SCROLL\"",
			"\"SEARCH\"",
			"\"SECOND\"",
			"\"SECONDS\"",
			"\"SECTION\"",
			"\"SECURITY\"",
			"\"SEEK\"",
			"\"SELECT\"",
			"\"SELF\"",
			"\"SENSITIVE\"",
			"\"SEQUENCE\"",
			"\"SERIALIZABLE\"",
			"\"SERVER\"",
			"\"SERVER_NAME\"",
			"\"SESSION\"",
			"\"SESSION_USER\"",
			"\"SET\"",
			"\"SETS\"",
			"\"MINUS\"",
			"\"SHOW\"",
			"\"SIMILAR\"",
			"\"SIMPLE\"",
			"\"SIZE\"",
			"\"SKIP\"",
			"\"SMALLINT\"",
			"\"SOME\"",
			"\"SOURCE\"",
			"\"SPACE\"",
			"\"SPECIFIC\"",
			"\"SPECIFIC_NAME\"",
			"\"SPECIFICTYPE\"",
			"\"SQL\"",
			"\"SQLEXCEPTION\"",
			"\"SQLSTATE\"",
			"\"SQLWARNING\"",
			"\"SQL_BIGINT\"",
			"\"SQL_BINARY\"",
			"\"SQL_BIT\"",
			"\"SQL_BLOB\"",
			"\"SQL_BOOLEAN\"",
			"\"SQL_CHAR\"",
			"\"SQL_CLOB\"",
			"\"SQL_DATE\"",
			"\"SQL_DECIMAL\"",
			"\"SQL_DOUBLE\"",
			"\"SQL_FLOAT\"",
			"\"SQL_INTEGER\"",
			"\"SQL_INTERVAL_DAY\"",
			"\"SQL_INTERVAL_DAY_TO_HOUR\"",
			"\"SQL_INTERVAL_DAY_TO_MINUTE\"",
			"\"SQL_INTERVAL_DAY_TO_SECOND\"",
			"\"SQL_INTERVAL_HOUR\"",
			"\"SQL_INTERVAL_HOUR_TO_MINUTE\"",
			"\"SQL_INTERVAL_HOUR_TO_SECOND\"",
			"\"SQL_INTERVAL_MINUTE\"",
			"\"SQL_INTERVAL_MINUTE_TO_SECOND\"",
			"\"SQL_INTERVAL_MONTH\"",
			"\"SQL_INTERVAL_SECOND\"",
			"\"SQL_INTERVAL_YEAR\"",
			"\"SQL_INTERVAL_YEAR_TO_MONTH\"",
			"\"SQL_LONGVARBINARY\"",
			"\"SQL_LONGVARCHAR\"",
			"\"SQL_LONGVARNCHAR\"",
			"\"SQL_NCHAR\"",
			"\"SQL_NCLOB\"",
			"\"SQL_NUMERIC\"",
			"\"SQL_NVARCHAR\"",
			"\"SQL_REAL\"",
			"\"SQL_SMALLINT\"",
			"\"SQL_TIME\"",
			"\"SQL_TIMESTAMP\"",
			"\"SQL_TINYINT\"",
			"\"SQL_TSI_DAY\"",
			"\"SQL_TSI_FRAC_SECOND\"",
			"\"SQL_TSI_HOUR\"",
			"\"SQL_TSI_MICROSECOND\"",
			"\"SQL_TSI_MINUTE\"",
			"\"SQL_TSI_MONTH\"",
			"\"SQL_TSI_QUARTER\"",
			"\"SQL_TSI_SECOND\"",
			"\"SQL_TSI_WEEK\"",
			"\"SQL_TSI_YEAR\"",
			"\"SQL_VARBINARY\"",
			"\"SQL_VARCHAR\"",
			"\"SQRT\"",
			"\"START\"",
			"\"STATE\"",
			"\"STATEMENT\"",
			"\"STATIC\"",
			"\"STDDEV_POP\"",
			"\"STDDEV_SAMP\"",
			"\"STREAM\"",
			"\"STRUCTURE\"",
			"\"STYLE\"",
			"\"SUBCLASS_ORIGIN\"",
			"\"SUBMULTISET\"",
			"\"SUBSET\"",
			"\"SUBSTITUTE\"",
			"\"SUBSTRING\"",
			"\"SUBSTRING_REGEX\"",
			"\"SUCCEEDS\"",
			"\"SUM\"",
			"\"SYMMETRIC\"",
			"\"SYSTEM\"",
			"\"SYSTEM_TIME\"",
			"\"SYSTEM_USER\"",
			"\"TABLE\"",
			"\"TABLE_NAME\"",
			"\"TABLESAMPLE\"",
			"\"TEMPORARY\"",
			"\"THEN\"",
			"\"TIES\"",
			"\"TIME\"",
			"\"TIMESTAMP\"",
			"\"TIMESTAMPADD\"",
			"\"TIMESTAMPDIFF\"",
			"\"TIMEZONE_HOUR\"",
			"\"TIMEZONE_MINUTE\"",
			"\"TINYINT\"",
			"\"TO\"",
			"\"TOP_LEVEL_COUNT\"",
			"\"TRAILING\"",
			"\"TRANSACTION\"",
			"\"TRANSACTIONS_ACTIVE\"",
			"\"TRANSACTIONS_COMMITTED\"",
			"\"TRANSACTIONS_ROLLED_BACK\"",
			"\"TRANSFORM\"",
			"\"TRANSFORMS\"",
			"\"TRANSLATE\"",
			"\"TRANSLATE_REGEX\"",
			"\"TRANSLATION\"",
			"\"TREAT\"",
			"\"TRIGGER\"",
			"\"TRIGGER_CATALOG\"",
			"\"TRIGGER_NAME\"",
			"\"TRIGGER_SCHEMA\"",
			"\"TRIM\"",
			"\"TRIM_ARRAY\"",
			"\"TRUE\"",
			"\"TRUNCATE\"",
			"\"TUMBLE\"",
			"\"TYPE\"",
			"\"UESCAPE\"",
			"\"UNBOUNDED\"",
			"\"UNCOMMITTED\"",
			"\"UNCONDITIONAL\"",
			"\"UNDER\"",
			"\"UNION\"",
			"\"UNIQUE\"",
			"\"UNKNOWN\"",
			"\"UNNAMED\"",
			"\"UNNEST\"",
			"\"UPDATE\"",
			"\"UPPER\"",
			"\"UPSERT\"",
			"\"USAGE\"",
			"\"USER\"",
			"\"USER_DEFINED_TYPE_CATALOG\"",
			"\"USER_DEFINED_TYPE_CODE\"",
			"\"USER_DEFINED_TYPE_NAME\"",
			"\"USER_DEFINED_TYPE_SCHEMA\"",
			"\"USING\"",
			"\"UTF8\"",
			"\"UTF16\"",
			"\"UTF32\"",
			"\"VALUE\"",
			"\"VALUES\"",
			"\"VALUE_OF\"",
			"\"VAR_POP\"",
			"\"VAR_SAMP\"",
			"\"VARBINARY\"",
			"\"VARCHAR\"",
			"\"VARYING\"",
			"\"VERSION\"",
			"\"VERSIONING\"",
			"\"VIEW\"",
			"\"WEEK\"",
			"\"WHEN\"",
			"\"WHENEVER\"",
			"\"WHERE\"",
			"\"WIDTH_BUCKET\"",
			"\"WINDOW\"",
			"\"WITH\"",
			"\"WITHIN\"",
			"\"WITHOUT\"",
			"\"WORK\"",
			"\"WRAPPER\"",
			"\"WRITE\"",
			"\"XML\"",
			"\"YEAR\"",
			"\"YEARS\"",
			"\"ZONE\"",
			"\"DEDUP\"",
			"<UNSIGNED_INTEGER_LITERAL>",
			"<APPROX_NUMERIC_LITERAL>",
			"<DECIMAL_NUMERIC_LITERAL>",
			"<EXPONENT>",
			"<HEXDIGIT>",
			"<WHITESPACE>",
			"<BINARY_STRING_LITERAL>",
			"<QUOTED_STRING>",
			"<PREFIXED_STRING_LITERAL>",
			"<UNICODE_STRING_LITERAL>",
			"<CHARSETNAME>",
			"<UNICODE_QUOTED_ESCAPE_CHAR>",
			"\"(\"",
			"\")\"",
			"<LBRACE_D>",
			"<LBRACE_T>",
			"<LBRACE_TS>",
			"<LBRACE_FN>",
			"\"{\"",
			"\"}\"",
			"\"[\"",
			"\"]\"",
			"\";\"",
			"\".\"",
			"\",\"",
			"\"=\"",
			"\">\"",
			"\"<\"",
			"\"?\"",
			"\":\"",
			"\"<=\"",
			"\">=\"",
			"\"<>\"",
			"\"!=\"",
			"\"+\"",
			"\"-\"",
			"\"*\"",
			"\"/\"",
			"\"%\"",
			"\"||\"",
			"\"=>\"",
			"\"..\"",
			"\"\\\'\"",
			"\"\\\"\"",
			"\"|\"",
			"\"^\"",
			"\"$\"",
			"\" \"",
			"\"\\t\"",
			"\"\\n\"",
			"\"\\r\"",
			"\"\\f\"",
			"<HINT_BEG>",
			"\"*/\"",
			"<token of kind 728>",
			"\"/*\"",
			"<SINGLE_LINE_COMMENT>",
			"<FORMAL_COMMENT>",
			"<MULTI_LINE_COMMENT>",
			"<token of kind 733>",
			"<BRACKET_QUOTED_IDENTIFIER>",
			"<QUOTED_IDENTIFIER>",
			"<BACK_QUOTED_IDENTIFIER>",
			"<COLLATION_ID>",
			"<IDENTIFIER>",
			"<UNICODE_QUOTED_IDENTIFIER>",
			"<LETTER>",
			"<DIGIT>",
			"<BEL>",
	};

}
