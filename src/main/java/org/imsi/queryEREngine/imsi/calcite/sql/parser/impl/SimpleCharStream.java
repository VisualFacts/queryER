/* Generated by: ParserGeneratorCC: Do not edit this line. SimpleCharStream.java Version 1.1 */
/* ParserGeneratorCCOptions:SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package org.imsi.queryEREngine.imsi.calcite.sql.parser.impl;

/**
 * An implementation of interface CharStream, where the stream is assumed to
 * contain only ASCII characters (without unicode processing).
 */
public
class SimpleCharStream extends AbstractCharStream
{
	protected java.io.Reader inputStream;

	@Override
	protected int streamRead (final char[] aBuf, final int nOfs, final int nLen) throws java.io.IOException
	{
		return inputStream.read (aBuf, nOfs, nLen);
	}

	@Override
	protected void streamClose () throws java.io.IOException
	{
		inputStream.close ();
	}

	/** Constructor. */
	public SimpleCharStream(final java.io.Reader dstream,
			final int startline,
			final int startcolumn,
			final int buffersize)
	{
		super (startline, startcolumn, buffersize);
		inputStream = dstream;
	}

	/** Constructor. */
	public SimpleCharStream(final java.io.Reader dstream,
			final int startline,
			final int startcolumn)
	{
		this(dstream, startline, startcolumn, DEFAULT_BUF_SIZE);
	}

	/** Constructor. */
	public SimpleCharStream(final java.io.Reader dstream)
	{
		this(dstream, 1, 1, DEFAULT_BUF_SIZE);
	}

	/** Reinitialise. */
	public void reInit(final java.io.Reader dstream,
			final int startline,
			final int startcolumn,
			final int buffersize)
	{
		inputStream = dstream;
		super.reInit (startline, startcolumn, buffersize);
	}

	/** Reinitialise. */
	public void reInit(final java.io.Reader dstream,
			final int startline,
			final int startcolumn)
	{
		reInit(dstream, startline, startcolumn, DEFAULT_BUF_SIZE);
	}

	/** Reinitialise. */
	public void reInit(final java.io.Reader dstream)
	{
		reInit(dstream, 1, 1, DEFAULT_BUF_SIZE);
	}

	/** Constructor. */
	public SimpleCharStream(final java.io.InputStream dstream,
			final java.nio.charset.Charset encoding,
			final int startline,
			final int startcolumn,
			final int buffersize)
	{
		this(new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
	}

	/** Constructor. */
	public SimpleCharStream(final java.io.InputStream dstream,
			final java.nio.charset.Charset encoding,
			final int startline,
			final int startcolumn)
	{
		this(dstream, encoding, startline, startcolumn, DEFAULT_BUF_SIZE);
	}

	/** Constructor. */
	public SimpleCharStream(final java.io.InputStream dstream,
			final java.nio.charset.Charset encoding)
	{
		this(dstream, encoding, 1, 1, DEFAULT_BUF_SIZE);
	}

	/** Reinitialise. */
	public void reInit(final java.io.InputStream dstream,
			final java.nio.charset.Charset encoding)
	{
		reInit(dstream, encoding, 1, 1, DEFAULT_BUF_SIZE);
	}

	/** Reinitialise. */
	public void reInit(final java.io.InputStream dstream,
			final java.nio.charset.Charset encoding,
			final int startline,
			final int startcolumn)
	{
		reInit(dstream, encoding, startline, startcolumn, DEFAULT_BUF_SIZE);
	}

	/** Reinitialise. */
	public void reInit(final java.io.InputStream dstream,
			final java.nio.charset.Charset encoding,
			final int startline,
			final int startcolumn,
			final int buffersize)
	{
		reInit(new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
	}
}
/* ParserGeneratorCC - OriginalChecksum=303e76c49ffbd8f83d6999bc98d7e22c (do not edit this line) */
